	.file	1 "8192cd_profile.c"
	.section .mdebug.abi32
	.previous
	.gnu_attribute 4, 3
	.text
	.align	2
	.globl	bytecopy
	.set	nomips16
	.ent	bytecopy
	.type	bytecopy, @function
bytecopy:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	beq	$6,$0,$L2
	move	$3,$0

	move	$2,$0
$L3:
	addu	$7,$4,$3
	lbu	$8,0($7)
	addiu	$2,$2,1
	addu	$3,$5,$3
	sltu	$7,$2,$6
	sb	$8,0($3)
	bne	$7,$0,$L3
	move	$3,$2

$L2:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	bytecopy
	.size	bytecopy, .-bytecopy
	.align	2
	.globl	get_bssid
	.set	nomips16
	.ent	get_bssid
	.type	get_bssid, @function
get_bssid:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lhu	$2,0($4)
	li	$3,2			# 0x2
	andi	$5,$2,0x100
	movz	$3,$0,$5
	ext	$2,$2,9,1
	or	$3,$3,$2
	li	$5,1			# 0x1
	beq	$3,$5,$L17
	addiu	$2,$4,10

	bne	$3,$0,$L16
	addiu	$2,$4,16

$L17:
	j	$31
	nop

$L16:
	addiu	$5,$4,4
	xori	$3,$3,0x2
	addiu	$2,$4,10
	j	$31
	movz	$2,$5,$3

	.set	macro
	.set	reorder
	.end	get_bssid
	.size	get_bssid, .-get_bssid
	.align	2
	.globl	rtk_sc_register_pattern
	.set	nomips16
	.ent	rtk_sc_register_pattern
	.type	rtk_sc_register_pattern, @function
rtk_sc_register_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(g_sc_ctx)
	addiu	$2,$2,%lo(g_sc_ctx)
	lw	$3,2672($2)
	addiu	$5,$3,604
	sll	$5,$5,2
	addu	$5,$2,$5
	lw	$6,0($5)
	beq	$6,$0,$L21
	addiu	$3,$3,1

	sw	$3,2672($2)
	j	$31
	move	$2,$0

$L21:
	sw	$4,0($5)
	lw	$3,2672($2)
	addiu	$3,$3,1
	sw	$3,2672($2)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_register_pattern
	.size	rtk_sc_register_pattern, .-rtk_sc_register_pattern
	.align	2
	.globl	CHECKSUM_OK
	.set	nomips16
	.ent	CHECKSUM_OK
	.type	CHECKSUM_OK, @function
CHECKSUM_OK:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	blez	$5,$L28
	li	$2,1			# 0x1

	move	$2,$0
	move	$3,$0
$L25:
	addu	$6,$4,$3
	lbu	$6,0($6)
	addiu	$3,$3,1
	addu	$2,$2,$6
	bne	$3,$5,$L25
	andi	$2,$2,0x00ff

	sltu	$2,$2,1
$L28:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	CHECKSUM_OK
	.size	CHECKSUM_OK, .-CHECKSUM_OK
	.align	2
	.globl	rtk_sc_set_ack_pkt
	.set	nomips16
	.ent	rtk_sc_set_ack_pkt
	.type	rtk_sc_set_ack_pkt, @function
rtk_sc_set_ack_pkt:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_pkt
	.size	rtk_sc_set_ack_pkt, .-rtk_sc_set_ack_pkt
	.align	2
	.globl	send_simple_config_ack
	.set	nomips16
	.ent	send_simple_config_ack
	.type	send_simple_config_ack, @function
send_simple_config_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	send_simple_config_ack
	.size	send_simple_config_ack, .-send_simple_config_ack
	.align	2
	.globl	rtk_sc_check_pattern
	.set	nomips16
	.ent	rtk_sc_check_pattern
	.type	rtk_sc_check_pattern, @function
rtk_sc_check_pattern:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,40($4)
	beq	$25,$0,$L37
	nop

	jr	$25
	nop

$L37:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_check_pattern
	.size	rtk_sc_check_pattern, .-rtk_sc_check_pattern
	.align	2
	.globl	rtk_sc_generate_key
	.set	nomips16
	.ent	rtk_sc_generate_key
	.type	rtk_sc_generate_key, @function
rtk_sc_generate_key:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,48($4)
	beq	$25,$0,$L42
	nop

	jr	$25
	nop

$L42:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_generate_key
	.size	rtk_sc_generate_key, .-rtk_sc_generate_key
	.align	2
	.globl	rtk_sc_get_cipher_info
	.set	nomips16
	.ent	rtk_sc_get_cipher_info
	.type	rtk_sc_get_cipher_info, @function
rtk_sc_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,44($4)
	beq	$25,$0,$L47
	nop

	jr	$25
	nop

$L47:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_get_cipher_info
	.size	rtk_sc_get_cipher_info, .-rtk_sc_get_cipher_info
	.align	2
	.globl	rtk_sc_decode_profile
	.set	nomips16
	.ent	rtk_sc_decode_profile
	.type	rtk_sc_decode_profile, @function
rtk_sc_decode_profile:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,52($4)
	beq	$25,$0,$L52
	nop

	jr	$25
	nop

$L52:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_decode_profile
	.size	rtk_sc_decode_profile, .-rtk_sc_decode_profile
	.align	2
	.globl	rtk_sc_get_tlv_info
	.set	nomips16
	.ent	rtk_sc_get_tlv_info
	.type	rtk_sc_get_tlv_info, @function
rtk_sc_get_tlv_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,56($4)
	beq	$25,$0,$L57
	nop

	jr	$25
	nop

$L57:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_get_tlv_info
	.size	rtk_sc_get_tlv_info, .-rtk_sc_get_tlv_info
	.align	2
	.globl	rtk_sc_set_ack_info
	.set	nomips16
	.ent	rtk_sc_set_ack_info
	.type	rtk_sc_set_ack_info, @function
rtk_sc_set_ack_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$25,60($4)
	beq	$25,$0,$L62
	nop

	jr	$25
	nop

$L62:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_set_ack_info
	.size	rtk_sc_set_ack_info, .-rtk_sc_set_ack_info
	.align	2
	.globl	mcast_udp_get_cipher_info
	.set	nomips16
	.ent	mcast_udp_get_cipher_info
	.type	mcast_udp_get_cipher_info, @function
mcast_udp_get_cipher_info:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$8,1852($5)
	beq	$8,$0,$L64
	nop

	move	$3,$5
	move	$2,$0
$L65:
	lbu	$7,319($3)
	addu	$6,$5,$2
	addiu	$2,$2,1
	sltu	$4,$2,$8
	sb	$7,2152($6)
	bne	$4,$0,$L65
	addiu	$3,$3,6

$L64:
	sw	$8,2408($5)
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_get_cipher_info
	.size	mcast_udp_get_cipher_info, .-mcast_udp_get_cipher_info
	.align	2
	.globl	mcast_udp_send_ack
	.set	nomips16
	.ent	mcast_udp_send_ack
	.type	mcast_udp_send_ack, @function
mcast_udp_send_ack:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	mcast_udp_send_ack
	.size	mcast_udp_send_ack, .-mcast_udp_send_ack
	.align	2
	.globl	get_sc_sync_state
	.set	nomips16
	.ent	get_sc_sync_state
	.type	get_sc_sync_state, @function
get_sc_sync_state:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(finish_sync)
	j	$31
	lw	$2,%lo(finish_sync)($2)

	.set	macro
	.set	reorder
	.end	get_sc_sync_state
	.size	get_sc_sync_state, .-get_sc_sync_state
	.align	2
	.globl	update_wlan_seq
	.set	nomips16
	.ent	update_wlan_seq
	.type	update_wlan_seq, @function
update_wlan_seq:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lbu	$2,40($4)
	li	$3,2			# 0x2
	beq	$2,$3,$L76
	li	$3,1			# 0x1

	beq	$2,$3,$L77
	lui	$2,%hi(g_sc_ctx+10808)

	j	$31
	nop

$L77:
	lhu	$3,36($4)
	j	$31
	sh	$3,%lo(g_sc_ctx+10808)($2)

$L76:
	lhu	$3,36($4)
	lui	$2,%hi(g_sc_ctx+10810)
	j	$31
	sh	$3,%lo(g_sc_ctx+10810)($2)

	.set	macro
	.set	reorder
	.end	update_wlan_seq
	.size	update_wlan_seq, .-update_wlan_seq
	.align	2
	.globl	check_sync_pkt
	.set	nomips16
	.ent	check_sync_pkt
	.type	check_sync_pkt, @function
check_sync_pkt:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lw	$2,12($4)
	subu	$2,$2,$5
	ext	$3,$2,4,6
	addiu	$4,$3,-1
	sltu	$4,$4,15
	bne	$4,$0,$L100
	slt	$4,$2,512

$L81:
	li	$2,-1			# 0xffffffffffffffff
$L101:
	j	$31
	nop

$L100:
	beq	$4,$0,$L81
	sltu	$5,$3,16

	beq	$5,$0,$L81
	andi	$4,$2,0xf

	lui	$2,%hi($L96)
	addiu	$2,$2,%lo($L96)
	sll	$3,$3,2
	addu	$3,$2,$3
	lw	$2,0($3)
	j	$2
	nop

	.rdata
	.align	2
	.align	2
$L96:
	.word	$L81
	.word	$L81
	.word	$L82
	.word	$L83
	.word	$L84
	.word	$L85
	.word	$L86
	.word	$L87
	.word	$L88
	.word	$L89
	.word	$L90
	.word	$L91
	.word	$L92
	.word	$L93
	.word	$L94
	.word	$L95
	.text
$L95:
	li	$3,1			# 0x1
	beq	$4,$3,$L101
	li	$2,14			# 0xe

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L94:
	li	$3,8			# 0x8
	beq	$4,$3,$L101
	li	$2,13			# 0xd

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L93:
	li	$3,9			# 0x9
	beq	$4,$3,$L101
	li	$2,12			# 0xc

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L92:
	li	$3,14			# 0xe
	beq	$4,$3,$L101
	li	$2,11			# 0xb

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L91:
	li	$3,15			# 0xf
	beq	$4,$3,$L101
	li	$2,10			# 0xa

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L90:
	li	$3,6			# 0x6
	beq	$4,$3,$L101
	li	$2,9			# 0x9

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L89:
	li	$3,7			# 0x7
	beq	$4,$3,$L101
	li	$2,8			# 0x8

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L88:
	li	$3,12			# 0xc
	beq	$4,$3,$L101
	li	$2,7			# 0x7

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L87:
	li	$3,13			# 0xd
	beq	$4,$3,$L101
	li	$2,6			# 0x6

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L86:
	li	$3,4			# 0x4
	beq	$4,$3,$L101
	li	$2,5			# 0x5

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L85:
	li	$3,5			# 0x5
	beq	$4,$3,$L101
	li	$2,4			# 0x4

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L84:
	li	$3,10			# 0xa
	beq	$4,$3,$L101
	li	$2,3			# 0x3

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L83:
	li	$3,11			# 0xb
	beq	$4,$3,$L101
	li	$2,2			# 0x2

	j	$31
	li	$2,-1			# 0xffffffffffffffff

$L82:
	li	$3,3			# 0x3
	beq	$4,$3,$L101
	move	$2,$0

	li	$3,2			# 0x2
	beq	$4,$3,$L101
	li	$2,1			# 0x1

	j	$31
	li	$2,-1			# 0xffffffffffffffff

	.set	macro
	.set	reorder
	.end	check_sync_pkt
	.size	check_sync_pkt, .-check_sync_pkt
	.align	2
	.globl	add_polys
	.set	nomips16
	.ent	add_polys
	.type	add_polys, @function
add_polys:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$2,$0
	li	$7,32			# 0x20
$L103:
	addu	$3,$5,$2
	lw	$6,0($4)
	lw	$3,0($3)
	addiu	$2,$2,4
	xor	$3,$6,$3
	sw	$3,0($4)
	bne	$2,$7,$L103
	addiu	$4,$4,4

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	add_polys
	.size	add_polys, .-add_polys
	.align	2
	.globl	copy_poly
	.set	nomips16
	.ent	copy_poly
	.type	copy_poly, @function
copy_poly:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$2,$0
	li	$7,32			# 0x20
$L107:
	addu	$3,$5,$2
	lw	$6,0($3)
	addu	$3,$4,$2
	addiu	$2,$2,4
	bne	$2,$7,$L107
	sw	$6,0($3)

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	copy_poly
	.size	copy_poly, .-copy_poly
	.align	2
	.globl	scale_poly
	.set	nomips16
	.ent	scale_poly
	.type	scale_poly, @function
scale_poly:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(glog)
	addiu	$2,$2,%lo(glog)
	sll	$3,$4,2
	lui	$10,%hi(gexp)
	addu	$3,$3,$2
	addiu	$10,$10,%lo(gexp)
	move	$6,$0
	j	$L113
	li	$8,8			# 0x8

$L117:
	sll	$9,$7,2
	beq	$7,$0,$L111
	addu	$9,$9,$2

	lw	$7,0($9)
	lw	$9,0($3)
	addiu	$6,$6,1
	addu	$7,$9,$7
	sll	$7,$7,2
	addu	$7,$7,$10
	lw	$7,0($7)
	sw	$7,0($5)
	beq	$6,$8,$L118
	addiu	$5,$5,4

$L113:
	bne	$4,$0,$L117
	lw	$7,0($5)

$L111:
	move	$7,$0
	addiu	$6,$6,1
	sw	$7,0($5)
	bne	$6,$8,$L113
	addiu	$5,$5,4

$L118:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	scale_poly
	.size	scale_poly, .-scale_poly
	.align	2
	.globl	zero_poly
	.set	nomips16
	.ent	zero_poly
	.type	zero_poly, @function
zero_poly:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	move	$2,$0
	li	$5,32			# 0x20
$L120:
	addu	$3,$4,$2
	addiu	$2,$2,4
	bne	$2,$5,$L120
	sw	$0,0($3)

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	zero_poly
	.size	zero_poly, .-zero_poly
	.align	2
	.globl	Find_Roots
	.set	nomips16
	.ent	Find_Roots
	.type	Find_Roots, @function
Find_Roots:
	.frame	$sp,8,$31		# vars= 0, regs= 2/0, args= 0, gp= 0
	.mask	0x00030000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-8
	sw	$17,4($sp)
	sw	$16,0($sp)
	lui	$7,%hi(gexp)
	addiu	$7,$7,%lo(gexp)
	lui	$14,%hi(Lambda)
	lui	$9,%hi(Lambda+20)
	li	$8,-2139095040			# 0xffffffff80800000
	lui	$10,%hi(glog)
	lui	$24,%hi(ErrorLocs)
	addiu	$14,$14,%lo(Lambda)
	addiu	$9,$9,%lo(Lambda+20)
	ori	$8,$8,0x8081
	addiu	$10,$10,%lo(glog)
	addiu	$24,$24,%lo(ErrorLocs)
	move	$11,$0
	li	$6,1			# 0x1
	move	$12,$7
	li	$15,255			# 0xff
	li	$13,256			# 0x100
	move	$3,$14
$L132:
	move	$2,$0
	move	$4,$0
$L127:
	mult	$2,$8
	sra	$16,$2,31
	lw	$17,0($3)
	mfhi	$5
	addu	$5,$5,$2
	sra	$5,$5,7
	subu	$5,$5,$16
	sll	$16,$5,8
	subu	$5,$16,$5
	subu	$5,$2,$5
	sll	$5,$5,2
	addu	$5,$7,$5
	lw	$5,0($5)
	beq	$5,$0,$L126
	move	$25,$0

	sll	$5,$5,2
	sll	$16,$17,2
	addu	$5,$5,$10
	beq	$17,$0,$L126
	addu	$16,$16,$10

	lw	$25,0($5)
	lw	$5,0($16)
	addu	$5,$25,$5
	sll	$5,$5,2
	addu	$5,$5,$12
	lw	$25,0($5)
$L126:
	addiu	$3,$3,4
	xor	$4,$4,$25
	bne	$3,$9,$L127
	addu	$2,$2,$6

	bne	$4,$0,$L128
	sll	$2,$11,2

	addu	$2,$2,$24
	subu	$3,$15,$6
	sw	$3,0($2)
	addiu	$11,$11,1
$L128:
	addiu	$6,$6,1
	bne	$6,$13,$L132
	move	$3,$14

	lw	$17,4($sp)
	lw	$16,0($sp)
	lui	$2,%hi(NErrors)
	sw	$11,%lo(NErrors)($2)
	j	$31
	addiu	$sp,$sp,8

	.set	macro
	.set	reorder
	.end	Find_Roots
	.size	Find_Roots, .-Find_Roots
	.align	2
	.globl	compute_next_omega
	.set	nomips16
	.ent	compute_next_omega
	.type	compute_next_omega, @function
compute_next_omega:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(glog)
	addiu	$2,$2,%lo(glog)
	sll	$3,$4,2
	lui	$13,%hi(gexp)
	addu	$3,$3,$2
	addiu	$13,$13,%lo(gexp)
	move	$8,$0
	j	$L136
	li	$12,32			# 0x20

$L140:
	sll	$11,$9,2
	beq	$9,$0,$L134
	addu	$11,$11,$2

	lw	$9,0($11)
	lw	$11,0($3)
	addu	$9,$11,$9
	sll	$9,$9,2
	addu	$9,$9,$13
	lw	$11,0($9)
	addu	$9,$6,$8
	addiu	$8,$8,4
	xor	$10,$11,$10
	beq	$8,$12,$L141
	sw	$10,0($9)

$L136:
	addu	$10,$7,$8
	addu	$9,$5,$8
	lw	$9,0($9)
	bne	$4,$0,$L140
	lw	$10,0($10)

$L134:
	move	$11,$0
	addu	$9,$6,$8
	xor	$10,$11,$10
	addiu	$8,$8,4
	bne	$8,$12,$L136
	sw	$10,0($9)

$L141:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	compute_next_omega
	.size	compute_next_omega, .-compute_next_omega
	.align	2
	.globl	mult_polys
	.set	nomips16
	.ent	mult_polys
	.type	mult_polys, @function
mult_polys:
	.frame	$sp,80,$31		# vars= 64, regs= 3/0, args= 0, gp= 0
	.mask	0x00070000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-80
	sw	$18,76($sp)
	sw	$17,72($sp)
	sw	$16,68($sp)
	move	$2,$0
	li	$7,64			# 0x40
$L143:
	addu	$3,$4,$2
	addiu	$2,$2,4
	bne	$2,$7,$L143
	sw	$0,0($3)

	lui	$14,%hi(glog)
	lui	$15,%hi(gexp)
	addiu	$14,$14,%lo(glog)
	addiu	$15,$15,%lo(gexp)
	move	$12,$sp
	move	$11,$0
	addiu	$18,$sp,60
	addiu	$17,$sp,32
	addiu	$10,$sp,64
	li	$13,32			# 0x20
	li	$16,15			# 0xf
	move	$24,$sp
	li	$25,8			# 0x8
$L144:
	move	$2,$17
$L145:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$10,$2,$L145
	nop

	lw	$8,0($5)
	move	$2,$0
	sll	$9,$8,2
	addu	$9,$9,$14
$L148:
	addu	$3,$6,$2
	lw	$3,0($3)
	beq	$3,$0,$L147
	move	$7,$0

	sll	$3,$3,2
	beq	$8,$0,$L147
	addu	$3,$3,$14

	lw	$7,0($9)
	lw	$3,0($3)
	addu	$3,$7,$3
	sll	$3,$3,2
	addu	$3,$3,$15
	lw	$7,0($3)
$L147:
	addu	$3,$sp,$2
	addiu	$2,$2,4
	bne	$2,$13,$L148
	sw	$7,0($3)

	subu	$7,$16,$11
	sll	$7,$7,2
	addu	$7,$sp,$7
	move	$3,$18
	li	$2,15			# 0xf
$L149:
	lw	$9,0($7)
	addiu	$2,$2,-1
	slt	$8,$2,$11
	sw	$9,0($3)
	addiu	$7,$7,-4
	beq	$8,$0,$L149
	addiu	$3,$3,-4

	beq	$11,$0,$L150
	move	$2,$24

$L151:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$12,$2,$L151
	nop

$L150:
	move	$3,$4
	move	$2,$24
$L152:
	lw	$8,0($3)
	lw	$7,0($2)
	addiu	$2,$2,4
	xor	$7,$8,$7
	sw	$7,0($3)
	bne	$10,$2,$L152
	addiu	$3,$3,4

	addiu	$11,$11,1
	addiu	$5,$5,4
	bne	$11,$25,$L144
	addiu	$12,$12,4

	lw	$18,76($sp)
	lw	$17,72($sp)
	lw	$16,68($sp)
	j	$31
	addiu	$sp,$sp,80

	.set	macro
	.set	reorder
	.end	mult_polys
	.size	mult_polys, .-mult_polys
	.align	2
	.globl	Modified_Berlekamp_Massey
	.set	nomips16
	.ent	Modified_Berlekamp_Massey
	.type	Modified_Berlekamp_Massey, @function
Modified_Berlekamp_Massey:
	.frame	$sp,240,$31		# vars= 192, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-240
	sw	$31,236($sp)
	sw	$21,232($sp)
	sw	$20,228($sp)
	sw	$19,224($sp)
	sw	$18,220($sp)
	sw	$17,216($sp)
	sw	$16,212($sp)
	addiu	$7,$sp,112
	addiu	$4,$sp,144
	move	$2,$7
$L162:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$4,$2,$L162
	addiu	$8,$sp,176

	move	$2,$4
$L163:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$2,$8,$L163
	nop

	lui	$2,%hi(NErasures)
	lw	$14,%lo(NErasures)($2)
	li	$2,1			# 0x1
	blez	$14,$L164
	sw	$2,112($sp)

	lui	$11,%hi(ErasureLocs)
	addiu	$11,$11,%lo(ErasureLocs)
	sll	$15,$14,2
	lui	$12,%hi(gexp)
	lui	$10,%hi(glog)
	addu	$15,$11,$15
	addiu	$12,$12,%lo(gexp)
	addiu	$10,$10,%lo(glog)
	addiu	$13,$sp,172
	li	$9,32			# 0x20
	move	$2,$0
$L166:
	addu	$3,$7,$2
	lw	$5,0($3)
	addu	$3,$4,$2
	addiu	$2,$2,4
	bne	$2,$9,$L166
	sw	$5,0($3)

	lw	$3,0($11)
	move	$2,$4
	sll	$3,$3,2
	addu	$3,$12,$3
	lw	$5,0($3)
	sll	$24,$5,2
	j	$L169
	addu	$24,$24,$10

$L214:
	sll	$6,$3,2
	beq	$3,$0,$L167
	addu	$6,$6,$10

	lw	$3,0($6)
	lw	$6,0($24)
	addu	$3,$6,$3
	sll	$3,$3,2
	addu	$3,$12,$3
	lw	$3,0($3)
	sw	$3,0($2)
	addiu	$2,$2,4
	beq	$8,$2,$L213
	nop

$L169:
	bne	$5,$0,$L214
	lw	$3,0($2)

$L167:
	move	$3,$0
	sw	$3,0($2)
	addiu	$2,$2,4
	bne	$8,$2,$L169
	nop

$L213:
	move	$2,$13
$L170:
	lw	$3,-4($2)
	sw	$3,0($2)
	addiu	$2,$2,-4
	bne	$4,$2,$L170
	move	$3,$4

	sw	$0,144($sp)
	move	$2,$7
$L171:
	lw	$6,0($2)
	lw	$5,0($3)
	xor	$5,$6,$5
	sw	$5,0($2)
	addiu	$2,$2,4
	bne	$4,$2,$L171
	addiu	$3,$3,4

	addiu	$11,$11,4
	bne	$11,$15,$L166
	move	$2,$0

$L164:
	move	$2,$0
	addiu	$12,$sp,80
	li	$6,32			# 0x20
$L172:
	addu	$3,$7,$2
	lw	$5,0($3)
	addu	$3,$12,$2
	addiu	$2,$2,4
	bne	$2,$6,$L172
	sw	$5,0($3)

	addiu	$17,$sp,108
	move	$2,$17
$L173:
	lw	$3,-4($2)
	sw	$3,0($2)
	addiu	$2,$2,-4
	bne	$12,$2,$L173
	nop

	sw	$0,80($sp)
	move	$2,$0
	addiu	$15,$sp,16
	li	$6,32			# 0x20
$L174:
	addu	$3,$7,$2
	lw	$5,0($3)
	addu	$3,$15,$2
	addiu	$2,$2,4
	bne	$2,$6,$L174
	sw	$5,0($3)

	slt	$2,$14,4
	beq	$2,$0,$L215
	lui	$6,%hi(synBytes)

	sll	$2,$14,2
	addiu	$16,$6,%lo(synBytes)
	lui	$11,%hi(glog)
	lui	$31,%hi(gexp)
	move	$13,$14
	addu	$16,$16,$2
	addiu	$11,$11,%lo(glog)
	addiu	$31,$31,%lo(gexp)
	li	$19,-1			# 0xffffffffffffffff
	addiu	$25,$sp,48
	li	$24,32			# 0x20
	li	$20,255			# 0xff
	bltz	$13,$L180
	li	$18,4			# 0x4

$L216:
	move	$5,$15
	move	$3,$16
	move	$9,$0
	move	$2,$0
$L179:
	lw	$7,0($5)
	lw	$10,0($3)
	beq	$7,$0,$L178
	move	$8,$0

	sll	$21,$10,2
	sll	$7,$7,2
	addu	$21,$21,$11
	beq	$10,$0,$L178
	addu	$7,$7,$11

	lw	$8,0($21)
	lw	$7,0($7)
	addu	$7,$8,$7
	sll	$7,$7,2
	addu	$7,$7,$31
	lw	$8,0($7)
$L178:
	addiu	$2,$2,1
	slt	$7,$13,$2
	xor	$9,$9,$8
	addiu	$5,$5,4
	beq	$7,$0,$L179
	addiu	$3,$3,-4

	beq	$9,$0,$L180
	move	$2,$0

	sll	$21,$9,2
	addu	$21,$21,$11
$L183:
	addu	$3,$12,$2
	lw	$3,0($3)
	addu	$5,$15,$2
	addu	$7,$25,$2
	sll	$8,$3,2
	addu	$10,$8,$11
	addiu	$2,$2,4
	lw	$8,0($5)
	beq	$3,$0,$L182
	move	$5,$0

	lw	$5,0($21)
	lw	$3,0($10)
	addu	$3,$5,$3
	sll	$3,$3,2
	addu	$3,$3,$31
	lw	$5,0($3)
$L182:
	xor	$5,$5,$8
	bne	$2,$24,$L183
	sw	$5,0($7)

	subu	$7,$14,$19
	slt	$2,$13,$7
	bne	$2,$0,$L184
	move	$2,$0

	move	$7,$13
$L185:
	move	$2,$0
$L189:
	addu	$3,$25,$2
	lw	$5,0($3)
	addu	$3,$15,$2
	addiu	$2,$2,4
	bne	$2,$24,$L189
	sw	$5,0($3)

$L190:
	move	$2,$17
$L191:
	lw	$3,-4($2)
	sw	$3,0($2)
	addiu	$2,$2,-4
	bne	$12,$2,$L191
	nop

	addiu	$14,$14,1
	sw	$0,80($sp)
	beq	$14,$18,$L175
	addiu	$16,$16,4

	move	$13,$7
	bgez	$13,$L216
	nop

$L180:
	j	$L190
	move	$7,$13

$L184:
	sll	$9,$9,2
	addu	$9,$11,$9
	lw	$3,0($9)
	subu	$3,$20,$3
	sll	$3,$3,2
	addu	$3,$31,$3
	lw	$8,0($3)
	sll	$9,$8,2
	addu	$9,$11,$9
$L188:
	addu	$3,$15,$2
	lw	$3,0($3)
	beq	$3,$0,$L187
	move	$5,$0

	sll	$3,$3,2
	beq	$8,$0,$L187
	addu	$3,$11,$3

	lw	$5,0($9)
	lw	$3,0($3)
	addu	$3,$5,$3
	sll	$3,$3,2
	addu	$3,$31,$3
	lw	$5,0($3)
$L187:
	addu	$3,$12,$2
	addiu	$2,$2,4
	bne	$2,$24,$L188
	sw	$5,0($3)

	j	$L185
	subu	$19,$14,$13

$L215:
$L175:
	lui	$8,%hi(Lambda)
	addiu	$8,$8,%lo(Lambda)
	move	$2,$0
	move	$5,$8
	li	$9,32			# 0x20
$L192:
	addu	$3,$15,$2
	lw	$7,0($3)
	addu	$3,$8,$2
	addiu	$2,$2,4
	bne	$2,$9,$L192
	sw	$7,0($3)

	jal	mult_polys
	addiu	$6,$6,%lo(synBytes)

	lui	$5,%hi(Omega)
	addiu	$4,$5,%lo(Omega)
	move	$2,$4
	addiu	$3,$4,32
$L193:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$2,$3,$L193
	nop

	lw	$2,144($sp)
	sw	$2,%lo(Omega)($5)
	lw	$2,148($sp)
	sw	$2,4($4)
	lw	$2,156($sp)
	sw	$2,12($4)
	lw	$2,152($sp)
	sw	$2,8($4)
	lw	$31,236($sp)
	lw	$21,232($sp)
	lw	$20,228($sp)
	lw	$19,224($sp)
	lw	$18,220($sp)
	lw	$17,216($sp)
	lw	$16,212($sp)
	j	$31
	addiu	$sp,$sp,240

	.set	macro
	.set	reorder
	.end	Modified_Berlekamp_Massey
	.size	Modified_Berlekamp_Massey, .-Modified_Berlekamp_Massey
	.align	2
	.globl	init_galois_tables
	.set	nomips16
	.ent	init_galois_tables
	.type	init_galois_tables, @function
init_galois_tables:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(gexp)
	li	$3,1			# 0x1
	addiu	$13,$2,%lo(gexp)
	lui	$4,%hi(glog)
	sw	$3,%lo(gexp)($2)
	sw	$3,1020($13)
	lui	$14,%hi(gexp+1024)
	lui	$3,%hi(gexp+4)
	sw	$0,%lo(glog)($4)
	addiu	$3,$3,%lo(gexp+4)
	addiu	$14,$14,%lo(gexp+1024)
	li	$9,1			# 0x1
	move	$8,$0
	move	$7,$0
	move	$6,$0
	move	$11,$0
	move	$5,$0
	move	$2,$0
	j	$L219
	move	$4,$0

$L227:
	move	$9,$2
	move	$2,$6
	move	$6,$7
	move	$7,$8
	move	$8,$10
$L219:
	sll	$12,$6,1
	addu	$12,$12,$7
	sll	$12,$12,1
	addu	$12,$12,$8
	xor	$10,$2,$4
	sll	$12,$12,1
	addu	$12,$12,$10
	xor	$4,$5,$2
	sll	$12,$12,1
	addu	$12,$12,$4
	xor	$5,$11,$2
	sll	$11,$12,1
	addu	$11,$11,$5
	sll	$11,$11,1
	addu	$11,$11,$9
	sll	$11,$11,1
	addu	$11,$11,$2
	sw	$11,1020($3)
	sw	$11,0($3)
	addiu	$3,$3,4
	bne	$3,$14,$L227
	move	$11,$9

	lui	$7,%hi(glog+4)
	addiu	$7,$7,%lo(glog+4)
	move	$8,$13
	li	$5,1			# 0x1
	li	$6,256			# 0x100
$L220:
	move	$2,$8
	j	$L223
	move	$3,$0

$L221:
	addiu	$3,$3,1
	beq	$3,$6,$L222
	nop

$L223:
	lw	$4,0($2)
	bne	$4,$5,$L221
	addiu	$2,$2,4

	sw	$3,0($7)
$L222:
	addiu	$5,$5,1
	bne	$5,$6,$L220
	addiu	$7,$7,4

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	init_galois_tables
	.size	init_galois_tables, .-init_galois_tables
	.align	2
	.globl	gmult
	.set	nomips16
	.ent	gmult
	.type	gmult, @function
gmult:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	beq	$4,$0,$L229
	nop

	beq	$5,$0,$L229
	nop

	lui	$2,%hi(glog)
	addiu	$2,$2,%lo(glog)
	sll	$5,$5,2
	sll	$4,$4,2
	addu	$4,$4,$2
	addu	$2,$5,$2
	lw	$3,0($2)
	lw	$2,0($4)
	addu	$3,$3,$2
	lui	$2,%hi(gexp)
	sll	$3,$3,2
	addiu	$2,$2,%lo(gexp)
	addu	$2,$3,$2
	j	$31
	lw	$2,0($2)

$L229:
	j	$31
	move	$2,$0

	.set	macro
	.set	reorder
	.end	gmult
	.size	gmult, .-gmult
	.align	2
	.globl	ginv
	.set	nomips16
	.ent	ginv
	.type	ginv, @function
ginv:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(glog)
	addiu	$2,$2,%lo(glog)
	sll	$4,$4,2
	addu	$4,$4,$2
	lw	$2,0($4)
	li	$3,255			# 0xff
	subu	$2,$3,$2
	lui	$3,%hi(gexp)
	addiu	$3,$3,%lo(gexp)
	sll	$2,$2,2
	addu	$2,$2,$3
	j	$31
	lw	$2,0($2)

	.set	macro
	.set	reorder
	.end	ginv
	.size	ginv, .-ginv
	.align	2
	.globl	crchware
	.set	nomips16
	.ent	crchware
	.type	crchware, @function
crchware:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	sll	$4,$4,8
	andi	$5,$5,0xffff
	andi	$2,$6,0xffff
	andi	$4,$4,0xff00
	move	$3,$0
	j	$L238
	li	$8,8			# 0x8

$L236:
	addiu	$3,$3,1
	beq	$3,$8,$L237
	sll	$4,$4,1

$L240:
	andi	$4,$4,0xffff
$L238:
	xor	$6,$2,$4
	sll	$7,$2,1
	seh	$6,$6
	bgez	$6,$L236
	andi	$2,$7,0xffff

	xor	$2,$7,$5
	addiu	$3,$3,1
	andi	$2,$2,0xffff
	bne	$3,$8,$L240
	sll	$4,$4,1

$L237:
	lui	$3,%hi(i.69529)
	j	$31
	sh	$0,%lo(i.69529)($3)

	.set	macro
	.set	reorder
	.end	crchware
	.size	crchware, .-crchware
	.align	2
	.globl	rs_crc_ccitt
	.set	nomips16
	.ent	rs_crc_ccitt
	.type	rs_crc_ccitt, @function
rs_crc_ccitt:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	blez	$5,$L253
	move	$2,$0

	move	$10,$0
	li	$9,8			# 0x8
	addu	$3,$4,$10
$L252:
	lbu	$6,0($3)
	move	$3,$0
	j	$L247
	sll	$6,$6,8

$L245:
	addiu	$3,$3,1
	beq	$3,$9,$L246
	sll	$6,$6,1

$L251:
	andi	$6,$6,0xffff
$L247:
	xor	$7,$2,$6
	sll	$8,$2,1
	seh	$7,$7
	bgez	$7,$L245
	andi	$2,$8,0xffff

	xori	$2,$8,0x1021
	addiu	$3,$3,1
	andi	$2,$2,0xffff
	bne	$3,$9,$L251
	sll	$6,$6,1

$L246:
	addiu	$10,$10,1
	bne	$10,$5,$L252
	addu	$3,$4,$10

	lui	$3,%hi(i.69529)
	sh	$0,%lo(i.69529)($3)
$L253:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	rs_crc_ccitt
	.size	rs_crc_ccitt, .-rs_crc_ccitt
	.align	2
	.globl	zero_fill_from
	.set	nomips16
	.ent	zero_fill_from
	.type	zero_fill_from, @function
zero_fill_from:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	slt	$2,$5,$6
	beq	$2,$0,$L259
	nop

	addu	$4,$4,$5
$L256:
	addiu	$5,$5,1
	slt	$2,$5,$6
	sb	$0,0($4)
	bne	$2,$0,$L256
	addiu	$4,$4,1

$L259:
	j	$31
	nop

	.set	macro
	.set	reorder
	.end	zero_fill_from
	.size	zero_fill_from, .-zero_fill_from
	.align	2
	.globl	build_codeword
	.set	nomips16
	.ent	build_codeword
	.type	build_codeword, @function
build_codeword:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	blez	$5,$L261
	move	$2,$0

$L262:
	addu	$3,$4,$2
	lbu	$7,0($3)
	addu	$3,$6,$2
	addiu	$2,$2,1
	bne	$2,$5,$L262
	sb	$7,0($3)

$L261:
	lui	$2,%hi(pBytes+12)
	lui	$4,%hi(pBytes-4)
	addu	$5,$6,$5
	addiu	$2,$2,%lo(pBytes+12)
	addiu	$4,$4,%lo(pBytes-4)
$L263:
	lw	$3,0($2)
	addiu	$2,$2,-4
	sb	$3,0($5)
	bne	$2,$4,$L263
	addiu	$5,$5,1

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	build_codeword
	.size	build_codeword, .-build_codeword
	.align	2
	.globl	decode_data
	.set	nomips16
	.ent	decode_data
	.type	decode_data, @function
decode_data:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$12,%hi(synBytes)
	lui	$13,%hi(gexp+4)
	lui	$9,%hi(glog)
	lui	$14,%hi(gexp)
	addiu	$12,$12,%lo(synBytes)
	addiu	$13,$13,%lo(gexp+4)
	addiu	$9,$9,%lo(glog)
	addiu	$14,$14,%lo(gexp)
	li	$11,1			# 0x1
	li	$15,5			# 0x5
$L268:
	blez	$5,$L274
	move	$3,$0

	lw	$7,0($13)
	move	$2,$0
	sll	$10,$7,2
	j	$L271
	addu	$10,$10,$9

$L277:
	sll	$8,$3,2
	beq	$3,$0,$L269
	addu	$8,$8,$9

	lw	$8,0($8)
	lw	$3,0($10)
	addiu	$2,$2,1
	addu	$3,$8,$3
	sll	$3,$3,2
	addu	$3,$3,$14
	lw	$3,0($3)
	beq	$2,$5,$L274
	xor	$3,$3,$6

$L271:
	addu	$6,$4,$2
	bne	$7,$0,$L277
	lbu	$6,0($6)

$L269:
	move	$3,$0
	addiu	$2,$2,1
	bne	$2,$5,$L271
	xor	$3,$3,$6

$L274:
	addiu	$11,$11,1
	sw	$3,0($12)
	addiu	$13,$13,4
	bne	$11,$15,$L268
	addiu	$12,$12,4

	j	$31
	nop

	.set	macro
	.set	reorder
	.end	decode_data
	.size	decode_data, .-decode_data
	.align	2
	.globl	check_syndrome
	.set	nomips16
	.ent	check_syndrome
	.type	check_syndrome, @function
check_syndrome:
	.frame	$sp,0,$31		# vars= 0, regs= 0/0, args= 0, gp= 0
	.mask	0x00000000,0
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	lui	$2,%hi(synBytes)
	lw	$3,%lo(synBytes)($2)
	bne	$3,$0,$L279
	nop

	addiu	$2,$2,%lo(synBytes)
	lw	$3,4($2)
	bne	$3,$0,$L279
	nop

	lw	$3,8($2)
	bne	$3,$0,$L279
	nop

	lw	$2,12($2)
	j	$31
	sltu	$2,$0,$2

$L279:
	j	$31
	li	$2,1			# 0x1

	.set	macro
	.set	reorder
	.end	check_syndrome
	.size	check_syndrome, .-check_syndrome
	.align	2
	.globl	encode_data
	.set	nomips16
	.ent	encode_data
	.type	encode_data, @function
encode_data:
	.frame	$sp,32,$31		# vars= 24, regs= 2/0, args= 0, gp= 0
	.mask	0x00030000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$17,28($sp)
	sw	$16,24($sp)
	sw	$0,0($sp)
	sw	$0,4($sp)
	sw	$0,8($sp)
	sw	$0,12($sp)
	blez	$5,$L283
	sw	$0,16($sp)

	lui	$12,%hi(genPoly)
	lw	$15,%lo(genPoly)($12)
	lui	$13,%hi(glog)
	addiu	$13,$13,%lo(glog)
	sll	$17,$15,2
	lui	$25,%hi(genPoly+12)
	lui	$16,%hi(gexp)
	addiu	$25,$25,%lo(genPoly+12)
	addiu	$12,$12,%lo(genPoly)
	addiu	$16,$16,%lo(gexp)
	addu	$17,$17,$13
	move	$11,$0
	addiu	$24,$sp,8
$L289:
	addu	$2,$4,$11
	lbu	$10,0($2)
	lw	$7,12($sp)
	move	$3,$24
	move	$2,$25
	xor	$10,$10,$7
	sll	$7,$10,2
	addu	$14,$7,$13
$L286:
	lw	$7,0($2)
	lw	$9,0($3)
	beq	$7,$0,$L285
	move	$8,$0

	sll	$7,$7,2
	beq	$10,$0,$L285
	addu	$7,$7,$13

	lw	$8,0($14)
	lw	$7,0($7)
	addu	$7,$8,$7
	sll	$7,$7,2
	addu	$7,$7,$16
	lw	$8,0($7)
$L285:
	xor	$8,$8,$9
	addiu	$2,$2,-4
	sw	$8,4($3)
	bne	$2,$12,$L286
	addiu	$3,$3,-4

	beq	$15,$0,$L288
	move	$2,$0

	beq	$10,$0,$L288
	sll	$10,$10,2

	addu	$10,$10,$13
	lw	$3,0($10)
	lw	$2,0($17)
	addu	$2,$3,$2
	sll	$2,$2,2
	addu	$2,$2,$16
	lw	$2,0($2)
$L288:
	addiu	$11,$11,1
	bne	$11,$5,$L289
	sw	$2,0($sp)

	lui	$3,%hi(pBytes)
	sw	$2,%lo(pBytes)($3)
	lw	$2,4($sp)
	addiu	$8,$3,%lo(pBytes)
	sw	$2,4($8)
	lw	$2,8($sp)
	sw	$2,8($8)
	lw	$2,12($sp)
	sw	$2,12($8)
	move	$2,$0
$L290:
	addu	$3,$4,$2
	lbu	$7,0($3)
	addu	$3,$6,$2
	addiu	$2,$2,1
	bne	$2,$5,$L290
	sb	$7,0($3)

	lw	$3,12($8)
$L293:
	lui	$2,%hi(pBytes+8)
	lui	$4,%hi(pBytes-4)
	addu	$5,$6,$5
	addiu	$2,$2,%lo(pBytes+8)
	addiu	$4,$4,%lo(pBytes-4)
	sb	$3,0($5)
	beq	$2,$4,$L294
	addiu	$5,$5,1

$L298:
	lw	$3,0($2)
	addiu	$2,$2,-4
	sb	$3,0($5)
	bne	$2,$4,$L298
	addiu	$5,$5,1

$L294:
	lw	$17,28($sp)
	lw	$16,24($sp)
	j	$31
	addiu	$sp,$sp,32

$L283:
	lui	$3,%hi(pBytes)
	addiu	$2,$3,%lo(pBytes)
	sw	$0,%lo(pBytes)($3)
	sw	$0,12($2)
	sw	$0,4($2)
	sw	$0,8($2)
	j	$L293
	move	$3,$0

	.set	macro
	.set	reorder
	.end	encode_data
	.size	encode_data, .-encode_data
	.section	.rodata.str1.4,"aMS",@progbits,1
	.align	2
$LC0:
	.ascii	" inv log S[%d]/S[%d] = %d\012\000"
	.text
	.align	2
	.globl	debug_check_syndrome
	.set	nomips16
	.ent	debug_check_syndrome
	.type	debug_check_syndrome, @function
debug_check_syndrome:
	.frame	$sp,56,$31		# vars= 0, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-56
	sw	$31,52($sp)
	sw	$fp,48($sp)
	sw	$23,44($sp)
	sw	$22,40($sp)
	sw	$21,36($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	lui	$16,%hi(synBytes)
	addiu	$16,$16,%lo(synBytes)
	lw	$3,4($16)
	lui	$18,%hi(glog)
	addiu	$18,$18,%lo(glog)
	sll	$3,$3,2
	addu	$3,$18,$3
	lw	$4,0($3)
	li	$21,255			# 0xff
	lui	$19,%hi(gexp)
	subu	$4,$21,$4
	lw	$2,0($16)
	addiu	$19,$19,%lo(gexp)
	sll	$4,$4,2
	lui	$23,%hi($LC0)
	move	$5,$0
	addu	$4,$19,$4
	addiu	$23,$23,%lo($LC0)
	move	$22,$18
	move	$fp,$19
	li	$20,3			# 0x3
	addiu	$17,$5,1
	move	$3,$0
	beq	$2,$0,$L301
	lw	$4,0($4)

$L306:
	sll	$2,$2,2
	sll	$6,$4,2
	addu	$6,$6,$22
	beq	$4,$0,$L301
	addu	$2,$2,$22

	lw	$3,0($6)
	lw	$2,0($2)
	addu	$2,$3,$2
	sll	$2,$2,2
	addu	$2,$2,$fp
	lw	$3,0($2)
$L301:
	sll	$3,$3,2
	addu	$3,$18,$3
	lw	$7,0($3)
	move	$4,$23
	jal	printk
	move	$6,$17

	beq	$17,$20,$L304
	addiu	$16,$16,4

$L307:
	lw	$3,4($16)
	lw	$2,0($16)
	move	$5,$17
	sll	$3,$3,2
	addu	$3,$18,$3
	lw	$4,0($3)
	addiu	$17,$5,1
	move	$3,$0
	subu	$4,$21,$4
	sll	$4,$4,2
	addu	$4,$19,$4
	bne	$2,$0,$L306
	lw	$4,0($4)

	sll	$3,$3,2
	addu	$3,$18,$3
	lw	$7,0($3)
	move	$4,$23
	jal	printk
	move	$6,$17

	bne	$17,$20,$L307
	addiu	$16,$16,4

$L304:
	lw	$31,52($sp)
	lw	$fp,48($sp)
	lw	$23,44($sp)
	lw	$22,40($sp)
	lw	$21,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	j	$31
	addiu	$sp,$sp,56

	.set	macro
	.set	reorder
	.end	debug_check_syndrome
	.size	debug_check_syndrome, .-debug_check_syndrome
	.section	.rodata.str1.4
	.align	2
$LC1:
	.ascii	"Syndrome Bytes: \000"
	.align	2
$LC2:
	.ascii	"[%d]:%x, \000"
	.align	2
$LC3:
	.ascii	"\012\000"
	.text
	.align	2
	.globl	print_syndrome
	.set	nomips16
	.ent	print_syndrome
	.type	print_syndrome, @function
print_syndrome:
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$4,%hi($LC1)
	addiu	$4,$4,%lo($LC1)
	jal	printk
	lui	$17,%hi(synBytes)

	lw	$6,%lo(synBytes)($17)
	lui	$16,%hi($LC2)
	addiu	$17,$17,%lo(synBytes)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	move	$5,$0

	lw	$6,4($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,1			# 0x1

	lw	$6,8($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,2			# 0x2

	lw	$6,12($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,3			# 0x3

	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	lui	$4,%hi($LC3)
	addiu	$4,$4,%lo($LC3)
	j	printk
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	print_syndrome
	.size	print_syndrome, .-print_syndrome
	.section	.rodata.str1.4
	.align	2
$LC4:
	.ascii	"Parity Bytes: \000"
	.text
	.align	2
	.globl	print_parity
	.set	nomips16
	.ent	print_parity
	.type	print_parity, @function
print_parity:
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$4,%hi($LC4)
	addiu	$4,$4,%lo($LC4)
	jal	printk
	lui	$17,%hi(pBytes)

	lw	$6,%lo(pBytes)($17)
	lui	$16,%hi($LC2)
	addiu	$17,$17,%lo(pBytes)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	move	$5,$0

	lw	$6,4($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,1			# 0x1

	lw	$6,8($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,2			# 0x2

	lw	$6,12($17)
	addiu	$4,$16,%lo($LC2)
	jal	printk
	li	$5,3			# 0x3

	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	lui	$4,%hi($LC3)
	addiu	$4,$4,%lo($LC3)
	j	printk
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	print_parity
	.size	print_parity, .-print_parity
	.section	.rodata.str1.4
	.align	2
$LC5:
	.ascii	"Uncorrectable codeword\012\000"
	.text
	.align	2
	.globl	correct_errors_erasures
	.set	nomips16
	.ent	correct_errors_erasures
	.type	correct_errors_erasures, @function
correct_errors_erasures:
	.frame	$sp,64,$31		# vars= 8, regs= 9/0, args= 16, gp= 0
	.mask	0x80ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-64
	sw	$31,60($sp)
	sw	$23,56($sp)
	sw	$22,52($sp)
	sw	$21,48($sp)
	sw	$20,44($sp)
	sw	$19,40($sp)
	sw	$18,36($sp)
	sw	$17,32($sp)
	sw	$16,28($sp)
	lui	$2,%hi(NErasures)
	blez	$6,$L313
	sw	$6,%lo(NErasures)($2)

	lui	$9,%hi(ErasureLocs)
	sll	$6,$6,2
	addiu	$9,$9,%lo(ErasureLocs)
	move	$2,$0
$L314:
	addu	$3,$7,$2
	lw	$8,0($3)
	addu	$3,$9,$2
	addiu	$2,$2,4
	bne	$2,$6,$L314
	sw	$8,0($3)

$L313:
	sw	$4,16($sp)
	jal	Modified_Berlekamp_Massey
	sw	$5,20($sp)

	jal	Find_Roots
	nop

	lui	$2,%hi(NErrors)
	lw	$8,%lo(NErrors)($2)
	lw	$4,16($sp)
	addiu	$2,$8,-1
	sltu	$2,$2,4
	beq	$2,$0,$L315
	lw	$5,20($sp)

	lui	$10,%hi(ErrorLocs)
	addiu	$10,$10,%lo(ErrorLocs)
	move	$14,$10
	move	$3,$10
	j	$L317
	move	$2,$0

$L336:
	beq	$7,$0,$L335
	addiu	$3,$3,4

$L317:
	lw	$6,0($3)
	addiu	$2,$2,1
	slt	$6,$6,$5
	bne	$6,$0,$L336
	slt	$7,$2,$8

$L316:
	move	$2,$0
$L328:
	lw	$31,60($sp)
	lw	$23,56($sp)
	lw	$22,52($sp)
	lw	$21,48($sp)
	lw	$20,44($sp)
	lw	$19,40($sp)
	lw	$18,36($sp)
	lw	$17,32($sp)
	lw	$16,28($sp)
	j	$31
	addiu	$sp,$sp,64

$L315:
	beq	$8,$0,$L316
	nop

	lui	$4,%hi($LC5)
	jal	printk
	addiu	$4,$4,%lo($LC5)

	j	$L328
	move	$2,$0

$L335:
	blez	$8,$L318
	sll	$19,$8,2

	lui	$9,%hi(gexp)
	lui	$8,%hi(glog)
	addiu	$9,$9,%lo(gexp)
	addiu	$8,$8,%lo(glog)
	addu	$19,$10,$19
	lui	$18,%hi(Omega)
	lui	$12,%hi(Omega+32)
	li	$10,-2139095040			# 0xffffffff80800000
	lui	$17,%hi(Lambda+4)
	lui	$15,%hi(Lambda+36)
	addiu	$18,$18,%lo(Omega)
	addiu	$12,$12,%lo(Omega+32)
	ori	$10,$10,0x8081
	addiu	$17,$17,%lo(Lambda+4)
	addiu	$15,$15,%lo(Lambda+36)
	li	$16,255			# 0xff
	move	$24,$9
	move	$20,$8
$L327:
	lw	$25,0($14)
	move	$3,$18
	move	$2,$0
	subu	$11,$16,$25
	move	$6,$0
$L321:
	mult	$2,$10
	sra	$22,$2,31
	lw	$13,0($3)
	move	$21,$0
	mfhi	$7
	addu	$7,$7,$2
	sra	$7,$7,7
	subu	$7,$7,$22
	sll	$22,$7,8
	subu	$7,$22,$7
	subu	$7,$2,$7
	sll	$7,$7,2
	addu	$7,$9,$7
	beq	$13,$0,$L320
	lw	$7,0($7)

	sll	$13,$13,2
	sll	$22,$7,2
	addu	$22,$8,$22
	beq	$7,$0,$L320
	addu	$13,$8,$13

	lw	$21,0($22)
	lw	$7,0($13)
	addu	$7,$21,$7
	sll	$7,$7,2
	addu	$7,$7,$24
	lw	$21,0($7)
$L320:
	addiu	$3,$3,4
	xor	$6,$6,$21
	bne	$3,$12,$L321
	addu	$2,$2,$11

	sll	$11,$11,1
	move	$3,$17
	move	$2,$0
	move	$7,$0
$L324:
	mult	$2,$10
	sra	$23,$2,31
	lw	$21,0($3)
	move	$22,$0
	mfhi	$13
	addu	$13,$13,$2
	sra	$13,$13,7
	subu	$13,$13,$23
	sll	$23,$13,8
	subu	$13,$23,$13
	subu	$13,$2,$13
	sll	$13,$13,2
	addu	$13,$9,$13
	beq	$21,$0,$L323
	lw	$13,0($13)

	sll	$21,$21,2
	sll	$23,$13,2
	addu	$23,$8,$23
	beq	$13,$0,$L323
	addu	$21,$8,$21

	lw	$22,0($23)
	lw	$13,0($21)
	addu	$13,$22,$13
	sll	$13,$13,2
	addu	$13,$13,$24
	lw	$22,0($13)
$L323:
	addiu	$3,$3,8
	xor	$7,$7,$22
	bne	$3,$15,$L324
	addu	$2,$2,$11

	sll	$7,$7,2
	addu	$7,$8,$7
	lw	$2,0($7)
	subu	$2,$16,$2
	sll	$2,$2,2
	addu	$2,$9,$2
	beq	$6,$0,$L325
	lw	$2,0($2)

	beq	$2,$0,$L326
	move	$3,$0

	sll	$2,$2,2
	sll	$6,$6,2
	addu	$2,$2,$20
	addu	$6,$6,$20
	lw	$3,0($2)
	lw	$2,0($6)
	addu	$2,$3,$2
	sll	$2,$2,2
	addu	$2,$2,$24
	lb	$3,0($2)
$L326:
	subu	$25,$5,$25
	addiu	$25,$25,-1
	addu	$25,$4,$25
	lbu	$2,0($25)
	addiu	$14,$14,4
	xor	$2,$3,$2
	bne	$14,$19,$L327
	sb	$2,0($25)

$L318:
	lw	$31,60($sp)
	lw	$23,56($sp)
	lw	$22,52($sp)
	lw	$21,48($sp)
	lw	$20,44($sp)
	lw	$19,40($sp)
	lw	$18,36($sp)
	lw	$17,32($sp)
	lw	$16,28($sp)
	li	$2,1			# 0x1
	j	$31
	addiu	$sp,$sp,64

$L325:
	j	$L326
	move	$3,$0

	.set	macro
	.set	reorder
	.end	correct_errors_erasures
	.size	correct_errors_erasures, .-correct_errors_erasures
	.section	.rodata.str1.4
	.align	2
$LC6:
	.ascii	"this packet is not profile packet\012\000"
	.text
	.align	2
	.globl	rtk_sc_valid_profile_packet
	.set	nomips16
	.ent	rtk_sc_valid_profile_packet
	.type	rtk_sc_valid_profile_packet, @function
rtk_sc_valid_profile_packet:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	lw	$2,24($4)
	lw	$6,12($4)
	move	$3,$0
	lbu	$5,3($2)
	lui	$2,%hi(g_sc_magic)
	addiu	$2,$2,%lo(g_sc_magic)
	li	$7,8			# 0x8
$L340:
	lw	$4,0($2)
	addiu	$3,$3,1
	addu	$4,$5,$4
	beq	$4,$6,$L344
	addiu	$2,$2,4

	bne	$3,$7,$L340
	nop

	lui	$2,%hi(g_sc_debug)
	lw	$4,%lo(g_sc_debug)($2)
	li	$3,2			# 0x2
	beq	$4,$3,$L345
	move	$2,$0

$L339:
	lw	$31,20($sp)
	j	$31
	addiu	$sp,$sp,24

$L344:
	lw	$31,20($sp)
	li	$2,1			# 0x1
	j	$31
	addiu	$sp,$sp,24

$L345:
	lui	$4,%hi($LC6)
	jal	printk
	addiu	$4,$4,%lo($LC6)

	j	$L339
	move	$2,$0

	.set	macro
	.set	reorder
	.end	rtk_sc_valid_profile_packet
	.size	rtk_sc_valid_profile_packet, .-rtk_sc_valid_profile_packet
	.section	.rodata.str1.4
	.align	2
$LC7:
	.ascii	"    \000"
	.align	2
$LC8:
	.ascii	"%02x\000"
	.text
	.align	2
	.globl	bytedump
	.set	nomips16
	.ent	bytedump
	.type	bytedump, @function
bytedump:
	.frame	$sp,48,$31		# vars= 0, regs= 8/0, args= 16, gp= 0
	.mask	0x807f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-48
	sw	$31,44($sp)
	sw	$22,40($sp)
	sw	$21,36($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	move	$16,$5
	bne	$5,$0,$L352
	move	$17,$4

$L347:
	lui	$4,%hi($LC3)
	jal	printk
	addiu	$4,$4,%lo($LC3)

	lw	$31,44($sp)
	lw	$22,40($sp)
	lw	$21,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,48

$L352:
	li	$21,715784192			# 0x2aaa0000
	lui	$20,%hi($LC7)
	lui	$19,%hi($LC8)
	ori	$21,$21,0xaaab
	addiu	$20,$20,%lo($LC7)
	addiu	$19,$19,%lo($LC8)
	move	$22,$0
	move	$18,$0
	mult	$18,$21
$L354:
	sra	$3,$18,31
	mfhi	$2
	subu	$2,$2,$3
	sll	$3,$2,3
	sll	$2,$2,1
	subu	$2,$3,$2
	bne	$18,$2,$L348
	nop

	bne	$18,$0,$L353
	nop

$L348:
	addu	$22,$17,$22
$L355:
	lbu	$5,0($22)
	addiu	$18,$18,1
	jal	printk
	move	$4,$19

	sltu	$2,$18,$16
	beq	$2,$0,$L347
	move	$22,$18

	j	$L354
	mult	$18,$21

$L353:
	jal	printk
	move	$4,$20

	j	$L355
	addu	$22,$17,$22

	.set	macro
	.set	reorder
	.end	bytedump
	.size	bytedump, .-bytedump
	.section	.rodata.str1.4
	.align	2
$LC9:
	.ascii	" get cipher, the cipher info is: \000"
	.text
	.align	2
	.globl	bcast_udp_get_cipher_info
	.set	nomips16
	.ent	bcast_udp_get_cipher_info
	.type	bcast_udp_get_cipher_info, @function
bcast_udp_get_cipher_info:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	move	$16,$5
	lw	$5,1852($5)
	beq	$5,$0,$L357
	move	$2,$0

$L358:
	addu	$4,$16,$2
	addiu	$2,$2,1
	sltu	$3,$2,$5
	bne	$3,$0,$L358
	sb	$0,2152($4)

	lw	$3,10900($16)
	lw	$5,1852($16)
	move	$4,$16
	move	$7,$0
	move	$10,$0
	move	$2,$0
	li	$8,2			# 0x2
	li	$9,1			# 0x1
	li	$11,3			# 0x3
	li	$12,4			# 0x4
	li	$13,5			# 0x5
	li	$14,6			# 0x6
	li	$15,7			# 0x7
$L369:
	beq	$3,$8,$L377
	nop

	beq	$3,$9,$L378
	srl	$6,$2,31

$L361:
	addiu	$2,$2,1
	sltu	$6,$2,$5
	addiu	$4,$4,1
	bne	$6,$0,$L369
	move	$7,$2

$L373:
	li	$2,2			# 0x2
	beq	$3,$2,$L379
	li	$2,1			# 0x1

	beq	$3,$2,$L380
	nop

$L371:
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,-1			# 0xffffffffffffffff
	beq	$3,$2,$L381
	nop

	lw	$31,20($sp)
$L389:
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

$L377:
	andi	$7,$7,0x7
	bne	$7,$0,$L360
	nop

	addu	$3,$16,$10
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	sll	$6,$6,5
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L378:
	addu	$7,$2,$6
	andi	$7,$7,0x1
	subu	$6,$7,$6
	beq	$6,$3,$L382
	nop

	srl	$3,$2,31
	addu	$3,$3,$2
	sra	$3,$3,1
	addu	$3,$16,$3
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	sll	$6,$6,4
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L360:
	sra	$7,$2,31
	srl	$7,$7,29
	addu	$6,$2,$7
	andi	$6,$6,0x7
	subu	$6,$6,$7
	beq	$6,$9,$L383
	nop

	beq	$6,$3,$L384
	nop

	beq	$6,$11,$L385
	nop

	beq	$6,$12,$L386
	nop

	beq	$6,$13,$L387
	nop

	beq	$6,$14,$L388
	nop

	bne	$6,$15,$L361
	nop

	addu	$3,$16,$10
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	addiu	$10,$10,1
	andi	$6,$6,0x7
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L382:
	srl	$3,$2,31
	addu	$3,$3,$2
	sra	$3,$3,1
	addu	$3,$16,$3
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	andi	$6,$6,0xf
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L383:
	lbu	$6,2874($4)
	addu	$3,$16,$10
	lbu	$7,2152($3)
	andi	$6,$6,0x7
	sll	$6,$6,2
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L384:
	addu	$3,$16,$10
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	addiu	$10,$10,1
	ext	$6,$6,1,2
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L385:
	lbu	$24,2874($4)
	lbu	$6,2873($4)
	addu	$3,$16,$10
	lbu	$7,2152($3)
	andi	$24,$24,0x7
	sll	$24,$24,4
	sll	$6,$6,7
	or	$6,$24,$6
	or	$6,$6,$7
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L386:
	lbu	$6,2874($4)
	addu	$3,$16,$10
	lbu	$7,2152($3)
	andi	$6,$6,0x7
	sll	$6,$6,1
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L387:
	addu	$3,$16,$10
	lbu	$6,2874($4)
	lbu	$7,2152($3)
	addiu	$10,$10,1
	ext	$6,$6,2,1
	or	$6,$7,$6
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L388:
	lbu	$24,2874($4)
	lbu	$6,2873($4)
	addu	$3,$16,$10
	lbu	$7,2152($3)
	andi	$24,$24,0x7
	sll	$24,$24,3
	sll	$6,$6,6
	or	$6,$24,$6
	or	$6,$6,$7
	sb	$6,2152($3)
	j	$L361
	lw	$3,10900($16)

$L379:
	j	$L371
	sw	$10,2408($16)

$L380:
	srl	$5,$5,1
	j	$L371
	sw	$5,2408($16)

$L357:
	lw	$3,10900($16)
	j	$L373
	move	$10,$0

$L381:
	lui	$4,%hi($LC9)
	jal	printk
	addiu	$4,$4,%lo($LC9)

	lw	$5,2408($16)
	jal	bytedump
	addiu	$4,$16,2152

	j	$L389
	lw	$31,20($sp)

	.set	macro
	.set	reorder
	.end	bcast_udp_get_cipher_info
	.size	bcast_udp_get_cipher_info, .-bcast_udp_get_cipher_info
	.align	2
	.globl	get_sc_syn_stats
	.set	nomips16
	.ent	get_sc_syn_stats
	.type	get_sc_syn_stats, @function
get_sc_syn_stats:
	.frame	$sp,40,$31		# vars= 0, regs= 6/0, args= 16, gp= 0
	.mask	0x801f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-40
	sw	$31,36($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	lui	$17,%hi(g_option_sa+24)
	lui	$19,%hi(g_option_sa)
	lui	$18,%hi(null_mac)
	addiu	$17,$17,%lo(g_option_sa+24)
	addiu	$19,$19,%lo(g_option_sa)
	addiu	$18,$18,%lo(null_mac)
	move	$16,$0
	li	$20,5			# 0x5
$L393:
	sll	$2,$16,2
	sll	$4,$16,5
	subu	$4,$4,$2
	addu	$4,$19,$4
	move	$5,$18
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L391
	addiu	$16,$16,1

	lbu	$2,1($17)
	sltu	$2,$2,2
	beq	$2,$0,$L397
	lw	$31,36($sp)

	lbu	$2,0($17)
	sltu	$2,$2,2
	beq	$2,$0,$L392
	nop

$L391:
	bne	$16,$20,$L393
	addiu	$17,$17,28

	lw	$31,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,40

$L392:
$L397:
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	li	$2,1			# 0x1
	j	$31
	addiu	$sp,$sp,40

	.set	macro
	.set	reorder
	.end	get_sc_syn_stats
	.size	get_sc_syn_stats, .-get_sc_syn_stats
	.align	2
	.globl	clean_sc_syn
	.set	nomips16
	.ent	clean_sc_syn
	.type	clean_sc_syn, @function
clean_sc_syn:
	.frame	$sp,40,$31		# vars= 0, regs= 6/0, args= 16, gp= 0
	.mask	0x801f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-40
	sw	$31,36($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	lui	$19,%hi(g_option_sa)
	lui	$18,%hi(null_mac)
	addiu	$19,$19,%lo(g_option_sa)
	addiu	$18,$18,%lo(null_mac)
	move	$16,$0
	li	$20,5			# 0x5
	sll	$2,$16,2
$L405:
	sll	$17,$16,5
	subu	$17,$17,$2
	addu	$17,$19,$17
	move	$4,$17
	move	$5,$18
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L404
	addiu	$16,$16,1

	bne	$16,$20,$L405
	sll	$2,$16,2

	lw	$31,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,40

$L404:
	sb	$0,24($17)
	sb	$0,25($17)
	lw	$31,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,40

	.set	macro
	.set	reorder
	.end	clean_sc_syn
	.size	clean_sc_syn, .-clean_sc_syn
	.align	2
	.globl	get_sc_smac
	.set	nomips16
	.ent	get_sc_smac
	.type	get_sc_smac, @function
get_sc_smac:
	.frame	$sp,48,$31		# vars= 0, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-48
	sw	$31,44($sp)
	sw	$21,40($sp)
	sw	$20,36($sp)
	sw	$19,32($sp)
	sw	$18,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$18,%hi(g_sc_ctx+12)
	lui	$17,%hi(null_mac)
	lui	$20,%hi(g_option_sa)
	move	$21,$4
	addiu	$18,$18,%lo(g_sc_ctx+12)
	addiu	$17,$17,%lo(null_mac)
	addiu	$20,$20,%lo(g_option_sa)
	move	$16,$0
	li	$19,5			# 0x5
	move	$4,$18
$L413:
	move	$5,$17
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L412
	sll	$2,$16,2

	addiu	$16,$16,1
$L414:
	bne	$16,$19,$L413
	move	$4,$18

	move	$2,$0
$L408:
	lw	$31,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	j	$31
	addiu	$sp,$sp,48

$L412:
	sll	$4,$16,5
	lw	$5,28($21)
	subu	$4,$4,$2
	addu	$4,$20,$4
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L414
	addiu	$16,$16,1

	j	$L408
	li	$2,1			# 0x1

	.set	macro
	.set	reorder
	.end	get_sc_smac
	.size	get_sc_smac, .-get_sc_smac
	.section	.rodata.str1.4
	.align	2
$LC10:
	.ascii	"Register Realtek Simple Config\012\000"
	.text
	.align	2
	.globl	rtk_sc_init
	.set	nomips16
	.ent	rtk_sc_init
	.type	rtk_sc_init, @function
rtk_sc_init:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$16,%hi(g_sc_ctx)
	addiu	$4,$16,%lo(g_sc_ctx)
	move	$5,$0
	addiu	$16,$16,%lo(g_sc_ctx)
	jal	memset
	li	$6,10904			# 0x2a98

	lw	$2,2672($16)
	li	$3,256			# 0x100
	sw	$3,2112($16)
	addiu	$3,$2,604
	sll	$3,$3,2
	addu	$3,$16,$3
	lw	$4,0($3)
	beq	$4,$0,$L420
	nop

$L416:
	addiu	$3,$2,605
	sll	$3,$3,2
	addiu	$2,$2,1
	sw	$2,2672($16)
	addu	$3,$16,$3
	lw	$4,0($3)
	beq	$4,$0,$L421
	lui	$4,%hi(udp_mcast_pin)

$L417:
	addiu	$3,$2,605
	sll	$3,$3,2
	addiu	$2,$2,1
	sw	$2,2672($16)
	addu	$3,$16,$3
	lw	$4,0($3)
	beq	$4,$0,$L422
	lui	$4,%hi($LC10)

	addiu	$2,$2,1
	addiu	$4,$4,%lo($LC10)
	jal	printk
	sw	$2,2672($16)

	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

$L422:
	lui	$4,%hi(udp_bcast_pin)
	addiu	$4,$4,%lo(udp_bcast_pin)
	sw	$4,0($3)
	addiu	$2,$2,1
	lui	$4,%hi($LC10)
	addiu	$4,$4,%lo($LC10)
	jal	printk
	sw	$2,2672($16)

	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

$L421:
	addiu	$4,$4,%lo(udp_mcast_pin)
	j	$L417
	sw	$4,0($3)

$L420:
	lui	$2,%hi(udp_mcast)
	addiu	$2,$2,%lo(udp_mcast)
	sw	$2,0($3)
	j	$L416
	lw	$2,2672($16)

	.set	macro
	.set	reorder
	.end	rtk_sc_init
	.size	rtk_sc_init, .-rtk_sc_init
	.section	.rodata.str1.4
	.align	2
$LC11:
	.ascii	"The simple config don't support this type in prifole now"
	.ascii	"\012\000"
	.align	2
$LC12:
	.ascii	"the profile MUST include IP\012\000"
	.text
	.align	2
	.globl	parse_tlv_info
	.set	nomips16
	.ent	parse_tlv_info
	.type	parse_tlv_info, @function
parse_tlv_info:
	.frame	$sp,88,$31		# vars= 32, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-88
	sw	$31,84($sp)
	sw	$fp,80($sp)
	sw	$23,76($sp)
	sw	$22,72($sp)
	sw	$21,68($sp)
	sw	$20,64($sp)
	sw	$19,60($sp)
	sw	$18,56($sp)
	sw	$17,52($sp)
	sw	$16,48($sp)
	li	$2,1			# 0x1
	andi	$7,$7,0x00ff
	move	$16,$4
	move	$21,$5
	beq	$7,$2,$L462
	andi	$17,$6,0x00ff

	bne	$7,$0,$L438
	addiu	$2,$4,30

	sw	$2,16($sp)
	addiu	$2,$4,94
	sw	$2,20($sp)
	addiu	$19,$4,256
	move	$20,$0
	li	$22,1			# 0x1
	li	$23,2			# 0x2
	li	$fp,3			# 0x3
$L460:
	slt	$2,$20,$17
	beq	$2,$0,$L438
	nop

$L452:
	lbu	$2,0($21)
	beq	$2,$22,$L463
	lw	$4,16($sp)

	beq	$2,$23,$L464
	lw	$4,20($sp)

	bne	$2,$fp,$L448
	nop

	lbu	$6,1($21)
	beq	$6,$0,$L449
	addiu	$21,$21,2

	move	$3,$0
	move	$2,$0
$L450:
	addu	$4,$21,$3
	lbu	$5,0($4)
	addiu	$2,$2,1
	addu	$3,$19,$3
	sltu	$4,$2,$6
	sb	$5,0($3)
	bne	$4,$0,$L450
	move	$3,$2

$L449:
	addiu	$20,$20,2
	addu	$20,$20,$6
	slt	$2,$20,$17
	bne	$2,$0,$L452
	addu	$21,$21,$6

$L438:
	lw	$5,256($16)
	beq	$5,$0,$L465
	lui	$4,%hi($LC12)

	jal	rtk_sc_set_value
	li	$4,12			# 0xc

	move	$2,$0
$L451:
	lw	$31,84($sp)
	lw	$fp,80($sp)
	lw	$23,76($sp)
	lw	$22,72($sp)
	lw	$21,68($sp)
	lw	$20,64($sp)
	lw	$19,60($sp)
	lw	$18,56($sp)
	lw	$17,52($sp)
	lw	$16,48($sp)
	j	$31
	addiu	$sp,$sp,88

$L463:
	lbu	$18,1($21)
	move	$5,$0
	li	$6,64			# 0x40
	jal	memset
	addiu	$21,$21,2

	beq	$18,$0,$L446
	move	$2,$0

	move	$3,$0
$L444:
	addu	$4,$21,$3
	lbu	$5,0($4)
	addiu	$2,$2,1
	addu	$3,$16,$3
	sltu	$4,$2,$18
	sb	$5,30($3)
	bne	$4,$0,$L444
	move	$3,$2

$L446:
	addiu	$20,$20,2
	addu	$20,$20,$18
	j	$L460
	addu	$21,$21,$18

$L464:
	lbu	$18,1($21)
	move	$5,$0
	li	$6,64			# 0x40
	jal	memset
	addiu	$21,$21,2

	beq	$18,$0,$L446
	move	$2,$0

	move	$3,$0
$L447:
	addu	$4,$21,$3
	lbu	$5,0($4)
	addiu	$2,$2,1
	addu	$3,$16,$3
	sltu	$4,$2,$18
	sb	$5,94($3)
	bne	$4,$0,$L447
	move	$3,$2

	addiu	$20,$20,2
	addu	$20,$20,$18
	j	$L460
	addu	$21,$21,$18

$L462:
	addiu	$11,$4,30
	addiu	$10,$4,94
	addiu	$19,$4,256
	move	$8,$5
	move	$20,$0
	move	$9,$0
	move	$12,$0
	move	$18,$0
	li	$23,1			# 0x1
	li	$22,2			# 0x2
	li	$fp,3			# 0x3
	li	$3,4			# 0x4
	slt	$2,$18,$17
$L469:
	beq	$2,$0,$L438
	nop

	lbu	$7,0($8)
	andi	$2,$7,0x3
	beq	$2,$23,$L466
	nop

	beq	$2,$22,$L467
	nop

	bne	$2,$fp,$L435
	nop

	bne	$20,$0,$L427
	srl	$7,$7,2

	bne	$7,$3,$L427
	addiu	$2,$8,1

	lbu	$4,1($8)
	addiu	$18,$18,5
	sb	$4,0($19)
	lbu	$4,1($2)
	addiu	$8,$8,5
	li	$20,1			# 0x1
	sb	$4,1($19)
	lbu	$4,2($2)
	sb	$4,2($19)
	lbu	$2,3($2)
	sb	$2,3($19)
$L430:
	slt	$2,$17,$18
	beq	$2,$0,$L469
	slt	$2,$18,$17

$L427:
	li	$2,-1			# 0xffffffffffffffff
$L468:
	lw	$31,84($sp)
	lw	$fp,80($sp)
	lw	$23,76($sp)
	lw	$22,72($sp)
	lw	$21,68($sp)
	lw	$20,64($sp)
	lw	$19,60($sp)
	lw	$18,56($sp)
	lw	$17,52($sp)
	lw	$16,48($sp)
	j	$31
	addiu	$sp,$sp,88

$L448:
	beq	$2,$0,$L438
	lui	$4,%hi($LC11)

	jal	printk
	addiu	$4,$4,%lo($LC11)

	j	$L451
	li	$2,-1			# 0xffffffffffffffff

$L435:
	bne	$7,$0,$L427
	addu	$21,$21,$18

	lbu	$2,0($21)
	bne	$2,$0,$L427
	addiu	$18,$18,1

$L440:
	slt	$2,$18,$17
	beq	$2,$0,$L438
	addiu	$18,$18,1

	lbu	$2,1($21)
	beq	$2,$0,$L440
	addiu	$21,$21,1

	j	$L468
	li	$2,-1			# 0xffffffffffffffff

$L466:
	bne	$12,$0,$L427
	srl	$7,$7,2

	slt	$2,$7,33
	beq	$2,$0,$L427
	move	$4,$11

	addiu	$8,$8,1
	move	$5,$0
	li	$6,64			# 0x40
	sw	$3,44($sp)
	sw	$7,28($sp)
	sw	$8,32($sp)
	sw	$9,24($sp)
	sw	$10,36($sp)
	jal	memset
	sw	$11,40($sp)

	lw	$7,28($sp)
	lw	$3,44($sp)
	lw	$8,32($sp)
	lw	$9,24($sp)
	lw	$10,36($sp)
	beq	$7,$0,$L428
	lw	$11,40($sp)

	move	$4,$0
	move	$2,$0
$L429:
	addu	$5,$8,$4
	lbu	$6,0($5)
	addiu	$2,$2,1
	addu	$4,$16,$4
	sltu	$5,$2,$7
	sb	$6,30($4)
	bne	$5,$0,$L429
	move	$4,$2

$L428:
	addiu	$18,$18,1
	addu	$18,$18,$7
	addu	$8,$8,$7
	j	$L430
	li	$12,1			# 0x1

$L467:
	bne	$9,$0,$L427
	srl	$7,$7,2

	beq	$7,$0,$L432
	move	$5,$0

	addiu	$8,$8,1
	move	$4,$10
	li	$6,64			# 0x40
	sw	$3,44($sp)
	sw	$7,28($sp)
	sw	$8,32($sp)
	sw	$10,36($sp)
	sw	$11,40($sp)
	jal	memset
	sw	$12,24($sp)

	lw	$7,28($sp)
	lw	$3,44($sp)
	lw	$8,32($sp)
	lw	$10,36($sp)
	lw	$11,40($sp)
	lw	$12,24($sp)
	move	$9,$7
$L433:
	move	$4,$0
	move	$2,$0
$L434:
	addu	$5,$8,$4
	lbu	$6,0($5)
	addiu	$2,$2,1
	addu	$4,$16,$4
	sltu	$5,$2,$9
	sb	$6,94($4)
	bne	$5,$0,$L434
	move	$4,$2

	addiu	$18,$18,1
	addu	$8,$8,$9
	addu	$18,$18,$7
	j	$L430
	li	$9,1			# 0x1

$L432:
	addiu	$8,$8,1
	move	$4,$10
	li	$6,64			# 0x40
	sw	$3,44($sp)
	sw	$8,32($sp)
	sw	$10,36($sp)
	sw	$11,40($sp)
	jal	memset
	sw	$12,24($sp)

	li	$7,64			# 0x40
	li	$9,64			# 0x40
	lw	$12,24($sp)
	lw	$11,40($sp)
	lw	$10,36($sp)
	lw	$8,32($sp)
	j	$L433
	lw	$3,44($sp)

$L465:
	jal	printk
	addiu	$4,$4,%lo($LC12)

	j	$L451
	li	$2,-1			# 0xffffffffffffffff

	.set	macro
	.set	reorder
	.end	parse_tlv_info
	.size	parse_tlv_info, .-parse_tlv_info
	.section	.rodata.str1.4
	.align	2
$LC13:
	.ascii	"sc_mcast_udp\000"
	.text
	.align	2
	.globl	mcast_udp_get_profile
	.set	nomips16
	.ent	mcast_udp_get_profile
	.type	mcast_udp_get_profile, @function
mcast_udp_get_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 3/0, args= 16, gp= 0
	.mask	0x80030000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$2,%hi($LC13)
	move	$16,$5
	addiu	$4,$4,8
	addiu	$2,$2,%lo($LC13)
	addiu	$5,$5,1856
 #APP
 # 77 "/home/jerry_ni/linux_release/release_sdk_3411d/branch-rtl819x-sdk-v3.4.11-1/linux-3.10/arch/mips-ori/include/asm/string.h" 1
	.set	noreorder
	.set	noat
	lbu	$3,($4)
1:	lbu	$1,($2)
	addiu	$4,1
	bne	$1,$3,2f
	addiu	$2,1
	bnez	$3,1b
	lbu	$3,($4)
	move	$3,$1
2:	subu	$3,$1
3:	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	.set	noreorder
	.set	nomacro
	beq	$3,$0,$L476
	move	$4,$16
	.set	macro
	.set	reorder

	lbu	$6,2112($16)
	li	$7,1			# 0x1
$L475:
	lw	$31,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	.set	noreorder
	.set	nomacro
	j	parse_tlv_info
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

$L476:
	move	$4,$5
	lui	$5,%hi(default_key_iv)
	addiu	$5,$5,%lo(default_key_iv)
	li	$6,8			# 0x8
	.set	noreorder
	.set	nomacro
	jal	memcmp
	lw	$17,2112($16)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L472
	lw	$31,28($sp)
	.set	macro
	.set	reorder

	lw	$17,24($sp)
	lw	$16,20($sp)
	li	$2,-1			# 0xffffffffffffffff
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,32
	.set	macro
	.set	reorder

$L472:
	addiu	$6,$17,-8
	move	$4,$16
	andi	$6,$6,0x00ff
	addiu	$5,$16,1864
	.set	noreorder
	.set	nomacro
	j	$L475
	move	$7,$0
	.set	macro
	.set	reorder

	.end	mcast_udp_get_profile
	.size	mcast_udp_get_profile, .-mcast_udp_get_profile
	.align	2
	.globl	rtk_sc_set_para
	.set	nomips16
	.ent	rtk_sc_set_para
	.type	rtk_sc_set_para, @function
rtk_sc_set_para:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	jal	rtk_sc_get_value
	li	$4,8			# 0x8

	lui	$3,%hi(g_sc_debug)
	li	$4,16			# 0x10
	sw	$2,%lo(g_sc_debug)($3)
	jal	rtk_sc_get_value
	lui	$16,%hi(g_sc_check_level)

	li	$4,17			# 0x11
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_check_level)($16)

	lui	$3,%hi(g_sc_ignore_overlap)
	li	$4,29			# 0x1d
	jal	rtk_sc_get_value
	sw	$2,%lo(g_sc_ignore_overlap)($3)

	lw	$3,%lo(g_sc_check_level)($16)
	lui	$4,%hi(g_sc_config_type)
	beq	$3,$0,$L478
	sw	$2,%lo(g_sc_config_type)($4)

	lui	$4,%hi(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic)
	jal	rtk_sc_get_magic
	li	$5,8			# 0x8

$L478:
	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	rtk_sc_set_para
	.size	rtk_sc_set_para, .-rtk_sc_set_para
	.align	2
	.globl	mcast_udp_decode_profile
	.set	nomips16
	.ent	mcast_udp_decode_profile
	.type	mcast_udp_decode_profile, @function
mcast_udp_decode_profile:
	.frame	$sp,32,$31		# vars= 0, regs= 2/0, args= 24, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-32
	sw	$31,28($sp)
	sw	$16,24($sp)
	move	$16,$5
	lw	$7,2148($16)
	lw	$5,2408($5)
	addiu	$2,$16,1856
	addiu	$4,$16,2152
	addiu	$6,$16,2116
	jal	AES_UnWRAP
	sw	$2,16($sp)

	lw	$3,2408($16)
	move	$2,$0
	sw	$3,2112($16)
	lw	$31,28($sp)
	lw	$16,24($sp)
	j	$31
	addiu	$sp,$sp,32

	.set	macro
	.set	reorder
	.end	mcast_udp_decode_profile
	.size	mcast_udp_decode_profile, .-mcast_udp_decode_profile
	.section	.rodata.str1.4
	.align	2
$LC14:
	.ascii	"the pin code is %s, the pin length is %d\012\000"
	.text
	.align	2
	.globl	bcast_udp_get_pattern
	.set	nomips16
	.ent	bcast_udp_get_pattern
	.type	bcast_udp_get_pattern, @function
bcast_udp_get_pattern:
	.frame	$sp,248,$31		# vars= 200, regs= 7/0, args= 16, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-248
	sw	$31,244($sp)
	sw	$21,240($sp)
	sw	$20,236($sp)
	sw	$19,232($sp)
	sw	$18,228($sp)
	sw	$17,224($sp)
	sw	$16,220($sp)
	li	$4,6			# 0x6
	addiu	$17,$sp,80
	move	$16,$5
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	addiu	$21,$sp,148
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	move	$5,$17
	move	$20,$2
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$19,$sp,16
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$21
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$19
	.set	macro
	.set	reorder

	li	$2,5			# 0x5
	sw	$2,8($16)
	sb	$20,2806($16)
	lui	$2,%hi(g_sc_ctx+1852)
	lw	$2,%lo(g_sc_ctx+1852)($2)
	move	$4,$21
	lui	$18,%hi(g_sc_pin_len)
	.set	noreorder
	.set	nomacro
	jal	strlen
	sw	$2,1852($16)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	bne	$20,$0,$L483
	sw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	addiu	$20,$16,2676
	move	$6,$2
	move	$5,$17
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$20
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	move	$6,$2
	move	$5,$17
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$4,$16,2741
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$17
	.set	macro
	.set	reorder

	sw	$2,%lo(g_sc_pin_len)($18)
$L484:
	addu	$2,$16,$2
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	beq	$3,$2,$L487
	lw	$6,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

$L485:
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	sh	$2,2808($16)
	addiu	$3,$16,2810
 #APP
 # 27 "/home/jerry_ni/linux_release/release_sdk_3411d/branch-rtl819x-sdk-v3.4.11-1/linux-3.10/arch/mips-ori/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($19)
	addiu	$19,1
	sb	$1,($3)
	bnez	$1,1b
	addiu	$3,1
	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	lui	$3,%hi(radom_value)
	addiu	$2,$3,%lo(radom_value)
	li	$4,53			# 0x35
	sb	$4,3($2)
	li	$4,50			# 0x32
	sb	$4,%lo(radom_value)($3)
	li	$3,51			# 0x33
	sb	$3,1($2)
	li	$3,52			# 0x34
	sb	$3,2($2)
	lw	$31,244($sp)
	lw	$21,240($sp)
	lw	$20,236($sp)
	lw	$19,232($sp)
	lw	$18,228($sp)
	lw	$17,224($sp)
	lw	$16,220($sp)
	move	$2,$0
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,248
	.set	macro
	.set	reorder

$L483:
	addiu	$20,$16,2676
	move	$5,$21
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$20
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L484
	lw	$2,%lo(g_sc_pin_len)($18)
	.set	macro
	.set	reorder

$L487:
	lui	$4,%hi($LC14)
	addiu	$4,$4,%lo($LC14)
	.set	noreorder
	.set	nomacro
	jal	printk
	move	$5,$20
	.set	macro
	.set	reorder

	j	$L485
	.end	bcast_udp_get_pattern
	.size	bcast_udp_get_pattern, .-bcast_udp_get_pattern
	.section	.rodata.str1.4
	.align	2
$LC15:
	.ascii	"It is not invalid pattern\012\000"
	.align	2
$LC16:
	.ascii	"this client MUST have pin\012\000"
	.text
	.align	2
	.globl	mcast_udp_get_pattern
	.set	nomips16
	.ent	mcast_udp_get_pattern
	.type	mcast_udp_get_pattern, @function
mcast_udp_get_pattern:
	.frame	$sp,248,$31		# vars= 200, regs= 8/0, args= 16, gp= 0
	.mask	0x807f0000,-4
	.fmask	0x00000000,0
	addiu	$sp,$sp,-248
	sw	$31,244($sp)
	sw	$22,240($sp)
	sw	$21,236($sp)
	sw	$20,232($sp)
	sw	$19,228($sp)
	sw	$18,224($sp)
	sw	$17,220($sp)
	sw	$16,216($sp)
	li	$4,6			# 0x6
	addiu	$18,$sp,80
	move	$16,$5
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	addiu	$22,$sp,148
	.set	macro
	.set	reorder

	li	$4,21			# 0x15
	move	$5,$18
	move	$19,$2
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	addiu	$17,$sp,16
	.set	macro
	.set	reorder

	li	$4,20			# 0x14
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$22
	.set	macro
	.set	reorder

	li	$4,23			# 0x17
	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_string_value
	move	$5,$17
	.set	macro
	.set	reorder

	lbu	$4,271($16)
	lbu	$3,265($16)
	lbu	$2,277($16)
	sll	$4,$4,8
	sll	$3,$3,16
	addu	$3,$4,$3
	addu	$3,$3,$2
	li	$4,2			# 0x2
	.set	noreorder
	.set	nomacro
	beq	$3,$4,$L500
	li	$4,3			# 0x3
	.set	macro
	.set	reorder

	bne	$3,$4,$L491
	lbu	$6,263($16)
	lbu	$5,270($16)
	lbu	$4,283($16)
	addu	$2,$6,$2
	addu	$2,$2,$5
	lbu	$5,289($16)
	addu	$2,$2,$4
	andi	$2,$2,0xff
	.set	noreorder
	.set	nomacro
	beq	$5,$2,$L501
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

$L490:
	li	$2,1			# 0x1
$L505:
	.set	noreorder
	.set	nomacro
	beq	$19,$2,$L502
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

$L506:
	lui	$5,%hi(radom_value+4)
	addiu	$2,$2,%lo(radom_value)
	addiu	$5,$5,%lo(radom_value+4)
	move	$3,$16
$L497:
	lbu	$4,295($3)
	sb	$4,0($2)
	addiu	$2,$2,1
	.set	noreorder
	.set	nomacro
	bne	$2,$5,$L497
	addiu	$3,$3,6
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	rtk_sc_get_value
	li	$4,24			# 0x18
	.set	macro
	.set	reorder

	sh	$2,2808($16)
	addiu	$3,$16,2810
 #APP
 # 27 "/home/jerry_ni/linux_release/release_sdk_3411d/branch-rtl819x-sdk-v3.4.11-1/linux-3.10/arch/mips-ori/include/asm/string.h" 1
	.set	noreorder
	.set	noat
1:	lbu	$1,($17)
	addiu	$17,1
	sb	$1,($3)
	bnez	$1,1b
	addiu	$3,1
	.set	at
	.set	reorder
 # 0 "" 2
 #NO_APP
	move	$2,$0
$L495:
	lw	$31,244($sp)
	lw	$22,240($sp)
	lw	$21,236($sp)
	lw	$20,232($sp)
	lw	$19,228($sp)
	lw	$18,224($sp)
	lw	$17,220($sp)
	lw	$16,216($sp)
	.set	noreorder
	.set	nomacro
	j	$31
	addiu	$sp,$sp,248
	.set	macro
	.set	reorder

$L500:
	lbu	$6,263($16)
	lbu	$5,270($16)
	lbu	$4,283($16)
	addu	$2,$6,$2
	addu	$2,$2,$5
	lbu	$5,289($16)
	addu	$2,$2,$4
	andi	$2,$2,0xff
	.set	noreorder
	.set	nomacro
	bne	$5,$2,$L505
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

	addiu	$4,$4,-9
	sw	$3,8($16)
	sw	$4,1852($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$18
	.set	macro
	.set	reorder

	move	$6,$2
	move	$5,$18
	.set	noreorder
	.set	nomacro
	jal	memcpy
	addiu	$4,$16,2741
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$18
	.set	macro
	.set	reorder

	addu	$3,$16,$2
	lui	$4,%hi(g_sc_pin_len)
	sw	$2,%lo(g_sc_pin_len)($4)
	sb	$0,2741($3)
	.set	noreorder
	.set	nomacro
	j	$L490
	sb	$0,2806($16)
	.set	macro
	.set	reorder

$L502:
	lbu	$2,2806($16)
	.set	noreorder
	.set	nomacro
	bne	$2,$0,$L506
	lui	$2,%hi(radom_value)
	.set	macro
	.set	reorder

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L494
	lui	$4,%hi($LC16)
	.set	noreorder
	.set	nomacro
	jal	printk
	addiu	$4,$4,%lo($LC16)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L495
	li	$2,-1			# 0xffffffffffffffff
	.set	macro
	.set	reorder

$L501:
	addiu	$4,$4,-9
	sw	$4,1852($16)
	sw	$3,8($16)
	sb	$2,2806($16)
	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$22
	.set	macro
	.set	reorder

	lui	$20,%hi(g_sc_pin_len)
	.set	noreorder
	.set	nomacro
	beq	$2,$0,$L503
	sw	$2,%lo(g_sc_pin_len)($20)
	.set	macro
	.set	reorder

	addiu	$21,$16,2676
	move	$5,$22
	move	$6,$2
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$21
	.set	macro
	.set	reorder

	lw	$2,%lo(g_sc_pin_len)($20)
$L493:
	addu	$2,$16,$2
	sb	$0,2676($2)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	.set	noreorder
	.set	nomacro
	bne	$3,$2,$L490
	lw	$6,%lo(g_sc_pin_len)($20)
	.set	macro
	.set	reorder

	lui	$4,%hi($LC14)
	addiu	$4,$4,%lo($LC14)
	.set	noreorder
	.set	nomacro
	jal	printk
	move	$5,$21
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L505
	li	$2,1			# 0x1
	.set	macro
	.set	reorder

$L491:
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L504
$L494:
	.set	noreorder
	.set	nomacro
	j	$L495
	li	$2,-1			# 0xffffffffffffffff
	.set	macro
	.set	reorder

$L503:
	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$18
	.set	macro
	.set	reorder

	addiu	$21,$16,2676
	move	$6,$2
	move	$5,$18
	.set	noreorder
	.set	nomacro
	jal	memcpy
	move	$4,$21
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	jal	strlen
	move	$4,$18
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L493
	sw	$2,%lo(g_sc_pin_len)($20)
	.set	macro
	.set	reorder

$L504:
	lui	$4,%hi($LC15)
	.set	noreorder
	.set	nomacro
	jal	printk
	addiu	$4,$4,%lo($LC15)
	.set	macro
	.set	reorder

	.set	noreorder
	.set	nomacro
	j	$L495
	li	$2,-1			# 0xffffffffffffffff
	.set	macro
	.set	reorder

	.end	mcast_udp_get_pattern
	.size	mcast_udp_get_pattern, .-mcast_udp_get_pattern
	.align	2
	.globl	mcast_udp_generate_key
	.set	nomips16
	.ent	mcast_udp_generate_key
	.type	mcast_udp_generate_key, @function
mcast_udp_generate_key:
	.frame	$sp,416,$31		# vars= 360, regs= 7/0, args= 24, gp= 0
	.mask	0x803f0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-416
	sw	$31,412($sp)
	sw	$21,408($sp)
	sw	$20,404($sp)
	sw	$19,400($sp)
	sw	$18,396($sp)
	sw	$17,392($sp)
	sw	$16,388($sp)
	addiu	$17,$sp,128
	move	$19,$4
	move	$16,$5
	move	$4,$17
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$2,%hi(use_ios7_mac)
	lw	$2,%lo(use_ios7_mac)($2)
	beq	$2,$0,$L508
	move	$4,$17

	lui	$5,%hi(g_ios_mac)
	addiu	$5,$5,%lo(g_ios_mac)
	jal	memcpy
	li	$6,6			# 0x6

	lbu	$2,2806($16)
	bne	$2,$0,$L515
	lui	$18,%hi(g_sc_pin_len)

$L510:
	lui	$18,%hi(g_sc_pin_len)
	lw	$6,%lo(g_sc_pin_len)($18)
	addiu	$4,$sp,134
	jal	memcpy
	addiu	$5,$16,2741

	lw	$18,%lo(g_sc_pin_len)($18)
$L514:
	lui	$20,%hi(mcast_udp_buffer)
	addiu	$20,$20,%lo(mcast_udp_buffer)
	jal	strlen
	move	$4,$20

	addiu	$18,$18,6
	move	$5,$20
	addu	$4,$17,$18
	jal	memcpy
	move	$6,$2

	jal	strlen
	move	$4,$20

	addu	$18,$2,$18
	lui	$5,%hi(radom_value)
	addiu	$20,$sp,40
	addu	$4,$17,$18
	addiu	$5,$5,%lo(radom_value)
	jal	memcpy
	li	$6,4			# 0x4

	addiu	$18,$18,4
	jal	wlan_MD5_Init
	move	$4,$20

	addiu	$21,$sp,24
	move	$6,$18
	move	$4,$20
	jal	wlan_MD5_Update
	move	$5,$17

	addiu	$19,$19,8
	move	$5,$20
	jal	wlan_MD5_Final
	move	$4,$21

	jal	strlen
	move	$4,$19

	move	$6,$2
	move	$5,$19
	jal	memcpy
	addu	$4,$17,$18

	jal	strlen
	move	$4,$19

	addu	$5,$18,$2
	move	$4,$17
	addiu	$2,$16,2116
	move	$6,$21
	li	$7,16			# 0x10
	jal	hmac_sha1
	sw	$2,16($sp)

	li	$2,16			# 0x10
	sw	$2,2148($16)
	lw	$31,412($sp)
	lw	$21,408($sp)
	lw	$20,404($sp)
	lw	$19,400($sp)
	lw	$18,396($sp)
	lw	$17,392($sp)
	lw	$16,388($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,416

$L508:
	addiu	$5,$16,12
	jal	memcpy
	li	$6,6			# 0x6

	lbu	$2,2806($16)
	beq	$2,$0,$L510
	lui	$18,%hi(g_sc_pin_len)

$L515:
	lw	$6,%lo(g_sc_pin_len)($18)
	addiu	$4,$sp,134
	jal	memcpy
	addiu	$5,$16,2676

	j	$L514
	lw	$18,%lo(g_sc_pin_len)($18)

	.set	macro
	.set	reorder
	.end	mcast_udp_generate_key
	.size	mcast_udp_generate_key, .-mcast_udp_generate_key
	.align	2
	.set	nomips16
	.ent	T.1380
	.type	T.1380, @function
T.1380:
	.frame	$sp,2104,$31		# vars= 2048, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-2104
	sw	$31,2100($sp)
	sw	$fp,2096($sp)
	sw	$23,2092($sp)
	sw	$22,2088($sp)
	sw	$21,2084($sp)
	sw	$20,2080($sp)
	sw	$19,2076($sp)
	sw	$18,2072($sp)
	sw	$17,2068($sp)
	sw	$16,2064($sp)
	addiu	$16,$sp,1040
	move	$2,$16
	addiu	$3,$sp,1072
$L517:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$2,$3,$L517
	lui	$17,%hi(genPoly)

	addiu	$17,$17,%lo(genPoly)
	li	$2,1			# 0x1
	lui	$20,%hi(gexp+4)
	lui	$fp,%hi(gexp+20)
	sw	$2,1040($sp)
	addiu	$20,$20,%lo(gexp+4)
	addiu	$fp,$fp,%lo(gexp+20)
	addiu	$21,$sp,16
	addiu	$19,$sp,48
	li	$23,1			# 0x1
	move	$22,$17
	li	$18,32			# 0x20
$L518:
	move	$2,$21
$L519:
	sw	$0,0($2)
	addiu	$2,$2,4
	bne	$2,$19,$L519
	move	$4,$22

	lw	$2,0($20)
	move	$5,$21
	move	$6,$16
	sw	$2,16($sp)
	jal	mult_polys
	sw	$23,20($sp)

	move	$2,$0
$L520:
	addu	$3,$17,$2
	lw	$4,0($3)
	addu	$3,$16,$2
	addiu	$2,$2,4
	bne	$2,$18,$L520
	sw	$4,0($3)

	addiu	$20,$20,4
	bne	$20,$fp,$L518
	lw	$31,2100($sp)

	lw	$fp,2096($sp)
	lw	$23,2092($sp)
	lw	$22,2088($sp)
	lw	$21,2084($sp)
	lw	$20,2080($sp)
	lw	$19,2076($sp)
	lw	$18,2072($sp)
	lw	$17,2068($sp)
	lw	$16,2064($sp)
	j	$31
	addiu	$sp,$sp,2104

	.set	macro
	.set	reorder
	.end	T.1380
	.size	T.1380, .-T.1380
	.align	2
	.globl	initialize_ecc
	.set	nomips16
	.ent	initialize_ecc
	.type	initialize_ecc, @function
initialize_ecc:
	.frame	$sp,24,$31		# vars= 0, regs= 1/0, args= 16, gp= 0
	.mask	0x80000000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	jal	init_galois_tables
	nop

	lw	$31,20($sp)
	j	T.1380
	addiu	$sp,$sp,24

	.set	macro
	.set	reorder
	.end	initialize_ecc
	.size	initialize_ecc, .-initialize_ecc
	.align	2
	.globl	rtk_sc_clean_profile_value
	.set	nomips16
	.ent	rtk_sc_clean_profile_value
	.type	rtk_sc_clean_profile_value, @function
rtk_sc_clean_profile_value:
	.frame	$sp,56,$31		# vars= 0, regs= 10/0, args= 16, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-56
	sw	$31,52($sp)
	sw	$fp,48($sp)
	sw	$23,44($sp)
	sw	$22,40($sp)
	sw	$21,36($sp)
	sw	$20,32($sp)
	sw	$19,28($sp)
	sw	$18,24($sp)
	sw	$17,20($sp)
	sw	$16,16($sp)
	li	$2,-1			# 0xffffffffffffffff
	lui	$3,%hi(g_p4_group_index_ToDS)
	sw	$2,%lo(g_p4_group_index_ToDS)($3)
	lui	$3,%hi(fix_sa)
	sw	$0,%lo(fix_sa)($3)
	lui	$3,%hi(finish_sync)
	sw	$0,%lo(finish_sync)($3)
	lui	$3,%hi(g_p4_magic_1)
	sw	$0,%lo(g_p4_magic_1)($3)
	lui	$3,%hi(g_p4_magic_2)
	sw	$0,%lo(g_p4_magic_2)($3)
	lui	$3,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($3)
	lui	$3,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($3)
	lui	$3,%hi(g_p4_group)
	sw	$2,%lo(g_p4_group)($3)
	lui	$3,%hi(g_pkt_type)
	sw	$0,%lo(g_pkt_type)($3)
	lui	$3,%hi(g_p4_last_seq)
	sw	$0,%lo(g_p4_last_seq)($3)
	lui	$3,%hi(g_p4_to_ds_hrate)
	sw	$0,%lo(g_p4_to_ds_hrate)($3)
	lui	$21,%hi(g_sc_ctx)
	lui	$3,%hi(g_p4_option_num)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$21,$21,%lo(g_sc_ctx)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	move	$5,$0
	li	$6,6			# 0x6
	sw	$0,%lo(g_p4_option_num)($3)
	lui	$3,%hi(g_p4_group_index_FromDS)
	sw	$2,%lo(g_p4_group_index_FromDS)($3)
	sw	$0,8($21)
	sw	$0,2112($21)
	sw	$0,2148($21)
	sw	$0,2408($21)
	jal	memset
	sw	$0,2412($21)

	lui	$4,%hi(g_sc_ctx+18)
	addiu	$4,$4,%lo(g_sc_ctx+18)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+24)
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$0
	jal	memset
	li	$6,6			# 0x6

	lui	$4,%hi(g_sc_ctx+30)
	addiu	$4,$4,%lo(g_sc_ctx+30)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+94)
	addiu	$4,$4,%lo(g_sc_ctx+94)
	move	$5,$0
	jal	memset
	li	$6,64			# 0x40

	lui	$4,%hi(g_sc_ctx+2741)
	addiu	$4,$4,%lo(g_sc_ctx+2741)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2676)
	addiu	$4,$4,%lo(g_sc_ctx+2676)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+2810)
	addiu	$4,$4,%lo(g_sc_ctx+2810)
	move	$5,$0
	jal	memset
	li	$6,65			# 0x41

	lui	$4,%hi(g_sc_ctx+260)
	addiu	$4,$4,%lo(g_sc_ctx+260)
	move	$5,$0
	jal	memset
	li	$6,54			# 0x36

	lui	$4,%hi(g_sc_ctx+314)
	addiu	$4,$4,%lo(g_sc_ctx+314)
	move	$5,$0
	jal	memset
	li	$6,1536			# 0x600

	lui	$4,%hi(g_sc_ctx+2874)
	addiu	$4,$4,%lo(g_sc_ctx+2874)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_sc_ctx+3130)
	addiu	$4,$4,%lo(g_sc_ctx+3130)
	move	$5,$0
	jal	memset
	li	$6,256			# 0x100

	lui	$4,%hi(g_option_sa)
	addiu	$4,$4,%lo(g_option_sa)
	move	$5,$0
	li	$6,140			# 0x8c
	lui	$20,%hi(g_sc_ctx+5520)
	lui	$19,%hi(g_sc_ctx+8692)
	lui	$fp,%hi(g_sc_ctx+8177)
	jal	memset
	lui	$23,%hi(g_sc_ctx+3917)

	addiu	$20,$20,%lo(g_sc_ctx+5520)
	sb	$0,3386($21)
	sb	$0,3387($21)
	sb	$0,3404($21)
	sb	$0,4461($21)
	sb	$0,10804($21)
	sb	$0,10805($21)
	sw	$0,10896($21)
	sw	$0,10900($21)
	sb	$0,10806($21)
	sb	$0,4462($21)
	sb	$0,7632($21)
	addiu	$19,$19,%lo(g_sc_ctx+8692)
	addiu	$fp,$fp,%lo(g_sc_ctx+8177)
	addiu	$23,$23,%lo(g_sc_ctx+3917)
	move	$17,$21
	move	$18,$21
	move	$16,$0
	li	$22,512			# 0x200
$L529:
	lui	$2,%hi(g_sc_ctx+3405)
	addiu	$2,$2,%lo(g_sc_ctx+3405)
	addu	$4,$2,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lui	$2,%hi(g_sc_ctx+4495)
	addiu	$2,$2,%lo(g_sc_ctx+4495)
	addu	$4,$2,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lui	$2,%hi(g_sc_ctx+7665)
	addiu	$2,$2,%lo(g_sc_ctx+7665)
	addu	$4,$2,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lui	$2,%hi(g_sc_ctx+5007)
	addiu	$2,$2,%lo(g_sc_ctx+5007)
	addu	$4,$2,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addu	$4,$fp,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addu	$4,$23,$16
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	move	$4,$20
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$16,$16,32
	move	$4,$19
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$20,$20,128
	sw	$0,7568($18)
	sw	$0,10740($18)
	addiu	$19,$19,128
	sb	$0,3388($17)
	sb	$0,4429($17)
	sb	$0,4463($17)
	sb	$0,7633($17)
	sb	$0,4445($17)
	sb	$0,7649($17)
	sb	$0,4479($17)
	sw	$0,10812($18)
	addiu	$17,$17,1
	bne	$16,$22,$L529
	addiu	$18,$18,4

	jal	initialize_ecc
	nop

	li	$2,-1			# 0xffffffffffffffff
	sw	$2,10892($21)
	sw	$2,10888($21)
	sh	$0,10886($21)
	sh	$0,10808($21)
	sh	$0,10810($21)
	sw	$0,10876($21)
	sh	$0,10880($21)
	sh	$0,10882($21)
	sh	$0,10884($21)
	lw	$31,52($sp)
	lw	$fp,48($sp)
	lw	$23,44($sp)
	lw	$22,40($sp)
	lw	$21,36($sp)
	lw	$20,32($sp)
	lw	$19,28($sp)
	lw	$18,24($sp)
	lw	$17,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,56

	.set	macro
	.set	reorder
	.end	rtk_sc_clean_profile_value
	.size	rtk_sc_clean_profile_value, .-rtk_sc_clean_profile_value
	.section	.rodata.str1.4
	.align	2
$LC17:
	.ascii	"try to clean profile!\012\000"
	.align	2
$LC18:
	.ascii	"df*r43^fdjakfo\000"
	.text
	.align	2
	.globl	rtk_sc_restart_simple_config
	.set	nomips16
	.ent	rtk_sc_restart_simple_config
	.type	rtk_sc_restart_simple_config, @function
rtk_sc_restart_simple_config:
	.frame	$sp,24,$31		# vars= 0, regs= 2/0, args= 16, gp= 0
	.mask	0x80010000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-24
	sw	$31,20($sp)
	sw	$16,16($sp)
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L535
	move	$16,$4

$L533:
	jal	rtk_sc_clean_profile_value
	nop

	lui	$5,%hi($LC18)
	addiu	$5,$5,%lo($LC18)
	jal	rtk_sc_set_string_value
	li	$4,25			# 0x19

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1000			# 0x3e8

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	li	$4,18			# 0x12
	jal	rtk_sc_set_value
	move	$5,$0

	move	$5,$0
	jal	rtk_sc_set_value
	li	$4,28			# 0x1c

	move	$4,$16
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	lw	$31,20($sp)
	lw	$16,16($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,24

$L535:
	lui	$4,%hi($LC17)
	jal	printk
	addiu	$4,$4,%lo($LC17)

	j	$L533
	nop

	.set	macro
	.set	reorder
	.end	rtk_sc_restart_simple_config
	.size	rtk_sc_restart_simple_config, .-rtk_sc_restart_simple_config
	.section	.rodata.str1.4
	.align	2
$LC19:
	.ascii	"\012get the profile info fail! \000"
	.align	2
$LC20:
	.ascii	"the crypt info is \000"
	.align	2
$LC21:
	.ascii	" \000"
	.align	2
$LC22:
	.ascii	"get the profile\012\000"
	.align	2
$LC23:
	.ascii	"get the profile and encrypt info now, try to connect rem"
	.ascii	"ote AP\012\000"
	.text
	.align	2
	.globl	rtk_sc_check_profile
	.set	nomips16
	.ent	rtk_sc_check_profile
	.type	rtk_sc_check_profile, @function
rtk_sc_check_profile:
	.frame	$sp,56,$31		# vars= 0, regs= 9/0, args= 16, gp= 0
	.mask	0x80ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-56
	sw	$31,52($sp)
	sw	$23,48($sp)
	sw	$22,44($sp)
	sw	$21,40($sp)
	sw	$20,36($sp)
	sw	$19,32($sp)
	sw	$18,28($sp)
	sw	$17,24($sp)
	sw	$16,20($sp)
	lui	$17,%hi(pp)
	move	$19,$4
	lw	$4,%lo(pp)($17)
	lui	$16,%hi(g_sc_ctx)
	addiu	$5,$16,%lo(g_sc_ctx)
	lui	$18,%hi(use_ios7_mac)
	jal	rtk_sc_get_cipher_info
	sw	$0,%lo(use_ios7_mac)($18)

	lw	$4,%lo(pp)($17)
	jal	rtk_sc_generate_key
	addiu	$5,$16,%lo(g_sc_ctx)

	beq	$2,$0,$L556
	lw	$4,%lo(pp)($17)

$L568:
	li	$2,1			# 0x1
	addiu	$5,$16,%lo(g_sc_ctx)
	sw	$2,%lo(use_ios7_mac)($18)
	lui	$21,%hi(pp)
	jal	rtk_sc_generate_key
	lui	$20,%hi(g_sc_ctx)

	beq	$2,$0,$L557
	lw	$4,%lo(pp)($21)

$L539:
	sw	$0,%lo(use_ios7_mac)($18)
	lui	$2,%hi(g_sc_debug)
$L562:
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L558
	lw	$2,%lo(pp)($17)

$L566:
	lw	$3,0($2)
	li	$2,5			# 0x5
	bne	$3,$2,$L544
	addiu	$16,$16,%lo(g_sc_ctx)

	li	$2,1			# 0x1
	sw	$2,10876($16)
$L544:
	jal	rtk_sc_restart_simple_config
	move	$4,$19

	j	$L545
	li	$2,-1			# 0xffffffffffffffff

$L556:
	jal	rtk_sc_decode_profile
	addiu	$5,$16,%lo(g_sc_ctx)

	bne	$2,$0,$L568
	lw	$4,%lo(pp)($17)

	jal	rtk_sc_get_tlv_info
	addiu	$5,$16,%lo(g_sc_ctx)

	bne	$2,$0,$L568
	lw	$4,%lo(pp)($17)

$L538:
	lui	$5,%hi(g_sc_ctx+94)
	addiu	$5,$5,%lo(g_sc_ctx+94)
	jal	rtk_sc_set_string_value
	li	$4,22			# 0x16

	jal	rtk_sc_get_value
	li	$4,28			# 0x1c

	move	$17,$2
	li	$4,28			# 0x1c
	jal	rtk_sc_set_value
	move	$5,$0

	bne	$17,$0,$L546
	lui	$2,%hi(g_sc_debug)

	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L559
	lui	$4,%hi($LC22)

	li	$4,13			# 0xd
$L564:
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,3			# 0x3

	addiu	$16,$16,%lo(g_sc_ctx)
	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	lbu	$2,30($16)
	beq	$2,$0,$L548
	lui	$5,%hi(g_sc_ctx+30)

	addiu	$5,$5,%lo(g_sc_ctx+30)
	jal	rtk_sc_set_string_value
	li	$4,25			# 0x19

	move	$4,$19
$L563:
	jal	start_clnt_lookup
	li	$5,1			# 0x1

	move	$2,$0
$L545:
	lw	$31,52($sp)
	lw	$23,48($sp)
	lw	$22,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	j	$31
	addiu	$sp,$sp,56

$L557:
	jal	rtk_sc_decode_profile
	addiu	$5,$20,%lo(g_sc_ctx)

	bne	$2,$0,$L539
	lw	$4,%lo(pp)($21)

	jal	rtk_sc_get_tlv_info
	addiu	$5,$20,%lo(g_sc_ctx)

	lui	$3,%hi(use_ios7_mac)
	beq	$2,$0,$L538
	sw	$0,%lo(use_ios7_mac)($3)

	j	$L562
	lui	$2,%hi(g_sc_debug)

$L546:
	blez	$17,$L545
	move	$2,$0

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L560
	lui	$4,%hi($LC23)

	addiu	$16,$16,%lo(g_sc_ctx)
$L565:
	lbu	$2,30($16)
	beq	$2,$0,$L552
	nop

	lui	$5,%hi(g_sc_ctx+30)
	addiu	$5,$5,%lo(g_sc_ctx+30)
	jal	rtk_sc_set_string_value
	li	$4,25			# 0x19

$L553:
	jal	rtk_sc_set_passwd
	move	$4,$19

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,4			# 0x4

	li	$5,4			# 0x4
	jal	rtk_sc_set_value
	li	$4,7			# 0x7

	jal	rtk_sc_sync_vxd_to_root
	move	$4,$19

	move	$5,$0
	jal	rtk_sc_set_value
	li	$4,14			# 0xe

	jal	rtk_sc_start_connect_target
	move	$4,$19

	lw	$31,52($sp)
	lw	$23,48($sp)
	lw	$22,44($sp)
	lw	$21,40($sp)
	lw	$20,36($sp)
	lw	$19,32($sp)
	lw	$18,28($sp)
	lw	$17,24($sp)
	lw	$16,20($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,56

$L548:
	lui	$5,%hi(g_sc_ctx+24)
	addiu	$5,$5,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	j	$L563
	move	$4,$19

$L552:
	lui	$5,%hi(g_sc_ctx+24)
	addiu	$5,$5,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	j	$L553
	nop

$L559:
	jal	printk
	addiu	$4,$4,%lo($LC22)

	j	$L564
	li	$4,13			# 0xd

$L560:
	jal	printk
	addiu	$4,$4,%lo($LC23)

	j	$L565
	addiu	$16,$16,%lo(g_sc_ctx)

$L558:
	lui	$4,%hi($LC19)
	jal	printk
	addiu	$4,$4,%lo($LC19)

	lui	$4,%hi($LC20)
	addiu	$4,$4,%lo($LC20)
	lui	$20,%hi(g_sc_ctx)
	li	$23,715784192			# 0x2aaa0000
	lui	$22,%hi($LC21)
	jal	printk
	lui	$21,%hi($LC8)

	addiu	$20,$20,%lo(g_sc_ctx)
	ori	$23,$23,0xaaab
	addiu	$22,$22,%lo($LC21)
	addiu	$21,$21,%lo($LC8)
	j	$L541
	move	$18,$0

$L543:
	mult	$18,$23
	mfhi	$3
	subu	$2,$3,$2
	sll	$3,$2,3
	sll	$2,$2,1
	subu	$2,$3,$2
	beq	$18,$2,$L561
	nop

	addu	$2,$20,$18
$L567:
	lbu	$5,2152($2)
	move	$4,$21
	jal	printk
	addiu	$18,$18,1

$L541:
	lw	$3,2408($20)
	sltu	$3,$18,$3
	bne	$3,$0,$L543
	sra	$2,$18,31

	j	$L566
	lw	$2,%lo(pp)($17)

$L561:
	jal	printk
	move	$4,$22

	j	$L567
	addu	$2,$20,$18

	.set	macro
	.set	reorder
	.end	rtk_sc_check_profile
	.size	rtk_sc_check_profile, .-rtk_sc_check_profile
	.section	.rodata.str1.4
	.align	2
$LC24:
	.ascii	"index is %d, received packet number is %d\012\000"
	.align	2
$LC25:
	.ascii	"sync index is %d\012\000"
	.align	2
$LC26:
	.ascii	"the BSSID is \000"
	.align	2
$LC27:
	.ascii	"the Control Device MAC is \000"
	.align	2
$LC28:
	.ascii	"the option Control Device MAC is \000"
	.align	2
$LC29:
	.ascii	"the option Control Device number is %d, the pkt len is %"
	.ascii	"d\012\000"
	.align	2
$LC30:
	.ascii	"the magic number 1 is %d, the magic number 2 is %d\012\000"
	.align	2
$LC31:
	.ascii	"The Option Control Device MAC is \000"
	.align	2
$LC32:
	.ascii	"%d The Option Control Device MAC is \000"
	.align	2
$LC33:
	.ascii	"The Magic Number 1 is %d, the Magic Number 2 is %d\012\000"
	.align	2
$LC34:
	.ascii	"R2 %d-X %d the BSSID is \000"
	.align	2
$LC35:
	.ascii	"R2 X-%d %d the BSSID is \000"
	.align	2
$LC36:
	.ascii	"R2 %d-%d %d the BSSID is \000"
	.align	2
$LC37:
	.ascii	"the total profile packet num is %d\012\000"
	.align	2
$LC38:
	.ascii	"The Profile Pkt Num is %d\012\000"
	.align	2
$LC39:
	.ascii	"index is %d, total is %d, received %d now!\012\000"
	.align	2
$LC40:
	.ascii	"seq %d is over max length\012\000"
	.align	2
$LC41:
	.ascii	"Index is %d, Tatal is %d, Received %d now!\012\000"
	.align	2
$LC42:
	.ascii	"seq %d is NULL\012\000"
	.align	2
$LC43:
	.ascii	"don't add this data to profile\012\000"
	.align	2
$LC44:
	.ascii	"index is %d, tatal is %d, received %d now!\012\000"
	.align	2
$LC45:
	.ascii	"check file fail\012\000"
	.align	2
$LC46:
	.ascii	"block is %d, location_index is %d, data is %d, fr_or_to "
	.ascii	"is %d\012\000"
	.align	2
$LC47:
	.ascii	" -!%d.<-%d \000"
	.align	2
$LC48:
	.ascii	"\012%d block %d Got decode ERROR\012\000"
	.align	2
$LC49:
	.ascii	" F+-%d.<-%d\000"
	.align	2
$LC50:
	.ascii	" !%d.<-%d\000"
	.align	2
$LC51:
	.ascii	"%d %d Got decode ERROR\012\000"
	.align	2
$LC52:
	.ascii	" T+-%d.<-%d\000"
	.align	2
$LC53:
	.ascii	"before check profile, the cipher info is \000"
	.align	2
$LC54:
	.ascii	"Re-Collect!\012\000"
	.text
	.align	2
	.globl	rtk_sc_start_parse_packet
	.set	nomips16
	.ent	rtk_sc_start_parse_packet
	.type	rtk_sc_start_parse_packet, @function
rtk_sc_start_parse_packet:
	.frame	$sp,80,$31		# vars= 16, regs= 10/0, args= 24, gp= 0
	.mask	0xc0ff0000,-4
	.fmask	0x00000000,0
	.set	noreorder
	.set	nomacro
	
	addiu	$sp,$sp,-80
	sw	$31,76($sp)
	sw	$fp,72($sp)
	sw	$23,68($sp)
	sw	$22,64($sp)
	sw	$21,60($sp)
	sw	$20,56($sp)
	sw	$19,52($sp)
	sw	$18,48($sp)
	sw	$17,44($sp)
	sw	$16,40($sp)
	move	$16,$5
	move	$17,$4
	jal	rtk_sc_get_value
	li	$4,13			# 0xd

	lw	$3,0($16)
	lw	$3,204($3)
	lhu	$4,0($3)
	li	$3,8			# 0x8
	andi	$4,$4,0xc
	beq	$4,$3,$L951
	li	$4,1			# 0x1

$L569:
	lw	$31,76($sp)
$L1066:
$L1119:
$L1120:
	lw	$fp,72($sp)
$L1078:
	lw	$23,68($sp)
$L1079:
	lw	$22,64($sp)
$L1080:
	lw	$21,60($sp)
$L1081:
	lw	$20,56($sp)
$L1082:
	lw	$19,52($sp)
	lw	$18,48($sp)
	lw	$17,44($sp)
	lw	$16,40($sp)
	move	$2,$0
	j	$31
	addiu	$sp,$sp,80

$L951:
	lw	$3,24($16)
	lbu	$5,0($3)
	beq	$5,$4,$L952
	nop

$L571:
	addiu	$3,$2,-1
	sltu	$3,$3,2
	beq	$3,$0,$L1066
	lw	$31,76($sp)

	lui	$18,%hi(finish_sync)
	lw	$3,%lo(finish_sync)($18)
	bne	$3,$0,$L572
	li	$4,2			# 0x2

	lw	$2,24($16)
	li	$4,1			# 0x1
	lbu	$3,0($2)
	beq	$3,$4,$L953
	li	$4,255			# 0xff

	bne	$3,$4,$L1078
	lw	$fp,72($sp)

	lbu	$4,1($2)
	bne	$4,$3,$L1079
	lw	$23,68($sp)

	lbu	$3,2($2)
	bne	$3,$4,$L1080
	lw	$22,64($sp)

	lbu	$4,3($2)
	bne	$4,$3,$L1081
	lw	$21,60($sp)

	lbu	$3,4($2)
	bne	$3,$4,$L1082
	lw	$20,56($sp)

	lbu	$2,5($2)
	bne	$2,$3,$L1082
	nop

	lbu	$2,40($16)
	addiu	$2,$2,-1
	andi	$2,$2,0x00ff
	sltu	$2,$2,2
	beq	$2,$0,$L1082
	li	$2,1			# 0x1

	lui	$21,%hi(g_pkt_type)
	lw	$3,%lo(g_pkt_type)($21)
	beq	$3,$2,$L1066
	lui	$2,%hi(g_sc_config_type)

	lw	$2,%lo(g_sc_config_type)($2)
	andi	$2,$2,0x2
	beq	$2,$0,$L1119
	lui	$23,%hi(g_sc_magic)

	lui	$5,%hi(g_option_sa)
	addiu	$23,$23,%lo(g_sc_magic)
	move	$22,$0
	j	$L624
	addiu	$20,$5,%lo(g_option_sa)

$L595:
	beq	$3,$4,$L954
	subu	$2,$3,$2

$L604:
	addiu	$22,$22,1
$L1069:
	li	$2,8			# 0x8
	beq	$22,$2,$L955
	addiu	$23,$23,4

$L624:
	lw	$2,0($23)
	lw	$3,12($16)
	addiu	$4,$2,3
	bne	$3,$4,$L595
	addiu	$4,$2,35

	j	$L601
	move	$3,$0

$L596:
	lui	$5,%hi(null_mac)
	move	$4,$fp
	addiu	$5,$5,%lo(null_mac)
	li	$6,6			# 0x6
	jal	memcmp
	sw	$3,36($sp)

	beq	$2,$0,$L956
	lw	$3,36($sp)

	addiu	$3,$3,1
	li	$5,5			# 0x5
	beq	$3,$5,$L957
	li	$7,1			# 0x1

$L601:
	sll	$7,$3,2
	sll	$2,$3,5
	sw	$7,24($sp)
	sw	$2,28($sp)
	subu	$fp,$2,$7
	lw	$5,28($16)
	addu	$fp,$20,$fp
	move	$4,$fp
	li	$6,6			# 0x6
	jal	memcmp
	sw	$3,36($sp)

	bne	$2,$0,$L596
	lw	$3,36($sp)

	lbu	$2,40($16)
	li	$3,1			# 0x1
	beq	$2,$3,$L958
	li	$4,2			# 0x2

	bne	$2,$4,$L1066
	lw	$31,76($sp)

	lw	$2,12($fp)
	bne	$2,$0,$L1120
	lui	$4,%hi(g_sc_magic)

	addiu	$4,$4,%lo(g_sc_magic)
	sll	$22,$22,2
	addu	$22,$4,$22
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$5,0($22)
	lw	$4,%lo(g_p4_to_ds_hrate)($2)
	bne	$4,$0,$L569
	sw	$5,12($fp)

	lbu	$4,64($16)
	sltu	$4,$4,55
	bne	$4,$0,$L1066
	lw	$31,76($sp)

	j	$L569
	sw	$3,%lo(g_p4_to_ds_hrate)($2)

$L952:
	lbu	$4,1($3)
	bne	$4,$0,$L571
	li	$4,94			# 0x5e

	lbu	$5,2($3)
	bne	$5,$4,$L571
	nop

	lbu	$4,3($3)
	bne	$4,$0,$L571
	nop

	lbu	$4,5($3)
	beq	$4,$0,$L571
	li	$4,-128			# 0xffffffffffffff80

	j	$L571
	sb	$4,3($3)

$L572:
	bne	$2,$4,$L569
	li	$2,1			# 0x1

	bne	$3,$2,$L1066
	lw	$31,76($sp)

	lw	$4,24($16)
	lbu	$2,0($4)
	beq	$2,$3,$L959
	nop

$L684:
	li	$3,255			# 0xff
	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lbu	$3,1($4)
	bne	$3,$2,$L1078
	lw	$fp,72($sp)

	lbu	$3,2($4)
	bne	$3,$2,$L1079
	lw	$23,68($sp)

	lbu	$3,3($4)
	bne	$3,$2,$L1080
	lw	$22,64($sp)

	lbu	$3,4($4)
	bne	$3,$2,$L1081
	lw	$21,60($sp)

	lbu	$3,5($4)
	bne	$3,$2,$L1082
	lw	$20,56($sp)

	lw	$5,28($16)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L1066
	lw	$31,76($sp)

	jal	rtk_sc_is_channel_fixed
	move	$4,$17

	beq	$2,$0,$L569
	lui	$2,%hi(g_pkt_type)

	lw	$4,%lo(g_pkt_type)($2)
	li	$2,2			# 0x2
	bne	$4,$2,$L1066
	lw	$31,76($sp)

	lui	$22,%hi(g_sc_ctx)
	addiu	$22,$22,%lo(g_sc_ctx)
	lw	$2,10896($22)
	lui	$3,%hi(g_p4_magic_len)
	beq	$2,$4,$L960
	sw	$0,%lo(g_p4_magic_len)($3)

	li	$4,1			# 0x1
	bne	$2,$4,$L1066
	lw	$31,76($sp)

	lbu	$4,40($16)
	beq	$4,$2,$L961
	li	$5,2			# 0x2

	bne	$4,$5,$L1066
	lui	$18,%hi(g_p4_magic_2)

	lw	$4,%lo(g_p4_magic_2)($18)
	beq	$4,$0,$L761
	nop

	sw	$4,%lo(g_p4_magic_len)($3)
$L755:
	lbu	$2,40($16)
	li	$3,1			# 0x1
	beq	$2,$3,$L962
	li	$3,2			# 0x2

	beq	$2,$3,$L963
	move	$4,$0

	move	$2,$0
$L771:
	lui	$5,%hi(profile_pkt_index)
	lw	$3,%lo(profile_pkt_index)($5)
	li	$6,1717960704			# 0x66660000
	ori	$6,$6,0x6667
	addiu	$3,$3,1
	mult	$3,$6
	sra	$7,$3,31
	sw	$3,%lo(profile_pkt_index)($5)
	mfhi	$6
	sra	$6,$6,1
	subu	$6,$6,$7
	sll	$5,$6,2
	addu	$6,$5,$6
	bne	$3,$6,$L774
	li	$3,-1207959552			# 0xffffffffb8000000

	ori	$3,$3,0x311c
	lw	$6,0($3)
	li	$5,8388608			# 0x800000
	or	$5,$6,$5
	sw	$5,0($3)
$L774:
	beq	$4,$0,$L775
	li	$3,2			# 0x2

	lbu	$2,40($16)
	beq	$2,$3,$L964
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L953:
	lbu	$3,1($2)
	bne	$3,$0,$L1066
	lw	$31,76($sp)

	lbu	$4,2($2)
	li	$3,94			# 0x5e
	bne	$4,$3,$L1078
	lw	$fp,72($sp)

	move	$4,$0
	move	$3,$0
	li	$6,6			# 0x6
$L574:
	addu	$5,$2,$3
	lbu	$5,0($5)
	addiu	$3,$3,1
	addu	$4,$4,$5
	bne	$3,$6,$L574
	andi	$4,$4,0x00ff

	bne	$4,$0,$L569
	lui	$21,%hi(g_pkt_type)

	lw	$3,%lo(g_pkt_type)($21)
	li	$2,2			# 0x2
	beq	$3,$2,$L569
	lui	$3,%hi(g_sc_config_type)

	lw	$3,%lo(g_sc_config_type)($3)
	andi	$3,$3,0x1
	beq	$3,$0,$L569
	lui	$19,%hi(g_sc_check_level)

	lw	$3,%lo(g_sc_check_level)($19)
	beq	$3,$2,$L965
	lui	$2,%hi(fix_sa)

$L1087:
	lw	$20,%lo(fix_sa)($2)
	sw	$2,24($sp)
	li	$2,1			# 0x1
	beq	$20,$2,$L966
	lui	$4,%hi(g_sc_ctx+12)

$L576:
	lw	$2,%lo(g_sc_check_level)($19)
$L1085:
	beq	$2,$0,$L592
	nop

	jal	rtk_sc_valid_profile_packet
	move	$4,$16

	beq	$2,$0,$L1066
	lw	$31,76($sp)

$L592:
	lw	$5,28($16)
	lui	$17,%hi(g_sc_ctx+12)
	addiu	$4,$17,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lw	$5,28($16)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($16)
	lui	$20,%hi(g_sc_ctx+24)
	lui	$23,%hi(g_sc_bssid)
	lw	$4,204($2)
	jal	get_bssid
	lui	$22,%hi(null_mac)

	move	$19,$2
	addiu	$4,$20,%lo(g_sc_ctx+24)
	move	$5,$2
	jal	memcpy
	li	$6,6			# 0x6

	li	$6,6			# 0x6
	addiu	$4,$23,%lo(g_sc_bssid)
	jal	memcpy
	move	$5,$19

	addiu	$5,$23,%lo(g_sc_bssid)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	move	$4,$19
	addiu	$5,$22,%lo(null_mac)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L967
	addiu	$5,$22,%lo(null_mac)

$L593:
	lui	$2,%hi(sync_pkt_index)
$L1083:
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	li	$4,14			# 0xe
	move	$5,$0
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$2,%hi(sequence)
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	j	$L1066
	lw	$31,76($sp)

$L959:
	lbu	$2,1($4)
	bne	$2,$0,$L1066
	lw	$31,76($sp)

	lbu	$3,2($4)
	li	$2,94			# 0x5e
	bne	$3,$2,$L1078
	lw	$fp,72($sp)

	move	$3,$0
	move	$2,$0
	li	$6,6			# 0x6
$L685:
	addu	$5,$4,$2
	lbu	$5,0($5)
	addiu	$2,$2,1
	addu	$3,$3,$5
	bne	$2,$6,$L685
	andi	$3,$3,0x00ff

	bne	$3,$0,$L1066
	lw	$31,76($sp)

	lw	$5,28($16)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L937
	nop

	lui	$2,%hi(g_pkt_type)
	lw	$3,%lo(g_pkt_type)($2)
	li	$2,1			# 0x1
	beq	$3,$2,$L687
	nop

$L937:
	lw	$4,24($16)
	j	$L684
	lbu	$2,0($4)

$L687:
	lw	$2,24($16)
	lbu	$5,3($2)
	slt	$3,$5,9
	bne	$3,$0,$L569
	addiu	$18,$5,-9

	sll	$19,$18,3
	lui	$22,%hi(g_sc_ctx)
	sll	$18,$18,1
	addiu	$22,$22,%lo(g_sc_ctx)
	subu	$3,$19,$18
	addu	$3,$22,$3
	lbu	$3,314($3)
	bne	$3,$0,$L569
	lui	$3,%hi(g_sc_check_level)

	lw	$4,%lo(g_sc_check_level)($3)
	li	$3,2			# 0x2
	beq	$4,$3,$L688
	nop

$L690:
	subu	$4,$19,$18
	addu	$4,$22,$4
	addiu	$4,$4,314
	move	$3,$0
	j	$L689
	li	$6,6			# 0x6

$L691:
	lw	$2,24($16)
$L689:
	addu	$2,$2,$3
	lbu	$2,0($2)
	addiu	$3,$3,1
	sb	$2,0($4)
	bne	$3,$6,$L691
	addiu	$4,$4,1

	lui	$16,%hi(profile_pkt_index)
	lw	$7,%lo(profile_pkt_index)($16)
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	addiu	$7,$7,1
	li	$2,2			# 0x2
	beq	$3,$2,$L968
	sw	$7,%lo(profile_pkt_index)($16)

$L692:
	lw	$3,1852($22)
	sltu	$7,$7,$3
	bne	$7,$0,$L569
	lui	$4,%hi(g_sc_ctx+368)

	addiu	$4,$4,%lo(g_sc_ctx+368)
	j	$L694
	li	$2,9			# 0x9

$L696:
	beq	$4,$0,$L695
	nop

	addiu	$2,$2,1
	addiu	$4,$4,6
$L694:
	sltu	$5,$2,$3
	bne	$5,$0,$L696
	nop

$L695:
	bne	$3,$2,$L569
	nop

	jal	rtk_sc_check_profile
	move	$4,$17

	j	$L1066
	lw	$31,76($sp)

$L967:
	addiu	$4,$17,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L1083
	lui	$2,%hi(sync_pkt_index)

	move	$4,$19
	addiu	$5,$17,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	beq	$2,$0,$L593
	lui	$2,%hi(g_sc_debug)

	lw	$2,%lo(g_sc_debug)($2)
	beq	$2,$0,$L594
	sw	$0,%lo(finish_sync)($18)

	lui	$4,%hi($LC26)
	jal	printk
	addiu	$4,$4,%lo($LC26)

	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$20,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC27)
	jal	printk
	addiu	$4,$4,%lo($LC27)

	addiu	$4,$17,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

$L594:
	lbu	$5,40($16)
	jal	rtk_sc_set_value
	li	$4,19			# 0x13

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$20,%lo(g_sc_ctx+24)

	lw	$4,24($sp)
	li	$2,1			# 0x1
	sw	$2,%lo(g_pkt_type)($21)
	j	$L593
	sw	$2,%lo(fix_sa)($4)

$L966:
	lw	$5,28($16)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcmp
	li	$6,6			# 0x6

	bne	$2,$0,$L577
	lw	$3,24($sp)

	lw	$2,24($16)
	lui	$22,%hi(g_sc_ctx)
	addiu	$22,$22,%lo(g_sc_ctx)
	lbu	$5,3($2)
	sll	$3,$5,1
	sll	$4,$5,3
	subu	$4,$4,$3
	addu	$3,$22,$4
	lbu	$3,260($3)
	bne	$3,$0,$L569
	slt	$3,$5,9

	bne	$3,$0,$L578
	addu	$4,$22,$4

	addiu	$3,$5,-9
	sll	$4,$3,3
	sll	$3,$3,1
	subu	$4,$4,$3
	addu	$3,$4,$22
	lbu	$3,314($3)
	bne	$3,$0,$L569
	addu	$4,$22,$4

	addiu	$4,$4,314
	li	$6,6			# 0x6
$L580:
	addu	$2,$2,$3
	lbu	$2,0($2)
	addiu	$3,$3,1
	sb	$2,0($4)
	beq	$3,$6,$L579
	addiu	$4,$4,1

	j	$L580
	lw	$2,24($16)

$L955:
	lui	$23,%hi(g_sc_ctx)
	lui	$2,%hi(g_option_sa+12)
	addiu	$23,$23,%lo(g_sc_ctx)
	addiu	$2,$2,%lo(g_option_sa+12)
	sw	$2,28($sp)
	sw	$0,24($sp)
	j	$L683
	move	$fp,$23

$L971:
	lw	$4,0($7)
	lw	$6,10896($23)
$L1067:
	li	$3,1			# 0x1
	beq	$6,$3,$L969
	move	$22,$23

	li	$3,2			# 0x2
	beq	$6,$3,$L970
	sltu	$5,$4,$2

$L625:
	lw	$2,28($sp)
$L1084:
	lw	$7,24($sp)
	addiu	$2,$2,28
	addiu	$7,$7,1
	sw	$2,28($sp)
	li	$2,5			# 0x5
	beq	$7,$2,$L569
	sw	$7,24($sp)

$L683:
	lw	$5,24($sp)
	li	$6,6			# 0x6
	sll	$2,$5,2
	sll	$4,$5,5
	lw	$5,28($16)
	subu	$4,$4,$2
	jal	memcmp
	addu	$4,$20,$4

	bne	$2,$0,$L1084
	lw	$2,28($sp)

	lw	$7,28($sp)
	lw	$2,-4($7)
	bne	$2,$0,$L971
	lw	$3,28($sp)

	lw	$4,0($3)
	beq	$4,$0,$L625
	nop

	j	$L1067
	lw	$6,10896($23)

$L578:
	addiu	$4,$4,260
	move	$3,$0
	li	$6,6			# 0x6
$L585:
	addu	$2,$2,$3
	lbu	$2,0($2)
	addiu	$3,$3,1
	sb	$2,0($4)
	beq	$3,$6,$L584
	addiu	$4,$4,1

	j	$L585
	lw	$2,24($16)

$L577:
	lw	$2,%lo(fix_sa)($3)
	bne	$2,$20,$L576
	lui	$2,%hi(g_sc_ignore_overlap)

	lw	$2,%lo(g_sc_ignore_overlap)($2)
	beq	$2,$0,$L1085
	lw	$2,%lo(g_sc_check_level)($19)

	j	$L1066
	lw	$31,76($sp)

$L584:
	lui	$16,%hi(sync_pkt_index)
	lw	$2,%lo(sync_pkt_index)($16)
	lui	$3,%hi(g_sc_debug)
	li	$4,1			# 0x1
	lw	$3,%lo(g_sc_debug)($3)
	sll	$5,$4,$5
	or	$5,$5,$2
	li	$2,2			# 0x2
	bne	$3,$2,$L582
	sw	$5,%lo(sync_pkt_index)($16)

	lui	$4,%hi($LC25)
	jal	printk
	addiu	$4,$4,%lo($LC25)

	lw	$5,%lo(sync_pkt_index)($16)
$L582:
	andi	$5,$5,0x1ff
	li	$2,511			# 0x1ff
	bne	$5,$2,$L1066
	lw	$31,76($sp)

	lui	$20,%hi(g_sc_ctx+2416)
	addiu	$20,$20,%lo(g_sc_ctx+2416)
	move	$19,$0
	move	$21,$22
	lui	$23,%hi(pp)
$L586:
	lw	$2,2672($22)
	slt	$2,$19,$2
	beq	$2,$0,$L972
	lw	$2,24($sp)

	lw	$4,0($20)
	beq	$4,$0,$L587
	sw	$4,%lo(pp)($23)

	lw	$2,4($4)
	andi	$2,$2,0x2
	bne	$2,$0,$L973
	move	$5,$21

$L587:
	addiu	$19,$19,1
$L1086:
	j	$L586
	addiu	$20,$20,4

$L972:
	move	$4,$17
	jal	rtk_sc_restart_simple_config
	sw	$0,%lo(fix_sa)($2)

	j	$L1066
	lw	$31,76($sp)

$L973:
	jal	rtk_sc_check_pattern
	move	$6,$17

	bne	$2,$0,$L1086
	addiu	$19,$19,1

	addiu	$19,$19,-1
	li	$2,1			# 0x1
	li	$4,14			# 0xe
	move	$5,$0
	jal	rtk_sc_set_value
	sw	$2,%lo(finish_sync)($18)

	lui	$2,%hi(profile_pkt_index)
	lw	$3,1852($21)
	lw	$2,%lo(profile_pkt_index)($2)
	sltu	$2,$2,$3
	bne	$2,$0,$L569
	sw	$0,%lo(sync_pkt_index)($16)

	lui	$4,%hi(g_sc_ctx+368)
	addiu	$4,$4,%lo(g_sc_ctx+368)
	li	$2,9			# 0x9
$L588:
	sltu	$5,$2,$3
	beq	$5,$0,$L589
	nop

	beq	$4,$0,$L589
	addiu	$4,$4,6

	j	$L588
	addiu	$2,$2,1

$L962:
	lui	$2,%hi(g_p4_magic_1)
	lw	$2,%lo(g_p4_magic_1)($2)
	bne	$2,$0,$L939
	nop

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L965:
	jal	rtk_sc_valid_profile_packet
	move	$4,$16

	bne	$2,$0,$L1087
	lui	$2,%hi(fix_sa)

	j	$L1066
	lw	$31,76($sp)

$L954:
	ext	$4,$2,4,6
	li	$3,2			# 0x2
	bne	$4,$3,$L604
	andi	$2,$2,0xf

	li	$4,3			# 0x3
	bne	$2,$4,$L604
	lui	$7,%hi(g_option_sa+8)

	addiu	$7,$7,%lo(g_option_sa+8)
	move	$3,$0
$L619:
	sll	$4,$3,5
	sll	$2,$3,2
	sw	$4,28($sp)
	sw	$2,24($sp)
	subu	$fp,$4,$2
	lw	$5,28($16)
	addu	$fp,$20,$fp
	move	$4,$fp
	li	$6,6			# 0x6
	sw	$3,36($sp)
	jal	memcmp
	sw	$7,32($sp)

	lw	$3,36($sp)
	beq	$2,$0,$L974
	lw	$7,32($sp)

	lui	$5,%hi(null_mac)
	move	$4,$fp
	addiu	$5,$5,%lo(null_mac)
	li	$6,6			# 0x6
	sw	$3,36($sp)
	jal	memcmp
	sw	$7,32($sp)

	lw	$3,36($sp)
	bne	$2,$0,$L610
	lw	$7,32($sp)

	lbu	$2,40($16)
	li	$4,1			# 0x1
	beq	$2,$4,$L975
	li	$5,2			# 0x2

	beq	$2,$5,$L976
	nop

$L612:
	move	$8,$0
$L613:
	lui	$4,%hi(g_p4_to_ds_hrate)
	lw	$2,%lo(g_p4_to_ds_hrate)($4)
	bne	$2,$0,$L1088
	li	$2,1			# 0x1

	lbu	$2,64($16)
	sltu	$2,$2,55
	bne	$2,$0,$L1088
	li	$2,1			# 0x1

	li	$5,1			# 0x1
	sw	$5,%lo(g_p4_to_ds_hrate)($4)
$L1088:
	beq	$8,$2,$L977
	move	$4,$fp

$L610:
	lbu	$2,40($16)
	li	$4,2			# 0x2
	beq	$2,$4,$L978
	li	$4,1			# 0x1

	bne	$2,$4,$L618
	lui	$5,%hi(g_sc_ctx)

	lhu	$2,36($16)
	addiu	$5,$5,%lo(g_sc_ctx)
	sh	$2,10808($5)
$L618:
	addiu	$3,$3,1
	li	$2,5			# 0x5
	bne	$3,$2,$L619
	addiu	$7,$7,28

	lbu	$2,40($16)
	li	$3,1			# 0x1
	beq	$2,$3,$L979
	li	$3,2			# 0x2

	beq	$2,$3,$L927
	lui	$fp,%hi(g_p4_option_num)

$L621:
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	lw	$5,28($16)
	li	$6,6			# 0x6
	sw	$3,36($sp)
	mfhi	$4
	srl	$4,$4,2
	sll	$7,$4,2
	addu	$4,$7,$4
	subu	$2,$2,$4
	sll	$4,$2,5
	sll	$2,$2,2
	subu	$4,$4,$2
	jal	memcpy
	addu	$4,$20,$4

	lw	$2,%lo(g_p4_option_num)($fp)
	lw	$3,36($sp)
	multu	$2,$3
	mfhi	$3
	srl	$3,$3,2
	sll	$4,$3,2
	addu	$3,$4,$3
	subu	$3,$2,$3
	sll	$4,$3,5
	sll	$3,$3,2
	subu	$3,$4,$3
	addu	$3,$20,$3
	lw	$4,8($3)
	bne	$4,$0,$L622
	nop

	lw	$3,12($3)
	bne	$3,$0,$L1089
	lui	$4,%hi($LC32)

$L623:
	addiu	$2,$2,1
	j	$L604
	sw	$2,%lo(g_p4_option_num)($fp)

$L978:
	lhu	$2,36($16)
	lui	$5,%hi(g_sc_ctx)
	addiu	$5,$5,%lo(g_sc_ctx)
	j	$L618
	sh	$2,10810($5)

$L975:
	lw	$2,0($7)
	bne	$2,$0,$L612
	nop

	lw	$2,0($23)
$L1068:
	li	$8,1			# 0x1
	j	$L613
	sw	$2,0($7)

$L976:
	lw	$2,4($7)
	bne	$2,$0,$L612
	nop

	j	$L1068
	lw	$2,0($23)

$L977:
	lw	$5,28($16)
	li	$6,6			# 0x6
	sw	$3,36($sp)
	jal	memcpy
	sw	$8,32($sp)

	lw	$3,36($sp)
	lui	$22,%hi(g_sc_ctx)
	addiu	$22,$22,%lo(g_sc_ctx)
	lui	$2,%hi(g_p4_option_num)
	lw	$5,%lo(g_p4_option_num)($2)
	lui	$4,%hi(g_sc_debug)
	sb	$3,10806($22)
	lw	$8,32($sp)
	lw	$4,%lo(g_sc_debug)($4)
	addiu	$5,$5,1
	sw	$5,%lo(g_p4_option_num)($2)
	sw	$8,10896($22)
	beq	$4,$0,$L615
	sb	$8,10805($22)

	lui	$4,%hi($LC31)
	jal	printk
	addiu	$4,$4,%lo($LC31)

	lw	$5,24($sp)
	lw	$3,28($sp)
	subu	$4,$3,$5
	addu	$4,$20,$4
	jal	bytedump
	li	$5,6			# 0x6

$L615:
	lw	$5,28($16)
	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	memcpy
	li	$6,6			# 0x6

	lw	$5,28($16)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($16)
	lui	$17,%hi(g_sc_bssid)
	jal	get_bssid
	lw	$4,204($2)

	lui	$4,%hi(g_sc_ctx+24)
	move	$18,$2
	addiu	$4,$4,%lo(g_sc_ctx+24)
	move	$5,$2
	jal	memcpy
	li	$6,6			# 0x6

	li	$6,6			# 0x6
	move	$5,$18
	jal	memcpy
	addiu	$4,$17,%lo(g_sc_bssid)

	addiu	$5,$17,%lo(g_sc_bssid)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L980
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L980:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L622:
	lui	$4,%hi($LC32)
$L1089:
	addiu	$4,$4,%lo($LC32)
	jal	printk
	li	$5,2076			# 0x81c

	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	li	$5,6			# 0x6
	sw	$3,36($sp)
	mfhi	$4
	srl	$4,$4,2
	sll	$6,$4,2
	addu	$4,$6,$4
	subu	$2,$2,$4
	sll	$4,$2,5
	sll	$2,$2,2
	subu	$4,$4,$2
	jal	bytedump
	addu	$4,$20,$4

	lw	$2,%lo(g_p4_option_num)($fp)
	lw	$3,36($sp)
	lui	$4,%hi($LC33)
	addiu	$4,$4,%lo($LC33)
	multu	$2,$3
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$3,$2,$3
	sll	$2,$3,5
	sll	$3,$3,2
	subu	$2,$2,$3
	addu	$2,$20,$2
	lw	$6,12($2)
	jal	printk
	lw	$5,8($2)

	lui	$3,%hi(g_sc_ctx)
	li	$4,1			# 0x1
	addiu	$3,$3,%lo(g_sc_ctx)
	lw	$2,%lo(g_p4_option_num)($fp)
	j	$L623
	sw	$4,10896($3)

$L927:
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	lw	$4,0($23)
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$2,$2,$3
	sll	$3,$2,5
	sll	$2,$2,2
	subu	$2,$3,$2
	addu	$2,$20,$2
	j	$L621
	sw	$4,12($2)

$L979:
	lui	$fp,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	lw	$4,0($23)
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$2,$2,$3
	sll	$3,$2,5
	sll	$2,$2,2
	subu	$2,$3,$2
	addu	$2,$20,$2
	j	$L621
	sw	$4,8($2)

$L974:
	lbu	$2,40($16)
	li	$3,1			# 0x1
	beq	$2,$3,$L981
	li	$3,2			# 0x2

	beq	$2,$3,$L982
	nop

$L607:
	lui	$2,%hi(g_p4_to_ds_hrate)
$L1090:
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	bne	$3,$0,$L608
	nop

	lbu	$3,64($16)
	sltu	$3,$3,55
	bne	$3,$0,$L608
	li	$3,1			# 0x1

	sw	$3,%lo(g_p4_to_ds_hrate)($2)
$L608:
	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L983
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$3,36($16)
	lui	$2,%hi(g_sc_ctx+10808)
	j	$L569
	sh	$3,%lo(g_sc_ctx+10808)($2)

$L982:
	lw	$2,12($fp)
	bne	$2,$0,$L1090
	lui	$2,%hi(g_p4_to_ds_hrate)

	lui	$7,%hi(g_sc_magic)
	sll	$22,$22,2
	addiu	$7,$7,%lo(g_sc_magic)
	addu	$22,$7,$22
	lw	$2,0($22)
	j	$L607
	sw	$2,12($fp)

$L983:
	lhu	$3,36($16)
	lui	$2,%hi(g_sc_ctx+10810)
	j	$L569
	sh	$3,%lo(g_sc_ctx+10810)($2)

$L981:
	lw	$2,8($fp)
	bne	$2,$0,$L1090
	lui	$2,%hi(g_p4_to_ds_hrate)

	lui	$5,%hi(g_sc_magic)
	sll	$22,$22,2
	addiu	$5,$5,%lo(g_sc_magic)
	addu	$22,$5,$22
	lw	$2,0($22)
	j	$L607
	sw	$2,8($fp)

$L688:
	move	$4,$16
	jal	rtk_sc_valid_profile_packet
	sw	$5,32($sp)

	beq	$2,$0,$L569
	lw	$5,32($sp)

	j	$L690
	lw	$2,24($16)

$L957:
	lbu	$2,40($16)
	beq	$2,$7,$L984
	li	$3,2			# 0x2

	beq	$2,$3,$L926
	lui	$fp,%hi(g_p4_option_num)

$L603:
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$4,-859045888			# 0xffffffffcccc0000
	ori	$4,$4,0xcccd
	multu	$2,$4
	lw	$5,28($16)
	li	$6,6			# 0x6
	mfhi	$3
	srl	$3,$3,2
	sll	$4,$3,2
	addu	$3,$4,$3
	subu	$2,$2,$3
	sll	$4,$2,5
	sll	$2,$2,2
	subu	$4,$4,$2
	jal	memcpy
	addu	$4,$20,$4

	lw	$3,%lo(g_p4_option_num)($fp)
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	addiu	$3,$3,1
	lui	$5,%hi(g_sc_ctx)
	sw	$3,%lo(g_p4_option_num)($fp)
	addiu	$5,$5,%lo(g_sc_ctx)
	li	$3,2			# 0x2
	beq	$2,$0,$L604
	sw	$3,10896($5)

	lui	$4,%hi($LC28)
	jal	printk
	addiu	$4,$4,%lo($LC28)

	lui	$7,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($7)
	li	$4,-859045888			# 0xffffffffcccc0000
	ori	$4,$4,0xcccd
	multu	$2,$4
	li	$5,6			# 0x6
	mfhi	$3
	srl	$3,$3,2
	sll	$4,$3,2
	addu	$3,$4,$3
	subu	$2,$2,$3
	sll	$4,$2,5
	sll	$2,$2,2
	subu	$4,$4,$2
	jal	bytedump
	addu	$4,$20,$4

	lui	$7,%hi(g_p4_option_num)
	lw	$5,%lo(g_p4_option_num)($7)
	lw	$6,12($16)
	lui	$4,%hi($LC29)
	jal	printk
	addiu	$4,$4,%lo($LC29)

	lui	$3,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($3)
	li	$5,-859045888			# 0xffffffffcccc0000
	ori	$5,$5,0xcccd
	multu	$2,$5
	lui	$4,%hi($LC30)
	addiu	$4,$4,%lo($LC30)
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$3,$2,$3
	sll	$2,$3,5
	sll	$3,$3,2
	subu	$2,$2,$3
	addu	$2,$2,$20
	lw	$6,12($2)
	jal	printk
	lw	$5,8($2)

	j	$L1069
	addiu	$22,$22,1

$L579:
	lui	$2,%hi(profile_pkt_index)
	lw	$6,%lo(profile_pkt_index)($2)
	lui	$3,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($3)
	addiu	$6,$6,1
	sw	$6,%lo(profile_pkt_index)($2)
	li	$2,2			# 0x2
	beq	$3,$2,$L581
	lui	$16,%hi(sync_pkt_index)

	j	$L582
	lw	$5,%lo(sync_pkt_index)($16)

$L970:
	lw	$3,12($16)
	move	$7,$2
	movz	$7,$4,$5
	move	$5,$7
	addiu	$7,$7,1118
	sltu	$7,$7,$3
	beq	$7,$0,$L660
	addiu	$7,$5,1135

	sltu	$7,$7,$3
	bne	$7,$0,$L660
	li	$19,5			# 0x5

	sw	$6,10900($fp)
$L661:
	lui	$3,%hi(g_p4_magic_2)
	lui	$5,%hi(g_p4_magic_1)
	sw	$2,%lo(g_p4_magic_1)($5)
	beq	$2,$0,$L666
	sw	$4,%lo(g_p4_magic_2)($3)

	beq	$4,$0,$L666
	nop

	beq	$2,$4,$L666
	sltu	$5,$4,$2

	beq	$5,$0,$L1091
	sltu	$5,$2,$4

	addiu	$5,$2,-2
	bne	$4,$5,$L569
	sltu	$5,$2,$4

$L1091:
	beq	$5,$0,$L666
	addiu	$5,$4,-2

	bne	$2,$5,$L1066
	lw	$31,76($sp)

$L666:
	lbu	$5,40($16)
	li	$6,1			# 0x1
	beq	$5,$6,$L985
	nop

$L668:
	li	$2,2			# 0x2
	beq	$5,$2,$L986
	lw	$2,%lo(g_p4_magic_2)($3)

$L669:
	lw	$5,1852($23)
	sltu	$2,$5,257
	beq	$2,$0,$L987
	nop

	beq	$5,$0,$L569
	lui	$22,%hi(g_sc_debug)

	lw	$3,%lo(g_sc_debug)($22)
	li	$2,2			# 0x2
	bne	$3,$2,$L678
	nop

	lui	$4,%hi($LC37)
	jal	printk
	addiu	$4,$4,%lo($LC37)

$L678:
	lw	$5,28($16)
	lui	$4,%hi(g_sc_ctx+12)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_sc_ctx+12)

	lw	$5,28($16)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($16)
	jal	get_bssid
	lw	$4,204($2)

	move	$3,$2
	lui	$2,%hi(g_sc_ctx+24)
	move	$5,$3
	li	$6,6			# 0x6
	addiu	$4,$2,%lo(g_sc_ctx+24)
	jal	memcpy
	sw	$3,36($sp)

	lw	$3,36($sp)
	lui	$4,%hi(g_sc_bssid)
	addiu	$4,$4,%lo(g_sc_bssid)
	move	$5,$3
	jal	memcpy
	li	$6,6			# 0x6

	lui	$5,%hi(g_sc_bssid)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_bssid)

	lw	$2,%lo(g_sc_debug)($22)
	li	$3,1			# 0x1
	bne	$2,$0,$L988
	sw	$3,%lo(finish_sync)($18)

$L679:
	lbu	$5,40($16)
$L1070:
	li	$4,19			# 0x13
	jal	rtk_sc_set_value
	lui	$22,%hi(fix_sa)

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,5			# 0x5
	jal	rtk_sc_set_value
	li	$5,1			# 0x1

	lui	$3,%hi(g_sc_ctx+24)
	addiu	$5,$3,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	li	$2,1			# 0x1
	sw	$2,%lo(fix_sa)($22)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	li	$4,14			# 0xe
	lui	$2,%hi(sequence)
	move	$5,$0
	jal	rtk_sc_set_value
	sw	$0,%lo(sequence)($2)

	lui	$7,%hi(g_sc_ctx+2424)
	addiu	$7,$7,%lo(g_sc_ctx+2424)
	li	$3,2			# 0x2
$L680:
	lw	$2,2672($23)
	slt	$2,$3,$2
	beq	$2,$0,$L625
	lui	$5,%hi(pp)

	lw	$4,0($7)
	beq	$4,$0,$L681
	sw	$4,%lo(pp)($5)

	lw	$2,4($4)
	andi	$2,$2,0x2
	bne	$2,$0,$L989
	lui	$5,%hi(g_sc_ctx)

$L681:
	addiu	$3,$3,1
	j	$L680
	addiu	$7,$7,4

$L988:
	lui	$4,%hi($LC26)
	jal	printk
	addiu	$4,$4,%lo($LC26)

	lui	$4,%hi(g_sc_ctx+24)
	li	$5,6			# 0x6
	jal	bytedump
	addiu	$4,$4,%lo(g_sc_ctx+24)

	lui	$4,%hi($LC27)
	jal	printk
	addiu	$4,$4,%lo($LC27)

	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

	lw	$3,10900($23)
	li	$2,2			# 0x2
	bne	$3,$2,$L679
	nop

	lw	$5,1852($fp)
	lui	$4,%hi($LC38)
	jal	printk
	addiu	$4,$4,%lo($LC38)

	j	$L1070
	lbu	$5,40($16)

$L987:
	jal	rtk_sc_restart_simple_config
	move	$4,$17

	j	$L1066
	lw	$31,76($sp)

$L989:
	addiu	$5,$5,%lo(g_sc_ctx)
	move	$6,$17
	sw	$3,36($sp)
	jal	rtk_sc_check_pattern
	sw	$7,32($sp)

	lw	$3,36($sp)
	bne	$2,$0,$L681
	lw	$7,32($sp)

	li	$2,1			# 0x1
	li	$3,2			# 0x2
	sw	$22,24($sp)
	sw	$2,%lo(fix_sa)($22)
	sw	$3,%lo(g_pkt_type)($21)
	j	$L569
	sw	$2,%lo(finish_sync)($18)

$L986:
	beq	$2,$0,$L669
	li	$2,1			# 0x1

	beq	$19,$2,$L990
	li	$3,5			# 0x5

	beq	$19,$3,$L991
	li	$3,268369920			# 0xfff0000

	lw	$5,12($16)
	subu	$2,$2,$19
	ori	$3,$3,0xfc00
	addu	$5,$5,$3
	sll	$3,$2,5
	sll	$2,$2,3
	subu	$2,$3,$2
	subu	$4,$5,$4
	addu	$2,$4,$2
	addiu	$3,$19,-1
	sll	$3,$3,6
	sll	$2,$2,4
	addu	$2,$3,$2
	sw	$2,1852($23)
$L674:
	lui	$2,%hi(g_p4_to_ds_hrate)
$L1092:
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	bne	$3,$0,$L669
	nop

	lbu	$3,64($16)
	sltu	$3,$3,55
	bne	$3,$0,$L669
	nop

	li	$3,1			# 0x1
	j	$L669
	sw	$3,%lo(g_p4_to_ds_hrate)($2)

$L985:
	beq	$2,$0,$L669
	nop

	beq	$19,$5,$L992
	li	$6,5			# 0x5

	beq	$19,$6,$L993
	li	$6,268369920			# 0xfff0000

	lw	$7,12($16)
	subu	$5,$5,$19
	ori	$6,$6,0xfc00
	addu	$7,$7,$6
	sll	$6,$5,5
	sll	$5,$5,3
	subu	$5,$6,$5
	subu	$2,$7,$2
	addu	$2,$2,$5
	addiu	$5,$19,-1
	sll	$5,$5,6
	sll	$2,$2,4
	addu	$2,$5,$2
	sw	$2,1852($23)
	j	$L668
	lbu	$5,40($16)

$L991:
	lw	$2,12($16)
	subu	$4,$2,$4
	li	$2,1124			# 0x464
	beq	$4,$2,$L994
	li	$2,1125			# 0x465

	bne	$4,$2,$L1092
	lui	$2,%hi(g_p4_to_ds_hrate)

	li	$2,107			# 0x6b
	j	$L674
	sw	$2,1852($23)

$L990:
	lw	$3,12($16)
	li	$2,268369920			# 0xfff0000
	ori	$2,$2,0xfc01
	addu	$2,$3,$2
	subu	$4,$2,$4
	sll	$4,$4,4
	j	$L674
	sw	$4,1852($23)

$L994:
	li	$2,86			# 0x56
	j	$L674
	sw	$2,1852($23)

$L660:
	addiu	$6,$5,1094
	sltu	$6,$6,$3
	beq	$6,$0,$L1093
	addiu	$6,$5,1070

	addiu	$6,$5,1111
	sltu	$6,$6,$3
	bne	$6,$0,$L662
	addiu	$6,$5,1070

	li	$3,1			# 0x1
	sw	$3,10900($23)
	j	$L661
	li	$19,4			# 0x4

$L581:
	li	$2,1717960704			# 0x66660000
	ori	$2,$2,0x6667
	mult	$6,$2
	sra	$3,$6,31
	mfhi	$2
	sra	$2,$2,2
	subu	$2,$2,$3
	sll	$3,$2,3
	sll	$2,$2,1
	addu	$2,$2,$3
	bne	$6,$2,$L583
	li	$2,-1207959552			# 0xffffffffb8000000

	ori	$2,$2,0x311c
	lw	$4,0($2)
	li	$3,8388608			# 0x800000
	or	$3,$4,$3
	sw	$3,0($2)
$L583:
	lui	$4,%hi($LC24)
	addiu	$4,$4,%lo($LC24)
	jal	printk
	lui	$16,%hi(sync_pkt_index)

	j	$L582
	lw	$5,%lo(sync_pkt_index)($16)

$L662:
$L1093:
	sltu	$6,$6,$3
	beq	$6,$0,$L1094
	addiu	$6,$5,1046

	addiu	$6,$5,1087
	sltu	$6,$6,$3
	bne	$6,$0,$L663
	addiu	$6,$5,1046

	li	$3,1			# 0x1
	sw	$3,10900($23)
	j	$L661
	li	$19,3			# 0x3

$L993:
	lw	$5,12($16)
	subu	$2,$5,$2
	li	$5,1124			# 0x464
	beq	$2,$5,$L995
	nop

	li	$5,1125			# 0x465
	bne	$2,$5,$L669
	li	$2,107			# 0x6b

	sw	$2,1852($23)
	j	$L668
	lbu	$5,40($16)

$L992:
	lw	$6,12($16)
	li	$5,268369920			# 0xfff0000
	ori	$5,$5,0xfc01
	addu	$5,$6,$5
	subu	$2,$5,$2
	sll	$2,$2,4
	sw	$2,1852($23)
	j	$L668
	lbu	$5,40($16)

$L663:
$L1094:
	sltu	$6,$6,$3
	beq	$6,$0,$L1095
	addiu	$6,$5,1022

	addiu	$6,$5,1063
	sltu	$6,$6,$3
	bne	$6,$0,$L664
	addiu	$6,$5,1022

	li	$3,1			# 0x1
	sw	$3,10900($23)
	j	$L661
	li	$19,2			# 0x2

$L995:
	li	$2,86			# 0x56
	sw	$2,1852($23)
	j	$L668
	lbu	$5,40($16)

$L664:
$L1095:
	sltu	$6,$6,$3
	beq	$6,$0,$L665
	addiu	$5,$5,1039

	sltu	$3,$5,$3
	bne	$3,$0,$L665
	li	$3,1			# 0x1

	sw	$3,10900($23)
	j	$L661
	li	$19,1			# 0x1

$L961:
	lui	$18,%hi(g_p4_magic_1)
	lw	$2,%lo(g_p4_magic_1)($18)
	beq	$2,$0,$L754
	lui	$4,%hi(g_sc_magic+32)

	j	$L755
	sw	$2,%lo(g_p4_magic_len)($3)

$L964:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L956:
	lbu	$2,40($16)
	li	$3,1			# 0x1
	beq	$2,$3,$L996
	li	$4,2			# 0x2

	beq	$2,$4,$L997
	lui	$7,%hi(g_sc_magic)

$L600:
	lw	$5,28($16)
	move	$4,$fp
	lui	$17,%hi(g_p4_option_num)
	jal	memcpy
	li	$6,6			# 0x6

	lw	$3,%lo(g_p4_option_num)($17)
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	addiu	$3,$3,1
	li	$5,2			# 0x2
	lui	$4,%hi(g_sc_ctx+10896)
	sw	$5,%lo(g_sc_ctx+10896)($4)
	beq	$2,$0,$L569
	sw	$3,%lo(g_p4_option_num)($17)

	lui	$4,%hi($LC28)
	jal	printk
	addiu	$4,$4,%lo($LC28)

	lw	$3,28($sp)
	lw	$4,24($sp)
	li	$5,6			# 0x6
	subu	$2,$3,$4
	addu	$20,$20,$2
	jal	bytedump
	move	$4,$20

	lw	$5,%lo(g_p4_option_num)($17)
	lw	$6,12($16)
	lui	$4,%hi($LC29)
	jal	printk
	addiu	$4,$4,%lo($LC29)

	lw	$6,12($20)
	lw	$5,8($20)
	lui	$4,%hi($LC30)
	jal	printk
	addiu	$4,$4,%lo($LC30)

	j	$L1066
	lw	$31,76($sp)

$L997:
	sll	$22,$22,2
	addiu	$7,$7,%lo(g_sc_magic)
	addu	$22,$7,$22
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$5,0($22)
	lw	$4,%lo(g_p4_to_ds_hrate)($2)
	bne	$4,$0,$L600
	sw	$5,12($fp)

	lbu	$4,64($16)
	sltu	$4,$4,55
	bne	$4,$0,$L600
	nop

	j	$L600
	sw	$3,%lo(g_p4_to_ds_hrate)($2)

$L969:
	lbu	$3,40($16)
	beq	$3,$6,$L998
	li	$5,2			# 0x2

	beq	$3,$5,$L999
	nop

$L630:
	beq	$19,$0,$L625
	nop

$L632:
	lui	$7,%hi(g_p4_magic_1)
	lui	$3,%hi(g_p4_magic_2)
	sw	$2,%lo(g_p4_magic_1)($7)
	beq	$2,$0,$L633
	sw	$4,%lo(g_p4_magic_2)($3)

	beq	$4,$0,$L633
	nop

	beq	$2,$4,$L633
	sltu	$5,$4,$2

	beq	$5,$0,$L1096
	sltu	$5,$2,$4

	subu	$5,$2,$4
	li	$8,2			# 0x2
	bne	$5,$8,$L1000
	sltu	$5,$2,$4

$L1096:
	beq	$5,$0,$L633
	subu	$5,$4,$2

	li	$8,2			# 0x2
	bne	$5,$8,$L1001
	move	$5,$0

$L633:
	lbu	$5,40($16)
	li	$6,1			# 0x1
	beq	$5,$6,$L1002
	nop

$L637:
	li	$2,2			# 0x2
	beq	$5,$2,$L1003
	lw	$2,%lo(g_p4_magic_2)($3)

$L638:
	lw	$2,1852($23)
	sltu	$4,$2,257
	beq	$4,$0,$L1004
	nop

	beq	$2,$0,$L1005
	lui	$4,%hi(g_sc_ctx+12)

	lw	$5,28($16)
	li	$6,6			# 0x6
	addiu	$4,$4,%lo(g_sc_ctx+12)
	sw	$3,36($sp)
	jal	memcpy
	sw	$7,32($sp)

	lw	$5,28($16)
	lui	$4,%hi(g_smac)
	li	$6,6			# 0x6
	jal	memcpy
	addiu	$4,$4,%lo(g_smac)

	lw	$2,0($16)
	jal	get_bssid
	lw	$4,204($2)

	move	$22,$2
	lui	$2,%hi(g_sc_ctx+24)
	li	$6,6			# 0x6
	addiu	$4,$2,%lo(g_sc_ctx+24)
	jal	memcpy
	move	$5,$22

	lui	$4,%hi(g_sc_bssid)
	addiu	$4,$4,%lo(g_sc_bssid)
	move	$5,$22
	jal	memcpy
	li	$6,6			# 0x6

	lui	$5,%hi(g_sc_bssid)
	li	$4,26			# 0x1a
	jal	rtk_sc_set_string_value
	addiu	$5,$5,%lo(g_sc_bssid)

	lw	$2,1852($fp)
	li	$4,1			# 0x1
	sw	$4,10900($fp)
	andi	$5,$2,0xf
	ext	$2,$2,4,8
	sb	$2,3386($fp)
	sw	$4,%lo(finish_sync)($18)
	lw	$3,36($sp)
	move	$4,$0
	beq	$5,$0,$L645
	lw	$7,32($sp)

	addiu	$2,$2,1
	andi	$2,$2,0x00ff
	sb	$2,3386($fp)
	move	$4,$5
$L645:
	lbu	$6,3386($23)
	sll	$5,$2,5
	sll	$2,$2,3
	addiu	$13,$6,2701
	subu	$2,$5,$2
	sll	$13,$13,2
	addiu	$8,$6,-1
	lui	$5,%hi(g_sc_ctx+10812)
	sb	$2,3387($23)
	addu	$13,$23,$13
	addiu	$5,$5,%lo(g_sc_ctx+10812)
	move	$2,$0
	li	$12,24			# 0x18
	li	$11,16			# 0x10
	addu	$10,$23,$8
	addiu	$9,$4,8
$L646:
	slt	$14,$2,$6
	beq	$14,$0,$L1006
	nop

	beq	$4,$0,$L1097
	addu	$14,$23,$2

	beq	$8,$2,$L1007
	nop

$L1097:
	sb	$12,3388($14)
	addiu	$2,$2,1
	sw	$11,0($5)
	j	$L646
	addiu	$5,$5,4

$L1006:
	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$0,$L1008
	nop

	lbu	$5,40($16)
$L1071:
	li	$4,19			# 0x13
	jal	rtk_sc_set_value
	lui	$22,%hi(fix_sa)

	li	$4,13			# 0xd
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	li	$4,7			# 0x7
	jal	rtk_sc_set_value
	li	$5,2			# 0x2

	lui	$7,%hi(g_sc_ctx+24)
	addiu	$5,$7,%lo(g_sc_ctx+24)
	jal	rtk_sc_set_string_value
	li	$4,26			# 0x1a

	li	$4,14			# 0xe
	jal	rtk_sc_set_value
	move	$5,$0

	li	$2,1			# 0x1
	sw	$2,%lo(fix_sa)($22)
	lui	$2,%hi(sync_pkt_index)
	sw	$0,%lo(sync_pkt_index)($2)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	lui	$7,%hi(g_sc_ctx+2424)
	lui	$2,%hi(sequence)
	sw	$0,%lo(sequence)($2)
	addiu	$7,$7,%lo(g_sc_ctx+2424)
	li	$3,2			# 0x2
$L655:
	lw	$2,2672($23)
	slt	$2,$3,$2
	beq	$2,$0,$L625
	lui	$2,%hi(pp)

	lw	$4,0($7)
	beq	$4,$0,$L656
	sw	$4,%lo(pp)($2)

	lw	$2,4($4)
	andi	$2,$2,0x2
	bne	$2,$0,$L1009
	move	$6,$17

$L656:
	addiu	$3,$3,1
	j	$L655
	addiu	$7,$7,4

$L1008:
	lw	$5,%lo(g_p4_magic_1)($7)
	beq	$5,$0,$L1098
	lw	$2,%lo(g_p4_magic_2)($3)

	beq	$2,$0,$L1010
	lw	$6,%lo(g_p4_magic_2)($3)

$L1100:
	lw	$7,1852($23)
$L1072:
	lui	$4,%hi($LC36)
	jal	printk
	addiu	$4,$4,%lo($LC36)

$L654:
	lui	$3,%hi(g_sc_ctx+24)
$L1101:
	addiu	$4,$3,%lo(g_sc_ctx+24)
	jal	bytedump
	li	$5,6			# 0x6

	lui	$4,%hi($LC27)
	jal	printk
	addiu	$4,$4,%lo($LC27)

	lui	$4,%hi(g_sc_ctx+12)
	addiu	$4,$4,%lo(g_sc_ctx+12)
	jal	bytedump
	li	$5,6			# 0x6

	j	$L1071
	lbu	$5,40($16)

$L1009:
	lui	$5,%hi(g_sc_ctx)
	addiu	$5,$5,%lo(g_sc_ctx)
	sw	$3,36($sp)
	jal	rtk_sc_check_pattern
	sw	$7,32($sp)

	lw	$3,36($sp)
	bne	$2,$0,$L656
	lw	$7,32($sp)

	li	$17,1			# 0x1
	li	$19,2			# 0x2
	sw	$22,24($sp)
	sw	$17,%lo(finish_sync)($18)
	sw	$17,%lo(fix_sa)($22)
	jal	clean_sc_syn
	sw	$19,%lo(g_pkt_type)($21)

	lbu	$2,40($16)
	beq	$2,$19,$L1011
	lui	$4,%hi(g_sc_ctx)

	bne	$2,$17,$L1099
	lui	$2,%hi(g_p4_magic_len)

	lhu	$2,36($16)
	lui	$5,%hi(g_sc_ctx)
	addiu	$5,$5,%lo(g_sc_ctx)
	sh	$2,10808($5)
$L658:
	lui	$2,%hi(g_p4_magic_len)
$L1099:
	j	$L569
	sw	$0,%lo(g_p4_magic_len)($2)

$L1011:
	lhu	$2,36($16)
	addiu	$4,$4,%lo(g_sc_ctx)
	j	$L658
	sh	$2,10810($4)

$L1010:
	lw	$6,1852($23)
	lui	$4,%hi($LC34)
	addiu	$4,$4,%lo($LC34)
	sw	$3,36($sp)
	jal	printk
	sw	$7,32($sp)

	lui	$2,%hi(g_p4_magic_1)
	lw	$5,%lo(g_p4_magic_1)($2)
	lw	$7,32($sp)
	lw	$3,36($sp)
	lw	$2,%lo(g_p4_magic_2)($3)
$L1098:
	beq	$2,$0,$L653
	nop

	lw	$5,%lo(g_p4_magic_1)($7)
	bne	$5,$0,$L1100
	lw	$6,%lo(g_p4_magic_2)($3)

	lw	$6,1852($23)
	lui	$4,%hi($LC35)
	move	$5,$2
	addiu	$4,$4,%lo($LC35)
	jal	printk
	sw	$3,36($sp)

	lui	$2,%hi(g_p4_magic_1)
	lw	$5,%lo(g_p4_magic_1)($2)
	lw	$3,36($sp)
$L653:
	beq	$5,$0,$L654
	lw	$6,%lo(g_p4_magic_2)($3)

	beq	$6,$0,$L1101
	lui	$3,%hi(g_sc_ctx+24)

	j	$L1072
	lw	$7,1852($23)

$L1002:
	beq	$2,$0,$L638
	nop

	lw	$6,10896($23)
	bne	$6,$5,$L638
	nop

	bne	$19,$5,$L638
	nop

	lw	$5,12($16)
	subu	$2,$5,$2
	andi	$2,$2,0xf
	addiu	$2,$2,1
	sll	$2,$2,4
	sw	$2,1852($fp)
	j	$L637
	lbu	$5,40($16)

$L1001:
	lui	$7,%hi(g_option_sa)
	addiu	$4,$7,%lo(g_option_sa)
	li	$6,140			# 0x8c
	jal	memset
	sw	$8,32($sp)

	lbu	$2,40($16)
	lw	$8,32($sp)
	beq	$2,$8,$L1012
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L999:
	beq	$4,$0,$L630
	nop

	lw	$3,12($16)
	subu	$3,$3,$4
	addiu	$5,$3,-497
	sltu	$5,$5,15
	beq	$5,$0,$L630
	ext	$3,$3,4,5

	li	$5,31			# 0x1f
	bne	$3,$5,$L625
	move	$19,$0

	j	$L632
	li	$19,1			# 0x1

$L998:
	beq	$2,$0,$L630
	nop

	lw	$3,12($16)
	subu	$3,$3,$2
	addiu	$5,$3,-497
	sltu	$5,$5,15
	beq	$5,$0,$L630
	nop

	ext	$19,$3,4,5
	xori	$19,$19,0x1f
	j	$L630
	sltu	$19,$19,1

$L1012:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1004:
	jal	rtk_sc_restart_simple_config
	move	$4,$17

	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1013
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($fp)

$L1003:
	beq	$2,$0,$L638
	li	$5,1			# 0x1

	lw	$2,10896($23)
	beq	$2,$5,$L1014
	nop

$L639:
	lui	$2,%hi(g_p4_to_ds_hrate)
$L1102:
	lw	$4,%lo(g_p4_to_ds_hrate)($2)
	bne	$4,$0,$L638
	nop

	lbu	$4,64($16)
	sltu	$4,$4,55
	bne	$4,$0,$L638
	li	$4,1			# 0x1

	j	$L638
	sw	$4,%lo(g_p4_to_ds_hrate)($2)

$L1013:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($fp)

$L1014:
	bne	$19,$2,$L1102
	lui	$2,%hi(g_p4_to_ds_hrate)

	lw	$2,12($16)
	subu	$2,$2,$4
	andi	$2,$2,0xf
	addiu	$2,$2,1
	sll	$2,$2,4
	j	$L639
	sw	$2,1852($fp)

$L1005:
	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1015
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($fp)

$L1007:
	sb	$9,3388($10)
	addiu	$2,$2,1
	sw	$4,4($13)
	j	$L646
	addiu	$5,$5,4

$L1015:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($fp)

$L761:
	lui	$3,%hi(g_p4_to_ds_hrate)
	lw	$4,%lo(g_p4_to_ds_hrate)($3)
	bne	$4,$0,$L762
	nop

	lbu	$4,64($16)
	sltu	$4,$4,55
	bne	$4,$0,$L762
	nop

	sw	$2,%lo(g_p4_to_ds_hrate)($3)
$L762:
	lw	$2,12($16)
	lui	$3,%hi(g_sc_magic)
	lui	$4,%hi(g_sc_magic+32)
	addiu	$3,$3,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L767:
	lw	$17,0($3)
	addiu	$5,$17,35
	beq	$5,$2,$L763
	addiu	$5,$17,34

	beq	$5,$2,$L763
	addiu	$5,$17,59

	beq	$5,$2,$L763
	addiu	$5,$17,74

	beq	$5,$2,$L763
	addiu	$5,$17,85

	beq	$5,$2,$L763
	addiu	$5,$17,100

	beq	$5,$2,$L763
	addiu	$5,$17,125

	beq	$5,$2,$L763
	addiu	$5,$17,140

	beq	$5,$2,$L763
	addiu	$5,$17,151

	beq	$5,$2,$L763
	addiu	$5,$17,166

	beq	$5,$2,$L763
	addiu	$5,$17,191

	beq	$5,$2,$L763
	addiu	$5,$17,206

	beq	$5,$2,$L763
	addiu	$5,$17,217

	beq	$5,$2,$L763
	addiu	$5,$17,232

	beq	$5,$2,$L763
	addiu	$5,$17,241

	beq	$5,$2,$L763
	addiu	$3,$3,4

	bne	$3,$4,$L767
	nop

	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1016
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L589:
	bne	$3,$2,$L569
	nop

	jal	rtk_sc_check_profile
	move	$4,$17

	j	$L1066
	lw	$31,76($sp)

$L763:
	move	$4,$16
	jal	check_sync_pkt
	move	$5,$17

	blez	$2,$L765
	nop

	sw	$17,%lo(g_p4_magic_2)($18)
$L765:
	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1017
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L1016:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1017:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L960:
	lbu	$2,40($16)
	li	$4,1			# 0x1
	beq	$2,$4,$L1018
	li	$5,2			# 0x2

	bne	$2,$5,$L1066
	lw	$31,76($sp)

	lui	$18,%hi(g_p4_magic_2)
	lw	$2,%lo(g_p4_magic_2)($18)
	beq	$2,$0,$L704
	nop

$L944:
	sw	$2,%lo(g_p4_magic_len)($3)
	lw	$3,12($16)
	lw	$4,10900($22)
	li	$6,2			# 0x2
	beq	$4,$6,$L1019
	subu	$2,$3,$2

	li	$3,1			# 0x1
	bne	$4,$3,$L1066
	lw	$31,76($sp)

	ext	$4,$2,4,6
	beq	$4,$0,$L724
	li	$3,-1			# 0xffffffffffffffff

	slt	$3,$2,1025
	bne	$3,$0,$L1020
	lui	$18,%hi(g_p4_group)

	li	$3,-1			# 0xffffffffffffffff
	sw	$3,%lo(g_p4_group)($18)
$L895:
	lw	$3,1852($22)
	srl	$4,$3,4
	addiu	$4,$4,1023
	beq	$2,$4,$L727
	li	$4,2			# 0x2

	beq	$2,$4,$L729
	addiu	$4,$3,-63

	srl	$4,$4,4
	addiu	$4,$4,1048
	beq	$2,$4,$L729
	li	$4,11			# 0xb

	beq	$2,$4,$L731
	addiu	$4,$3,-126

	srl	$4,$4,4
	addiu	$4,$4,1072
	beq	$2,$4,$L731
	li	$4,10			# 0xa

	beq	$2,$4,$L733
	addiu	$3,$3,-189

	srl	$3,$3,4
	addiu	$3,$3,1096
	bne	$2,$3,$L1066
	lw	$31,76($sp)

$L733:
	li	$2,3			# 0x3
	j	$L569
	sw	$2,%lo(g_p4_group)($18)

$L731:
	li	$2,2			# 0x2
	j	$L569
	sw	$2,%lo(g_p4_group)($18)

$L729:
	li	$2,1			# 0x1
	j	$L569
	sw	$2,%lo(g_p4_group)($18)

$L724:
	lui	$18,%hi(g_p4_group)
	sw	$3,%lo(g_p4_group)($18)
	li	$3,3			# 0x3
	bne	$2,$3,$L895
	nop

$L727:
	j	$L569
	sw	$0,%lo(g_p4_group)($18)

$L1020:
	lw	$3,%lo(g_p4_group)($18)
	bltz	$3,$L569
	sll	$5,$3,6

	subu	$5,$5,$3
	lui	$16,%hi(g_p4_last_seq)
	addiu	$5,$5,-1
	lw	$7,%lo(g_p4_last_seq)($16)
	addu	$5,$5,$4
	addiu	$3,$5,15
	slt	$3,$3,$7
	beq	$3,$0,$L734
	slt	$3,$5,64

	bne	$3,$0,$L734
	nop

	lw	$3,1852($22)
	sltu	$4,$3,127
	bne	$4,$0,$L736
	nop

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$6,$L1103
	li	$2,-1			# 0xffffffffffffffff

	lui	$4,%hi($LC43)
	jal	printk
	addiu	$4,$4,%lo($LC43)

	li	$2,-1			# 0xffffffffffffffff
$L1103:
	sw	$2,%lo(g_p4_group)($18)
	j	$L569
	sw	$0,%lo(g_p4_last_seq)($16)

$L734:
	lw	$3,1852($22)
$L736:
	sltu	$3,$3,$5
	beq	$3,$0,$L738
	addu	$3,$22,$5

	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L1104
	lui	$2,%hi(g_sc_ctx+2874)

	lui	$4,%hi($LC40)
	jal	printk
	addiu	$4,$4,%lo($LC40)

	lui	$2,%hi(g_sc_ctx+2874)
$L1104:
	lui	$3,%hi(g_sc_ctx+3130)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$3,$3,%lo(g_sc_ctx+3130)
$L740:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$3,$L740
	nop

	li	$2,-1			# 0xffffffffffffffff
	sw	$2,%lo(g_p4_group)($18)
	lui	$2,%hi(profile_pkt_index)
	sw	$0,%lo(profile_pkt_index)($2)
	j	$L569
	sw	$0,%lo(g_p4_last_seq)($16)

$L738:
	lbu	$4,3130($3)
	beq	$4,$0,$L741
	sw	$5,%lo(g_p4_last_seq)($16)

	lui	$16,%hi(profile_pkt_index)
	lw	$7,%lo(profile_pkt_index)($16)
$L742:
	lw	$2,1852($22)
	sltu	$7,$7,$2
	bne	$7,$0,$L744
	move	$19,$0

$L745:
	sltu	$3,$19,$2
	beq	$3,$0,$L748
	addu	$3,$22,$19

	lbu	$3,3130($3)
	beq	$3,$0,$L1021
	nop

	j	$L745
	addiu	$19,$19,1

$L1021:
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L747
	lui	$4,%hi($LC42)

	addiu	$4,$4,%lo($LC42)
	jal	printk
	move	$5,$19

$L747:
	lw	$2,1852($22)
	sw	$0,%lo(profile_pkt_index)($16)
$L748:
	beq	$2,$19,$L1022
	lui	$3,%hi(pp)

$L744:
	lw	$3,%lo(g_p4_group)($18)
	lui	$2,%hi(g_p4_last_group)
	j	$L569
	sw	$3,%lo(g_p4_last_group)($2)

$L741:
	lui	$16,%hi(profile_pkt_index)
	lw	$7,%lo(profile_pkt_index)($16)
	lui	$4,%hi(g_sc_debug)
	lw	$4,%lo(g_sc_debug)($4)
	andi	$2,$2,0xf
	addiu	$7,$7,1
	li	$6,1			# 0x1
	sb	$2,2874($3)
	li	$2,2			# 0x2
	sb	$6,3130($3)
	bne	$4,$2,$L742
	sw	$7,%lo(profile_pkt_index)($16)

	li	$2,1717960704			# 0x66660000
	ori	$2,$2,0x6667
	mult	$7,$2
	sra	$3,$7,31
	mfhi	$2
	sra	$2,$2,2
	subu	$2,$2,$3
	sll	$3,$2,3
	sll	$2,$2,1
	addu	$2,$2,$3
	bne	$7,$2,$L743
	li	$2,-1207959552			# 0xffffffffb8000000

	ori	$2,$2,0x311c
	lw	$4,0($2)
	li	$3,8388608			# 0x800000
	or	$3,$4,$3
	sw	$3,0($2)
$L743:
	lw	$6,1852($22)
	lui	$4,%hi($LC44)
	jal	printk
	addiu	$4,$4,%lo($LC44)

	j	$L742
	lw	$7,%lo(profile_pkt_index)($16)

$L1022:
	lw	$2,2424($22)
	beq	$2,$0,$L750
	sw	$2,%lo(pp)($3)

	lw	$2,4($2)
	andi	$2,$2,0x2
	bne	$2,$0,$L1023
	nop

$L750:
	lui	$4,%hi($LC45)
	jal	printk
	addiu	$4,$4,%lo($LC45)

	li	$2,-1			# 0xffffffffffffffff
	sw	$2,%lo(g_p4_group)($18)
	lui	$3,%hi(g_sc_ctx+3130)
	lui	$2,%hi(g_sc_ctx+2874)
	sw	$0,%lo(profile_pkt_index)($16)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$3,$3,%lo(g_sc_ctx+3130)
$L752:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$3,$L752
	lw	$31,76($sp)

	j	$L1078
	lw	$fp,72($sp)

$L1023:
	jal	rtk_sc_check_profile
	move	$4,$17

	li	$3,-1			# 0xffffffffffffffff
	beq	$2,$3,$L750
	nop

	j	$L744
	sw	$0,%lo(profile_pkt_index)($16)

$L1019:
	lw	$3,1852($22)
	ext	$5,$2,3,7
	sltu	$6,$3,$5
	beq	$6,$0,$L708
	nop

	lui	$2,%hi(g_sc_debug)
	lw	$2,%lo(g_sc_debug)($2)
	bne	$2,$4,$L1105
	lui	$2,%hi(g_sc_ctx+2874)

	lui	$4,%hi($LC40)
	jal	printk
	addiu	$4,$4,%lo($LC40)

	lui	$2,%hi(g_sc_ctx+2874)
$L1105:
	lui	$3,%hi(g_sc_ctx+3130)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$3,$3,%lo(g_sc_ctx+3130)
$L710:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$3,$L710
	nop

	lui	$2,%hi(profile_pkt_index)
	j	$L569
	sw	$0,%lo(profile_pkt_index)($2)

$L708:
	beq	$5,$0,$L569
	slt	$6,$2,1121

	beq	$6,$0,$L569
	addiu	$5,$5,-1

	addu	$6,$5,$22
	lbu	$7,3130($6)
	beq	$7,$0,$L712
	lui	$16,%hi(profile_pkt_index)

	lw	$7,%lo(profile_pkt_index)($16)
$L713:
	sltu	$7,$7,$3
	bne	$7,$0,$L569
	move	$18,$0

$L716:
	sltu	$2,$18,$3
	beq	$2,$0,$L719
	addu	$2,$22,$18

	lbu	$2,3130($2)
	beq	$2,$0,$L1024
	lui	$2,%hi(g_sc_debug)

	j	$L716
	addiu	$18,$18,1

$L963:
	lui	$2,%hi(g_p4_magic_2)
	lw	$2,%lo(g_p4_magic_2)($2)
	beq	$2,$0,$L773
	nop

$L939:
	lw	$3,12($16)
	subu	$2,$3,$2
	j	$L771
	andi	$4,$2,0x400

$L773:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1024:
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L718
	lui	$4,%hi($LC42)

	addiu	$4,$4,%lo($LC42)
	jal	printk
	move	$5,$18

$L718:
	lw	$3,1852($22)
	sw	$0,%lo(profile_pkt_index)($16)
$L719:
	bne	$3,$18,$L1066
	lw	$31,76($sp)

	lw	$2,2424($22)
	lui	$3,%hi(pp)
	beq	$2,$0,$L721
	sw	$2,%lo(pp)($3)

	lw	$2,4($2)
	andi	$2,$2,0x2
	bne	$2,$0,$L1025
	nop

$L721:
	lui	$2,%hi(g_sc_ctx+2874)
$L1109:
	lui	$3,%hi(g_sc_ctx+3130)
	sw	$0,%lo(profile_pkt_index)($16)
	addiu	$2,$2,%lo(g_sc_ctx+2874)
	addiu	$3,$3,%lo(g_sc_ctx+3130)
$L723:
	sb	$0,0($2)
	sb	$0,256($2)
	addiu	$2,$2,1
	bne	$2,$3,$L723
	lw	$31,76($sp)

	j	$L1078
	lw	$fp,72($sp)

$L775:
	ext	$23,$2,4,6
	addiu	$3,$23,-1
	sltu	$3,$3,15
	beq	$3,$0,$L777
	andi	$19,$2,0xf

	slt	$2,$2,512
	beq	$2,$0,$L1106
	srl	$3,$23,5

	addiu	$23,$23,-2
	lui	$18,%hi(g_p4_group)
	li	$2,-1			# 0xffffffffffffffff
	sltu	$3,$23,14
	beq	$3,$0,$L778
	sw	$2,%lo(g_p4_group)($18)

	lui	$2,%hi($L793)
	addiu	$2,$2,%lo($L793)
	sll	$23,$23,2
	addu	$23,$2,$23
	lw	$2,0($23)
	j	$2
	nop

	.rdata
	.align	2
	.align	2
$L793:
	.word	$L779
	.word	$L780
	.word	$L781
	.word	$L782
	.word	$L783
	.word	$L784
	.word	$L785
	.word	$L786
	.word	$L787
	.word	$L788
	.word	$L789
	.word	$L790
	.word	$L791
	.word	$L792
	.text
$L754:
	lw	$2,12($16)
	lui	$3,%hi(g_sc_magic)
	addiu	$3,$3,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L760:
	lw	$17,0($3)
	addiu	$5,$17,35
	beq	$5,$2,$L756
	addiu	$5,$17,34

	beq	$5,$2,$L756
	addiu	$5,$17,59

	beq	$5,$2,$L756
	addiu	$5,$17,74

	beq	$5,$2,$L756
	addiu	$5,$17,85

	beq	$5,$2,$L756
	addiu	$5,$17,100

	beq	$5,$2,$L756
	addiu	$5,$17,125

	beq	$5,$2,$L756
	addiu	$5,$17,140

	beq	$5,$2,$L756
	addiu	$5,$17,151

	beq	$5,$2,$L756
	addiu	$5,$17,166

	beq	$5,$2,$L756
	addiu	$5,$17,191

	beq	$5,$2,$L756
	addiu	$5,$17,206

	beq	$5,$2,$L756
	addiu	$5,$17,217

	beq	$5,$2,$L756
	addiu	$5,$17,232

	beq	$5,$2,$L756
	addiu	$5,$17,241

	beq	$5,$2,$L756
	addiu	$3,$3,4

	bne	$3,$4,$L760
	nop

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L791:
	li	$2,8			# 0x8
	bne	$19,$2,$L795
	li	$2,13			# 0xd

	sw	$2,%lo(g_p4_group)($18)
$L795:
	lbu	$2,40($16)
$L1123:
	li	$3,2			# 0x2
	beq	$2,$3,$L1026
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lw	$3,%lo(g_p4_group)($18)
	lui	$2,%hi(g_p4_group_index_FromDS)
	sw	$3,%lo(g_p4_group_index_FromDS)($2)
	lhu	$2,36($16)
	sh	$2,10886($22)
$L797:
	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1027
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L790:
	li	$2,9			# 0x9
	bne	$19,$2,$L795
	li	$2,12			# 0xc

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L1027:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1026:
	lw	$3,%lo(g_p4_group)($18)
	lui	$2,%hi(g_p4_group_index_ToDS)
	sw	$3,%lo(g_p4_group_index_ToDS)($2)
	lhu	$2,36($16)
	j	$L797
	sh	$2,10884($22)

$L756:
	move	$4,$16
	jal	check_sync_pkt
	move	$5,$17

	blez	$2,$L758
	li	$3,2			# 0x2

	sw	$17,%lo(g_p4_magic_1)($18)
	lbu	$2,40($16)
	beq	$2,$3,$L1028
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

$L758:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L1028:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L789:
	li	$2,14			# 0xe
	bne	$19,$2,$L795
	li	$2,11			# 0xb

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L788:
	li	$2,15			# 0xf
	bne	$19,$2,$L795
	li	$2,10			# 0xa

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L787:
	li	$2,6			# 0x6
	bne	$19,$2,$L795
	li	$2,9			# 0x9

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L786:
	li	$2,7			# 0x7
	bne	$19,$2,$L795
	li	$2,8			# 0x8

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L785:
	li	$2,12			# 0xc
	bne	$19,$2,$L795
	li	$2,7			# 0x7

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L784:
	li	$2,13			# 0xd
	bne	$19,$2,$L795
	li	$2,6			# 0x6

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L783:
	li	$2,4			# 0x4
	bne	$19,$2,$L795
	li	$2,5			# 0x5

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L782:
	li	$2,5			# 0x5
	bne	$19,$2,$L795
	li	$2,4			# 0x4

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L781:
	li	$2,10			# 0xa
	bne	$19,$2,$L795
	li	$2,3			# 0x3

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L780:
	li	$2,11			# 0xb
	bne	$19,$2,$L795
	li	$2,2			# 0x2

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L779:
	li	$2,3			# 0x3
	beq	$19,$2,$L1029
	li	$2,2			# 0x2

	bne	$19,$2,$L795
	li	$2,1			# 0x1

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L792:
	li	$2,1			# 0x1
	bne	$19,$2,$L795
	li	$2,14			# 0xe

	j	$L795
	sw	$2,%lo(g_p4_group)($18)

$L1029:
	j	$L795
	sw	$0,%lo(g_p4_group)($18)

$L778:
	j	$L1123
	lbu	$2,40($16)

$L777:
	srl	$3,$23,5
$L1106:
	bne	$3,$0,$L799
	andi	$4,$23,0x1f

	li	$2,31			# 0x1f
	beq	$4,$2,$L800
	andi	$2,$23,0x10

	beq	$2,$0,$L799
	nop

$L800:
	lbu	$2,40($16)
	li	$3,2			# 0x2
	beq	$2,$3,$L1030
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L799:
	lbu	$2,40($16)
	li	$4,2			# 0x2
	beq	$2,$4,$L1031
	li	$4,1			# 0x1

	beq	$2,$4,$L1032
	andi	$fp,$23,0x1f

$L896:
	bne	$3,$0,$L806
	li	$3,2			# 0x2

	beq	$2,$3,$L1033
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L1030:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1033:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L806:
	beq	$2,$3,$L1034
	li	$3,1			# 0x1

	beq	$2,$3,$L1035
	addiu	$20,$fp,-2

$L1116:
	sltu	$3,$20,24
$L1117:
	bne	$3,$0,$L929
	li	$3,1			# 0x1

	lui	$18,%hi(g_p4_group)
$L812:
	lw	$4,%lo(g_p4_group)($18)
$L1107:
	lbu	$2,10804($22)
	lui	$3,%hi(g_p4_last_seq)
	sw	$23,%lo(g_p4_last_seq)($3)
	lui	$3,%hi(g_p4_last_group)
	bne	$2,$0,$L887
	sw	$4,%lo(g_p4_last_group)($3)

	lbu	$2,4461($22)
	lbu	$3,3386($22)
	beq	$3,$2,$L1036
	lui	$18,%hi(g_sc_ctx+3405)

$L887:
	lbu	$2,40($16)
$L1075:
	li	$3,2			# 0x2
	beq	$2,$3,$L1037
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L929:
	beq	$2,$3,$L1038
	li	$3,2			# 0x2

	beq	$2,$3,$L1039
	nop

$L814:
	lui	$3,%hi(g_sc_debug)
$L1111:
	lw	$4,%lo(g_sc_debug)($3)
	li	$3,-1			# 0xffffffffffffffff
	beq	$4,$3,$L930
	li	$3,-1207959552			# 0xffffffffb8000000

	lui	$18,%hi(g_p4_group)
$L827:
	li	$3,1			# 0x1
	beq	$2,$3,$L1040
	li	$3,2			# 0x2

	bne	$2,$3,$L1107
	lw	$4,%lo(g_p4_group)($18)

	lbu	$2,7632($22)
	addu	$3,$22,$2
	lbu	$3,7649($3)
	bne	$3,$0,$L858
	sll	$4,$2,5

	addu	$3,$22,$4
	addu	$5,$3,$20
	lbu	$6,8177($5)
	bne	$6,$0,$L858
	addiu	$2,$2,2702

	sll	$2,$2,2
	addu	$2,$22,$2
	lw	$2,4($2)
	sltu	$6,$20,$2
	beq	$6,$0,$L859
	nop

	lbu	$2,7665($5)
	beq	$2,$0,$L1108
	addu	$4,$22,$4

	sb	$0,7665($5)
	lbu	$2,7632($22)
	sll	$4,$2,5
	addu	$4,$22,$4
$L1108:
	addu	$4,$4,$20
	sb	$19,7665($4)
$L863:
	lbu	$2,7632($22)
	sll	$2,$2,5
	addu	$2,$22,$2
	addu	$20,$2,$20
	li	$2,1			# 0x1
	sb	$2,8177($20)
	lbu	$2,7632($22)
	addu	$2,$22,$2
	lbu	$3,7633($2)
	addiu	$3,$3,1
	sb	$3,7633($2)
$L858:
	li	$2,25			# 0x19
	beq	$fp,$2,$L932
	lui	$21,%hi(g_p4_group_index_ToDS)

$L864:
	lbu	$2,7632($22)
	addu	$4,$22,$2
	lbu	$3,7649($4)
	bne	$3,$0,$L865
	nop

	lbu	$3,7633($4)
	lbu	$6,3388($4)
	beq	$3,$6,$L1041
	sll	$7,$2,5

	lw	$4,10876($22)
	bne	$4,$0,$L865
	sltu	$3,$3,$6

	beq	$3,$0,$L865
	addiu	$3,$2,2702

	sll	$3,$3,2
	addu	$3,$22,$3
	lw	$4,4($3)
	sll	$5,$2,5
	move	$3,$0
	addu	$5,$5,$4
	addu	$5,$22,$5
	addiu	$5,$5,8177
$L873:
	slt	$7,$4,$6
	beq	$7,$0,$L1042
	addiu	$4,$4,1

	lbu	$7,0($5)
	addiu	$5,$5,1
	xori	$7,$7,0x1
	sltu	$7,$7,1
	j	$L873
	addu	$3,$3,$7

$L859:
	subu	$5,$20,$2
	srl	$5,$5,1
	andi	$4,$20,0x1
	beq	$4,$0,$L862
	addu	$2,$5,$2

	addu	$2,$3,$2
	lbu	$3,7665($2)
	or	$19,$19,$3
	j	$L863
	sb	$19,7665($2)

$L1042:
	slt	$4,$3,8
	bne	$4,$0,$L865
	li	$4,8			# 0x8

	beq	$3,$4,$L1043
	lui	$5,%hi(g_sc_ctx+8692)

$L865:
	lhu	$2,36($16)
$L1073:
	lw	$3,%lo(g_p4_group_index_ToDS)($21)
	sh	$2,10880($22)
	j	$L812
	sw	$3,10888($22)

$L1043:
	sll	$2,$2,7
	addiu	$5,$5,%lo(g_sc_ctx+8692)
	addu	$4,$5,$2
	li	$6,32			# 0x20
	jal	memset
	move	$5,$0

	lbu	$2,7632($22)
	move	$5,$0
	move	$3,$0
	addiu	$2,$2,2684
	sll	$2,$2,2
	addu	$2,$22,$2
	sw	$0,4($2)
	lbu	$2,7632($22)
	move	$13,$22
	li	$12,1			# 0x1
	addiu	$4,$2,2702
	sll	$4,$4,2
	addiu	$6,$2,2684
	addu	$4,$22,$4
	sll	$6,$6,2
	sll	$7,$2,5
	move	$11,$4
	lw	$8,4($4)
	addu	$6,$22,$6
	move	$4,$2
	addu	$10,$22,$7
	li	$9,21			# 0x15
$L876:
	slt	$14,$3,$8
	beq	$14,$0,$L1044
	addu	$14,$10,$3

	lbu	$14,8177($14)
	beq	$14,$12,$L1045
	subu	$14,$9,$3

	lw	$8,4($6)
	move	$4,$2
	addu	$8,$7,$8
	addiu	$8,$8,2172
	sll	$8,$8,2
	addu	$8,$13,$8
	sw	$14,4($8)
	lw	$8,4($6)
	addiu	$8,$8,1
	sw	$8,4($6)
	lw	$8,4($11)
$L878:
	j	$L876
	addiu	$3,$3,1

$L932:
	li	$2,-1			# 0xffffffffffffffff
	j	$L864
	sw	$2,%lo(g_p4_group_index_ToDS)($21)

$L1045:
	j	$L878
	addiu	$5,$5,1

$L1044:
	addu	$2,$22,$2
	lbu	$3,3388($2)
	addiu	$3,$3,-10
	slt	$5,$3,$5
	beq	$5,$0,$L865
	move	$3,$0

	lbu	$6,7632($22)
	lbu	$5,7633($2)
	move	$2,$0
	addu	$7,$22,$6
$L880:
	slt	$8,$2,$5
	beq	$8,$0,$L1046
	slt	$8,$2,16

	beq	$8,$0,$L881
	nop

	sll	$4,$4,5
	addu	$4,$22,$4
	addu	$4,$4,$2
	lbu	$8,7665($4)
	sltu	$8,$8,16
	bne	$8,$0,$L881
	nop

	sb	$0,8177($4)
	lbu	$5,7633($7)
	addiu	$3,$3,1
$L881:
	addiu	$2,$2,1
	j	$L880
	move	$4,$6

$L1046:
	beq	$3,$0,$L1047
	subu	$3,$5,$3

	addu	$4,$22,$4
	j	$L865
	sb	$3,7633($4)

$L1041:
	move	$6,$4
	addu	$7,$22,$7
	move	$5,$0
	move	$4,$0
$L867:
	slt	$8,$4,$3
	beq	$8,$0,$L1048
	nop

	slt	$3,$4,16
	beq	$3,$0,$L868
	nop

	addu	$3,$7,$4
	lbu	$8,7665($3)
	sltu	$8,$8,16
	bne	$8,$0,$L868
	nop

	sb	$0,8177($3)
	addiu	$5,$5,1
$L868:
	lbu	$3,7633($6)
	j	$L867
	addiu	$4,$4,1

$L1048:
	beq	$5,$0,$L1049
	subu	$3,$3,$5

	addu	$2,$22,$2
	j	$L865
	sb	$3,7633($2)

$L862:
	addu	$3,$3,$2
	lbu	$2,7665($3)
	sll	$19,$19,4
	or	$19,$2,$19
	j	$L863
	sb	$19,7665($3)

$L1047:
	jal	initialize_ecc
	lui	$19,%hi(g_sc_ctx+7665)

	lbu	$2,7632($22)
	addiu	$19,$19,%lo(g_sc_ctx+7665)
	addu	$3,$22,$2
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$19,$2
	addiu	$5,$5,-4
	jal	decode_data
	lui	$20,%hi(synBytes)

	lw	$2,%lo(synBytes)($20)
	bne	$2,$0,$L884
	move	$fp,$19

	addiu	$2,$20,%lo(synBytes)
	lw	$3,4($2)
	bne	$3,$0,$L884
	nop

	lw	$3,8($2)
	bne	$3,$0,$L884
	nop

	lw	$2,12($2)
	beq	$2,$0,$L865
	nop

$L884:
	lbu	$2,7632($22)
	addiu	$3,$2,2684
	sll	$3,$3,2
	addu	$3,$22,$3
	lw	$6,4($3)
	blez	$6,$L865
	lui	$3,%hi(g_sc_ctx+8692)

	addiu	$3,$3,%lo(g_sc_ctx+8692)
	sll	$7,$2,7
	sll	$2,$2,5
	addu	$7,$3,$7
	addu	$4,$fp,$2
	jal	correct_errors_erasures
	li	$5,20			# 0x14

	jal	initialize_ecc
	nop

	lbu	$2,7632($22)
	addu	$3,$2,$22
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$fp,$2
	jal	decode_data
	addiu	$5,$5,-4

	lw	$2,%lo(synBytes)($20)
	bne	$2,$0,$L885
	nop

	lui	$2,%hi(synBytes)
	addiu	$2,$2,%lo(synBytes)
	lw	$3,4($2)
	bne	$3,$0,$L885
	nop

	lw	$3,8($2)
	bne	$3,$0,$L885
	nop

	lw	$2,12($2)
	bne	$2,$0,$L885
	nop

	lbu	$2,7632($22)
	li	$20,1			# 0x1
	addu	$2,$2,$22
	sb	$20,7649($2)
	lbu	$2,7632($22)
	addu	$3,$2,$22
	lbu	$3,4445($3)
	bne	$3,$0,$L865
	lui	$4,%hi(g_sc_ctx+3405)

	sll	$2,$2,5
	addiu	$4,$4,%lo(g_sc_ctx+3405)
	addu	$5,$19,$2
	addu	$4,$4,$2
	jal	memcpy
	li	$6,16			# 0x10

	lbu	$5,4461($22)
	lbu	$2,7632($22)
	lui	$4,%hi($LC52)
	addiu	$5,$5,1
	andi	$5,$5,0x00ff
	addu	$2,$2,$22
	sb	$5,4461($22)
	sb	$20,4445($2)
	lbu	$6,7632($22)
	jal	printk
	addiu	$4,$4,%lo($LC52)

	j	$L1073
	lhu	$2,36($16)

$L1049:
	jal	initialize_ecc
	lui	$19,%hi(g_sc_ctx+7665)

	lbu	$2,7632($22)
	addiu	$19,$19,%lo(g_sc_ctx+7665)
	addu	$3,$22,$2
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$19,$2
	jal	decode_data
	addiu	$5,$5,-4

	lui	$2,%hi(synBytes)
	lw	$3,%lo(synBytes)($2)
	bne	$3,$0,$L871
	addiu	$2,$2,%lo(synBytes)

	lw	$3,4($2)
	bne	$3,$0,$L871
	nop

	lw	$3,8($2)
	bne	$3,$0,$L871
	nop

	lw	$2,12($2)
	bne	$2,$0,$L871
	nop

	lbu	$2,7632($22)
	li	$20,1			# 0x1
	addu	$2,$2,$22
	sb	$20,7649($2)
	lbu	$2,7632($22)
	addu	$3,$2,$22
	lbu	$3,4445($3)
	bne	$3,$0,$L865
	lui	$4,%hi(g_sc_ctx+3405)

	sll	$2,$2,5
	addiu	$4,$4,%lo(g_sc_ctx+3405)
	addu	$5,$19,$2
	addu	$4,$4,$2
	jal	memcpy
	li	$6,16			# 0x10

	lbu	$5,4461($22)
	lbu	$2,7632($22)
	lui	$4,%hi($LC50)
	addiu	$5,$5,1
	andi	$5,$5,0x00ff
	addu	$2,$2,$22
	sb	$5,4461($22)
	sb	$20,4445($2)
	lbu	$6,7632($22)
	jal	printk
	addiu	$4,$4,%lo($LC50)

	j	$L1073
	lhu	$2,36($16)

$L885:
	lbu	$6,7632($22)
	lui	$4,%hi($LC51)
	addiu	$4,$4,%lo($LC51)
	jal	printk
	li	$5,3370			# 0xd2a

	j	$L1073
	lhu	$2,36($16)

$L871:
	lbu	$2,7632($22)
	lui	$4,%hi(g_sc_ctx+8177)
	addiu	$4,$4,%lo(g_sc_ctx+8177)
	addu	$2,$22,$2
	sb	$0,7633($2)
	lbu	$2,7632($22)
	move	$5,$0
	li	$6,32			# 0x20
	sll	$2,$2,5
	jal	memset
	addu	$4,$4,$2

	lbu	$4,7632($22)
	move	$5,$0
	li	$6,32			# 0x20
	sll	$4,$4,5
	jal	memset
	addu	$4,$19,$4

	lbu	$2,7632($22)
	lui	$4,%hi(g_sc_ctx+8692)
	addiu	$4,$4,%lo(g_sc_ctx+8692)
	sll	$2,$2,7
	addu	$4,$4,$2
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lbu	$2,7632($22)
	addiu	$2,$2,2684
	sll	$2,$2,2
	addu	$2,$22,$2
	j	$L865
	sw	$0,4($2)

$L968:
	li	$2,1717960704			# 0x66660000
	ori	$2,$2,0x6667
	mult	$7,$2
	sra	$3,$7,31
	mfhi	$2
	sra	$2,$2,2
	subu	$2,$2,$3
	sll	$3,$2,3
	sll	$2,$2,1
	addu	$2,$2,$3
	bne	$7,$2,$L693
	li	$2,-1207959552			# 0xffffffffb8000000

	ori	$2,$2,0x311c
	lw	$4,0($2)
	li	$3,8388608			# 0x800000
	or	$3,$4,$3
	sw	$3,0($2)
$L693:
	lw	$6,1852($22)
	lui	$4,%hi($LC39)
	jal	printk
	addiu	$4,$4,%lo($LC39)

	j	$L692
	lw	$7,%lo(profile_pkt_index)($16)

$L996:
	lui	$5,%hi(g_sc_magic)
	sll	$22,$22,2
	addiu	$5,$5,%lo(g_sc_magic)
	addu	$22,$5,$22
	lw	$2,0($22)
	j	$L600
	sw	$2,8($fp)

$L958:
	lw	$2,8($fp)
	bne	$2,$0,$L1066
	lw	$31,76($sp)

	lui	$3,%hi(g_sc_magic)
	sll	$22,$22,2
	addiu	$3,$3,%lo(g_sc_magic)
	addu	$22,$3,$22
	lw	$2,0($22)
	j	$L569
	sw	$2,8($fp)

$L926:
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	lw	$4,0($23)
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$2,$2,$3
	sll	$3,$2,5
	sll	$2,$2,2
	subu	$2,$3,$2
	lui	$3,%hi(g_option_sa)
	addiu	$3,$3,%lo(g_option_sa)
	addu	$2,$3,$2
	j	$L603
	sw	$4,12($2)

$L984:
	lui	$fp,%hi(g_p4_option_num)
	lw	$2,%lo(g_p4_option_num)($fp)
	li	$3,-859045888			# 0xffffffffcccc0000
	ori	$3,$3,0xcccd
	multu	$2,$3
	lw	$4,0($23)
	mfhi	$3
	srl	$3,$3,2
	sll	$5,$3,2
	addu	$3,$5,$3
	subu	$2,$2,$3
	sll	$3,$2,5
	sll	$2,$2,2
	subu	$2,$3,$2
	lui	$3,%hi(g_option_sa)
	addiu	$3,$3,%lo(g_option_sa)
	addu	$2,$2,$3
	j	$L603
	sw	$4,8($2)

$L1000:
	lui	$5,%hi(g_option_sa)
	addiu	$4,$5,%lo(g_option_sa)
	li	$6,140			# 0x8c
	move	$5,$0
	jal	memset
	sw	$8,32($sp)

	lbu	$2,40($16)
	lw	$8,32($sp)
	beq	$2,$8,$L1050
	li	$3,1			# 0x1

	bne	$2,$3,$L1066
	lw	$31,76($sp)

	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L1018:
	lui	$18,%hi(g_p4_magic_1)
	lw	$2,%lo(g_p4_magic_1)($18)
	bne	$2,$0,$L944
	nop

	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$2,%lo(g_p4_to_ds_hrate)($2)
	beq	$2,$0,$L701
	nop

	lw	$2,1852($22)
	sltu	$3,$2,63
	bne	$3,$0,$L701
	li	$3,86			# 0x56

	beq	$2,$3,$L701
	li	$3,107			# 0x6b

	bne	$2,$3,$L1066
	lw	$31,76($sp)

$L701:
	lw	$5,12($16)
	lui	$2,%hi(g_sc_magic)
	lui	$4,%hi(g_sc_magic+32)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L703:
	lw	$3,0($2)
	addiu	$6,$3,3
	beq	$6,$5,$L1051
	addiu	$2,$2,4

	bne	$2,$4,$L703
	lw	$31,76($sp)

	j	$L1078
	lw	$fp,72($sp)

$L704:
	lui	$2,%hi(g_p4_to_ds_hrate)
	lw	$3,%lo(g_p4_to_ds_hrate)($2)
	bne	$3,$0,$L705
	nop

	lbu	$3,64($16)
	sltu	$3,$3,55
	bne	$3,$0,$L705
	nop

	sw	$4,%lo(g_p4_to_ds_hrate)($2)
$L705:
	lw	$5,12($16)
	lui	$2,%hi(g_sc_magic)
	lui	$4,%hi(g_sc_magic+32)
	addiu	$2,$2,%lo(g_sc_magic)
	addiu	$4,$4,%lo(g_sc_magic+32)
$L707:
	lw	$3,0($2)
	addiu	$6,$3,3
	beq	$6,$5,$L1052
	addiu	$2,$2,4

	bne	$2,$4,$L707
	lw	$31,76($sp)

	j	$L1078
	lw	$fp,72($sp)

$L665:
	sw	$0,10900($23)
	j	$L625
	move	$19,$0

$L1051:
	j	$L569
	sw	$3,%lo(g_p4_magic_1)($18)

$L1050:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L1052:
	j	$L569
	sw	$3,%lo(g_p4_magic_2)($18)

$L1032:
	lui	$21,%hi(g_p4_group_index_FromDS)
	lw	$2,%lo(g_p4_group_index_FromDS)($21)
	bltz	$2,$L1053
	nop

	sb	$2,4462($22)
	j	$L896
	lbu	$2,40($16)

$L1031:
	lui	$21,%hi(g_p4_group_index_ToDS)
	lw	$2,%lo(g_p4_group_index_ToDS)($21)
	bltz	$2,$L1054
	andi	$fp,$23,0x1f

	sb	$2,7632($22)
	j	$L896
	lbu	$2,40($16)

$L1053:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10808($22)

$L1054:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L712:
	lw	$7,%lo(profile_pkt_index)($16)
	lui	$3,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($3)
	andi	$2,$2,0x7
	addiu	$7,$7,1
	li	$8,1			# 0x1
	sb	$8,3130($6)
	sb	$2,2874($6)
	beq	$3,$4,$L714
	sw	$7,%lo(profile_pkt_index)($16)

$L938:
	j	$L713
	lw	$3,1852($22)

$L1025:
	jal	rtk_sc_check_profile
	move	$4,$17

	li	$3,-1			# 0xffffffffffffffff
	beq	$2,$3,$L1109
	lui	$2,%hi(g_sc_ctx+2874)

	j	$L569
	sw	$0,%lo(profile_pkt_index)($16)

$L714:
	li	$2,1717960704			# 0x66660000
	ori	$2,$2,0x6667
	mult	$7,$2
	sra	$3,$7,31
	mfhi	$2
	sra	$2,$2,2
	subu	$2,$2,$3
	sll	$3,$2,3
	sll	$2,$2,1
	addu	$2,$2,$3
	bne	$7,$2,$L715
	li	$2,-1207959552			# 0xffffffffb8000000

	ori	$2,$2,0x311c
	lw	$4,0($2)
	li	$3,8388608			# 0x800000
	or	$3,$4,$3
	sw	$3,0($2)
$L715:
	lw	$6,1852($22)
	lui	$4,%hi($LC41)
	jal	printk
	addiu	$4,$4,%lo($LC41)

	j	$L938
	lw	$7,%lo(profile_pkt_index)($16)

$L1040:
	lbu	$2,4462($22)
	addu	$3,$22,$2
	lbu	$3,4479($3)
	bne	$3,$0,$L829
	sll	$4,$2,5

	addu	$3,$22,$4
	addu	$5,$3,$20
	lbu	$6,5007($5)
	bne	$6,$0,$L829
	addiu	$2,$2,2702

	sll	$2,$2,2
	addu	$2,$22,$2
	lw	$2,4($2)
	sltu	$6,$20,$2
	beq	$6,$0,$L830
	nop

	lbu	$2,4495($5)
	beq	$2,$0,$L1110
	addu	$4,$22,$4

	sb	$0,4495($5)
	lbu	$2,4462($22)
	sll	$4,$2,5
	addu	$4,$22,$4
$L1110:
	addu	$4,$4,$20
	sb	$19,4495($4)
$L834:
	lbu	$2,4462($22)
	sll	$2,$2,5
	addu	$2,$22,$2
	addu	$20,$2,$20
	li	$2,1			# 0x1
	sb	$2,5007($20)
	lbu	$2,4462($22)
	addu	$2,$22,$2
	lbu	$3,4463($2)
	addiu	$3,$3,1
	sb	$3,4463($2)
$L829:
	li	$2,25			# 0x19
	beq	$fp,$2,$L931
	lui	$21,%hi(g_p4_group_index_FromDS)

$L835:
	lbu	$2,4462($22)
	addu	$4,$22,$2
	lbu	$3,4479($4)
	bne	$3,$0,$L836
	nop

	lbu	$3,4463($4)
	lbu	$6,3388($4)
	beq	$3,$6,$L1055
	sll	$7,$2,5

	lw	$4,10876($22)
	bne	$4,$0,$L836
	sltu	$3,$3,$6

	beq	$3,$0,$L836
	addiu	$3,$2,2702

	sll	$3,$3,2
	addu	$3,$22,$3
	lw	$4,4($3)
	sll	$5,$2,5
	move	$3,$0
	addu	$5,$5,$4
	addu	$5,$22,$5
	addiu	$5,$5,5007
$L844:
	slt	$7,$4,$6
	beq	$7,$0,$L1056
	addiu	$4,$4,1

	lbu	$7,0($5)
	addiu	$5,$5,1
	xori	$7,$7,0x1
	sltu	$7,$7,1
	j	$L844
	addu	$3,$3,$7

$L830:
	subu	$5,$20,$2
	srl	$5,$5,1
	andi	$4,$20,0x1
	beq	$4,$0,$L833
	addu	$2,$5,$2

	addu	$2,$3,$2
	lbu	$3,4495($2)
	or	$19,$19,$3
	j	$L834
	sb	$19,4495($2)

$L930:
	ori	$3,$3,0x311c
	lw	$8,0($3)
	lui	$18,%hi(g_p4_group)
	lw	$5,%lo(g_p4_group)($18)
	li	$4,8388608			# 0x800000
	or	$8,$8,$4
	lui	$4,%hi($LC46)
	sw	$8,0($3)
	addiu	$4,$4,%lo($LC46)
	move	$6,$20
	move	$7,$19
	jal	printk
	sw	$2,16($sp)

	j	$L827
	lbu	$2,40($16)

$L833:
	addu	$3,$3,$2
	lbu	$2,4495($3)
	sll	$19,$19,4
	or	$19,$2,$19
	j	$L834
	sb	$19,4495($3)

$L1039:
	lw	$6,10888($22)
	blez	$6,$L1111
	lui	$3,%hi(g_sc_debug)

	lhu	$3,36($16)
	lhu	$5,10880($22)
	sltu	$4,$5,$3
	beq	$4,$0,$L821
	sltu	$4,$3,$5

	subu	$4,$3,$5
	slt	$4,$4,33
	bne	$4,$0,$L1112
	lui	$21,%hi(g_p4_group_index_ToDS)

$L1113:
	lw	$4,%lo(g_p4_group_index_ToDS)($21)
	beq	$6,$4,$L1066
	lw	$31,76($sp)

$L823:
	slt	$7,$6,$4
	beq	$7,$0,$L814
	addiu	$4,$4,-1

	bne	$6,$4,$L814
	nop

	lhu	$4,10884($22)
	sltu	$6,$4,$3
	beq	$6,$0,$L826
	subu	$6,$3,$4

	slt	$6,$6,37
$L1121:
	beq	$6,$0,$L1066
	lw	$31,76($sp)

$L826:
	sltu	$4,$3,$4
	beq	$4,$0,$L814
	nop

	bne	$3,$5,$L1111
	lui	$3,%hi(g_sc_debug)

	j	$L1066
	lw	$31,76($sp)

$L821:
	beq	$4,$0,$L1112
	lui	$21,%hi(g_p4_group_index_ToDS)

	subu	$4,$5,$3
	slt	$4,$4,4063
	bne	$4,$0,$L1113
	nop

$L1112:
	j	$L823
	lw	$4,%lo(g_p4_group_index_ToDS)($21)

$L1038:
	lw	$6,10892($22)
	blez	$6,$L1111
	lui	$3,%hi(g_sc_debug)

	lhu	$3,36($16)
	lhu	$5,10882($22)
	sltu	$4,$5,$3
	beq	$4,$0,$L815
	sltu	$4,$3,$5

	subu	$4,$3,$5
	slt	$4,$4,33
	bne	$4,$0,$L1114
	lui	$21,%hi(g_p4_group_index_FromDS)

$L1118:
	lw	$4,%lo(g_p4_group_index_FromDS)($21)
	beq	$6,$4,$L1066
	lw	$31,76($sp)

$L817:
	slt	$7,$6,$4
	beq	$7,$0,$L814
	addiu	$4,$4,-1

	bne	$6,$4,$L814
	nop

	lhu	$4,10886($22)
	sltu	$6,$4,$3
	beq	$6,$0,$L826
	subu	$6,$3,$4

	j	$L1121
	slt	$6,$6,37

$L1034:
	lhu	$3,36($16)
	lhu	$4,10810($22)
	sltu	$5,$4,$3
	beq	$5,$0,$L1115
	sltu	$5,$3,$4

	subu	$5,$3,$4
	slt	$5,$5,10
$L1122:
	beq	$5,$0,$L1066
	lw	$31,76($sp)

$L811:
	sltu	$5,$3,$4
$L1115:
	beq	$5,$0,$L1116
	addiu	$20,$fp,-2

	subu	$3,$4,$3
	slt	$3,$3,4086
	beq	$3,$0,$L1117
	sltu	$3,$20,24

	j	$L1066
	lw	$31,76($sp)

$L1036:
	addiu	$18,$18,%lo(g_sc_ctx+3405)
	lui	$23,%hi(g_sc_ctx+2874)
	addiu	$21,$23,%lo(g_sc_ctx+2874)
	move	$20,$18
	move	$19,$0
$L888:
	slt	$2,$19,$2
	beq	$2,$0,$L1057
	addu	$2,$22,$19

	lbu	$6,3388($2)
	move	$4,$21
	move	$5,$20
	jal	memcpy
	addiu	$6,$6,-8

	addiu	$19,$19,1
	lbu	$2,4461($22)
	addiu	$21,$21,16
	j	$L888
	addiu	$20,$20,32

$L1056:
	slt	$4,$3,8
	bne	$4,$0,$L836
	li	$4,8			# 0x8

	beq	$3,$4,$L1058
	lui	$3,%hi(g_sc_ctx+5520)

$L836:
	lhu	$2,36($16)
$L1076:
	lw	$3,%lo(g_p4_group_index_FromDS)($21)
	sh	$2,10882($22)
	j	$L812
	sw	$3,10892($22)

$L1058:
	addiu	$3,$3,%lo(g_sc_ctx+5520)
	sll	$2,$2,7
	addu	$4,$3,$2
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lbu	$2,4462($22)
	move	$5,$0
	move	$3,$0
	addiu	$2,$2,1892
	sll	$2,$2,2
	addu	$2,$22,$2
	sw	$0,0($2)
	lbu	$2,4462($22)
	move	$13,$22
	li	$12,1			# 0x1
	addiu	$4,$2,2702
	sll	$4,$4,2
	addiu	$6,$2,1892
	addu	$4,$22,$4
	sll	$6,$6,2
	sll	$7,$2,5
	move	$11,$4
	lw	$8,4($4)
	addu	$6,$22,$6
	move	$4,$2
	addu	$10,$22,$7
	li	$9,21			# 0x15
$L847:
	slt	$14,$3,$8
	beq	$14,$0,$L1059
	addu	$14,$10,$3

	lbu	$14,5007($14)
	beq	$14,$12,$L1060
	subu	$14,$9,$3

	lw	$8,0($6)
	move	$4,$2
	addu	$8,$7,$8
	addiu	$8,$8,1380
	sll	$8,$8,2
	addu	$8,$8,$13
	sw	$14,0($8)
	lw	$8,0($6)
	addiu	$8,$8,1
	sw	$8,0($6)
	lw	$8,4($11)
$L849:
	j	$L847
	addiu	$3,$3,1

$L931:
	li	$2,-1			# 0xffffffffffffffff
	j	$L835
	sw	$2,%lo(g_p4_group_index_FromDS)($21)

$L1060:
	j	$L849
	addiu	$5,$5,1

$L1059:
	addu	$2,$22,$2
	lbu	$3,3388($2)
	addiu	$3,$3,-10
	slt	$5,$3,$5
	beq	$5,$0,$L836
	move	$3,$0

	lbu	$6,4462($22)
	lbu	$5,4463($2)
	move	$2,$0
	addu	$7,$22,$6
$L851:
	slt	$8,$2,$5
	beq	$8,$0,$L1061
	slt	$8,$2,16

	beq	$8,$0,$L852
	nop

	sll	$4,$4,5
	addu	$4,$22,$4
	addu	$4,$4,$2
	lbu	$8,4495($4)
	sltu	$8,$8,16
	bne	$8,$0,$L852
	nop

	sb	$0,5007($4)
	lbu	$5,4463($7)
	addiu	$3,$3,1
$L852:
	addiu	$2,$2,1
	j	$L851
	move	$4,$6

$L1061:
	beq	$3,$0,$L1062
	subu	$3,$5,$3

	addu	$4,$22,$4
	j	$L836
	sb	$3,4463($4)

$L1055:
	move	$6,$4
	addu	$7,$22,$7
	move	$5,$0
	move	$4,$0
$L838:
	slt	$8,$4,$3
	beq	$8,$0,$L1063
	nop

	slt	$3,$4,16
	beq	$3,$0,$L839
	nop

	addu	$3,$7,$4
	lbu	$8,4495($3)
	sltu	$8,$8,16
	bne	$8,$0,$L839
	nop

	sb	$0,5007($3)
	addiu	$5,$5,1
$L839:
	lbu	$3,4463($6)
	j	$L838
	addiu	$4,$4,1

$L1063:
	beq	$5,$0,$L1064
	subu	$3,$3,$5

	addu	$2,$22,$2
	j	$L836
	sb	$3,4463($2)

$L1057:
	lui	$2,%hi(g_sc_debug)
	lw	$3,%lo(g_sc_debug)($2)
	li	$2,2			# 0x2
	bne	$3,$2,$L890
	lui	$4,%hi($LC53)

	jal	printk
	addiu	$4,$4,%lo($LC53)

	lbu	$5,4461($22)
	addiu	$4,$23,%lo(g_sc_ctx+2874)
	jal	bytedump
	sll	$5,$5,4

$L890:
	lw	$2,2424($22)
	lui	$3,%hi(pp)
	beq	$2,$0,$L891
	sw	$2,%lo(pp)($3)

	lw	$2,4($2)
	andi	$2,$2,0x2
	bne	$2,$0,$L1065
	nop

$L891:
	lui	$4,%hi($LC54)
	addiu	$4,$4,%lo($LC54)
	lui	$20,%hi(g_sc_ctx+5520)
	lui	$19,%hi(g_sc_ctx+7568)
	lui	$17,%hi(g_sc_ctx+4429)
	jal	printk
	lui	$21,%hi(g_sc_ctx+3917)

	addiu	$20,$20,%lo(g_sc_ctx+5520)
	sb	$0,4461($22)
	addiu	$19,$19,%lo(g_sc_ctx+7568)
	addiu	$17,$17,%lo(g_sc_ctx+4429)
	addiu	$21,$21,%lo(g_sc_ctx+3917)
$L893:
	move	$4,$18
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$4,$18,1602
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$4,$18,4772
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$4,$18,512
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	move	$4,$20
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$18,$18,32
	addiu	$4,$20,3172
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	addiu	$20,$20,128
	sw	$0,0($19)
	sw	$0,3172($19)
	sb	$0,0($17)
	sb	$0,34($17)
	sb	$0,3204($17)
	sb	$0,16($17)
	sb	$0,3220($17)
	sb	$0,50($17)
	addiu	$19,$19,4
	bne	$18,$21,$L893
	addiu	$17,$17,1

	j	$L1075
	lbu	$2,40($16)

$L1065:
	jal	rtk_sc_check_profile
	move	$4,$17

	li	$3,-1			# 0xffffffffffffffff
	beq	$2,$3,$L891
	li	$2,1			# 0x1

	j	$L887
	sb	$2,10804($22)

$L1062:
	jal	initialize_ecc
	lui	$19,%hi(g_sc_ctx+4495)

	lbu	$2,4462($22)
	addiu	$19,$19,%lo(g_sc_ctx+4495)
	addu	$3,$22,$2
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$19,$2
	addiu	$5,$5,-4
	jal	decode_data
	lui	$20,%hi(synBytes)

	lw	$2,%lo(synBytes)($20)
	bne	$2,$0,$L855
	move	$fp,$19

	addiu	$2,$20,%lo(synBytes)
	lw	$3,4($2)
	bne	$3,$0,$L855
	nop

	lw	$3,8($2)
	bne	$3,$0,$L855
	nop

	lw	$2,12($2)
	beq	$2,$0,$L836
	nop

$L855:
	lbu	$2,4462($22)
	addiu	$3,$2,1892
	sll	$3,$3,2
	addu	$3,$22,$3
	lw	$6,0($3)
	blez	$6,$L836
	lui	$4,%hi(g_sc_ctx+5520)

	sll	$7,$2,7
	addiu	$4,$4,%lo(g_sc_ctx+5520)
	sll	$2,$2,5
	addu	$7,$4,$7
	li	$5,20			# 0x14
	jal	correct_errors_erasures
	addu	$4,$fp,$2

	jal	initialize_ecc
	nop

	lbu	$2,4462($22)
	addu	$3,$2,$22
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$fp,$2
	jal	decode_data
	addiu	$5,$5,-4

	lw	$2,%lo(synBytes)($20)
	bne	$2,$0,$L856
	nop

	lui	$2,%hi(synBytes)
	addiu	$2,$2,%lo(synBytes)
	lw	$3,4($2)
	bne	$3,$0,$L856
	nop

	lw	$3,8($2)
	bne	$3,$0,$L856
	nop

	lw	$2,12($2)
	bne	$2,$0,$L856
	nop

	lbu	$2,4462($22)
	li	$20,1			# 0x1
	addu	$2,$2,$22
	sb	$20,4479($2)
	lbu	$2,4462($22)
	addu	$3,$2,$22
	lbu	$3,4445($3)
	bne	$3,$0,$L836
	lui	$4,%hi(g_sc_ctx+3405)

	sll	$2,$2,5
	addiu	$4,$4,%lo(g_sc_ctx+3405)
	addu	$5,$19,$2
	addu	$4,$4,$2
	jal	memcpy
	li	$6,16			# 0x10

	lbu	$5,4461($22)
	lbu	$2,4462($22)
	lui	$4,%hi($LC49)
	addiu	$5,$5,1
	andi	$5,$5,0x00ff
	addu	$2,$2,$22
	sb	$5,4461($22)
	sb	$20,4445($2)
	lbu	$6,4462($22)
	jal	printk
	addiu	$4,$4,%lo($LC49)

	j	$L1076
	lhu	$2,36($16)

$L1064:
	jal	initialize_ecc
	lui	$19,%hi(g_sc_ctx+4495)

	lbu	$2,4462($22)
	addiu	$19,$19,%lo(g_sc_ctx+4495)
	addu	$3,$22,$2
	lbu	$5,3388($3)
	sll	$2,$2,5
	addu	$4,$19,$2
	jal	decode_data
	addiu	$5,$5,-4

	lui	$2,%hi(synBytes)
	lw	$3,%lo(synBytes)($2)
	bne	$3,$0,$L842
	addiu	$2,$2,%lo(synBytes)

	lw	$3,4($2)
	bne	$3,$0,$L842
	nop

	lw	$3,8($2)
	bne	$3,$0,$L842
	nop

	lw	$2,12($2)
	bne	$2,$0,$L842
	nop

	lbu	$2,4462($22)
	li	$20,1			# 0x1
	addu	$2,$2,$22
	sb	$20,4479($2)
	lbu	$2,4462($22)
	addu	$3,$2,$22
	lbu	$3,4445($3)
	bne	$3,$0,$L836
	lui	$4,%hi(g_sc_ctx+3405)

	sll	$2,$2,5
	addiu	$4,$4,%lo(g_sc_ctx+3405)
	addu	$5,$19,$2
	addu	$4,$4,$2
	jal	memcpy
	li	$6,16			# 0x10

	lbu	$5,4461($22)
	lbu	$2,4462($22)
	lui	$4,%hi($LC47)
	addiu	$5,$5,1
	andi	$5,$5,0x00ff
	addu	$2,$2,$22
	sb	$5,4461($22)
	sb	$20,4445($2)
	lbu	$6,4462($22)
	jal	printk
	addiu	$4,$4,%lo($LC47)

	j	$L1076
	lhu	$2,36($16)

$L856:
	lbu	$6,4462($22)
	lui	$4,%hi($LC48)
	addiu	$4,$4,%lo($LC48)
	jal	printk
	li	$5,3227			# 0xc9b

	j	$L1076
	lhu	$2,36($16)

$L842:
	lbu	$2,4462($22)
	lui	$4,%hi(g_sc_ctx+5007)
	addiu	$4,$4,%lo(g_sc_ctx+5007)
	addu	$2,$22,$2
	sb	$0,4463($2)
	lbu	$2,4462($22)
	move	$5,$0
	li	$6,32			# 0x20
	sll	$2,$2,5
	jal	memset
	addu	$4,$4,$2

	lbu	$4,4462($22)
	move	$5,$0
	li	$6,32			# 0x20
	sll	$4,$4,5
	jal	memset
	addu	$4,$19,$4

	lbu	$2,4462($22)
	lui	$4,%hi(g_sc_ctx+5520)
	addiu	$4,$4,%lo(g_sc_ctx+5520)
	sll	$2,$2,7
	addu	$4,$4,$2
	move	$5,$0
	jal	memset
	li	$6,32			# 0x20

	lbu	$2,4462($22)
	addiu	$2,$2,1892
	sll	$2,$2,2
	addu	$2,$22,$2
	j	$L836
	sw	$0,0($2)

$L1035:
	lhu	$3,36($16)
	lhu	$4,10808($22)
	sltu	$5,$4,$3
	beq	$5,$0,$L811
	subu	$5,$3,$4

	j	$L1122
	slt	$5,$5,10

$L1037:
	lhu	$2,36($16)
	j	$L569
	sh	$2,10810($22)

$L815:
	beq	$4,$0,$L1114
	lui	$21,%hi(g_p4_group_index_FromDS)

	subu	$4,$5,$3
	slt	$4,$4,4063
	bne	$4,$0,$L1118
	nop

$L1114:
	j	$L817
	lw	$4,%lo(g_p4_group_index_FromDS)($21)

	.set	macro
	.set	reorder
	.end	rtk_sc_start_parse_packet
	.size	rtk_sc_start_parse_packet, .-rtk_sc_start_parse_packet
	.globl	sync_pkt_index
	.section	.bss,"aw",@nobits
	.align	2
	.type	sync_pkt_index, @object
	.size	sync_pkt_index, 4
sync_pkt_index:
	.space	4
	.globl	profile_pkt_index
	.align	2
	.type	profile_pkt_index, @object
	.size	profile_pkt_index, 4
profile_pkt_index:
	.space	4
	.globl	finish_sync
	.align	2
	.type	finish_sync, @object
	.size	finish_sync, 4
finish_sync:
	.space	4
	.globl	use_ios7_mac
	.align	2
	.type	use_ios7_mac, @object
	.size	use_ios7_mac, 4
use_ios7_mac:
	.space	4
	.globl	sequence
	.align	2
	.type	sequence, @object
	.size	sequence, 4
sequence:
	.space	4
	.globl	g_sc_send_ack_round
	.align	2
	.type	g_sc_send_ack_round, @object
	.size	g_sc_send_ack_round, 4
g_sc_send_ack_round:
	.space	4
	.globl	g_sc_is_vxd
	.align	2
	.type	g_sc_is_vxd, @object
	.size	g_sc_is_vxd, 4
g_sc_is_vxd:
	.space	4
	.globl	g_ios_mac
	.data
	.align	2
	.type	g_ios_mac, @object
	.size	g_ios_mac, 6
g_ios_mac:
	.byte	2
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.globl	null_mac
	.section	.bss
	.align	2
	.type	null_mac, @object
	.size	null_mac, 6
null_mac:
	.space	6
	.globl	g_sc_debug
	.align	2
	.type	g_sc_debug, @object
	.size	g_sc_debug, 4
g_sc_debug:
	.space	4
	.globl	g_sc_check_level
	.align	2
	.type	g_sc_check_level, @object
	.size	g_sc_check_level, 4
g_sc_check_level:
	.space	4
	.globl	g_sc_ignore_overlap
	.align	2
	.type	g_sc_ignore_overlap, @object
	.size	g_sc_ignore_overlap, 4
g_sc_ignore_overlap:
	.space	4
	.globl	default_key_iv
	.data
	.align	2
	.type	default_key_iv, @object
	.size	default_key_iv, 8
default_key_iv:
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.byte	-90
	.globl	udp_mcast
	.align	2
	.type	udp_mcast, @object
	.size	udp_mcast, 64
udp_mcast:
	.word	2
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_mcast_pin
	.align	2
	.type	udp_mcast_pin, @object
	.size	udp_mcast_pin, 64
udp_mcast_pin:
	.word	3
	.word	10
	.ascii	"sc_mcast_udp\000"
	.space	19
	.word	mcast_udp_get_pattern
	.word	mcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast
	.align	2
	.type	udp_bcast, @object
	.size	udp_bcast, 64
udp_bcast:
	.word	4
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.globl	udp_bcast_pin
	.align	2
	.type	udp_bcast_pin, @object
	.size	udp_bcast_pin, 64
udp_bcast_pin:
	.word	5
	.word	10
	.ascii	"sc_bcast_udp\000"
	.space	19
	.word	bcast_udp_get_pattern
	.word	bcast_udp_get_cipher_info
	.word	mcast_udp_generate_key
	.word	mcast_udp_decode_profile
	.word	mcast_udp_get_profile
	.word	mcast_udp_send_ack
	.local	i.69529
	.comm	i.69529,2,2
	.local	radom_value
	.comm	radom_value,4,4
	.align	2
	.type	mcast_udp_buffer, @object
	.size	mcast_udp_buffer, 65
mcast_udp_buffer:
	.ascii	"8CmT/ J(3_aE R_UFR}`mtwF=)Qfjtn^S_1/ffg<_C7yw's}?'_'n&2~"
	.ascii	"Blm&_k?6\000"
	.local	Lambda
	.comm	Lambda,32,4
	.local	Omega
	.comm	Omega,32,4
	.local	ErrorLocs
	.comm	ErrorLocs,1024,4
	.local	NErrors
	.comm	NErrors,4,4
	.local	ErasureLocs
	.comm	ErasureLocs,1024,4
	.local	NErasures
	.comm	NErasures,4,4
	.local	g_sc_ctx
	.comm	g_sc_ctx,10904,4
	.globl	pBytes
	.section	.bss
	.align	2
	.type	pBytes, @object
	.size	pBytes, 32
pBytes:
	.space	32
	.globl	synBytes
	.align	2
	.type	synBytes, @object
	.size	synBytes, 32
synBytes:
	.space	32
	.globl	genPoly
	.align	2
	.type	genPoly, @object
	.size	genPoly, 64
genPoly:
	.space	64
	.globl	gexp
	.align	2
	.type	gexp, @object
	.size	gexp, 2048
gexp:
	.space	2048
	.globl	glog
	.align	2
	.type	glog, @object
	.size	glog, 1024
glog:
	.space	1024
	.globl	fix_sa
	.align	2
	.type	fix_sa, @object
	.size	fix_sa, 4
fix_sa:
	.space	4
	.globl	g_sc_pin_len
	.align	2
	.type	g_sc_pin_len, @object
	.size	g_sc_pin_len, 4
g_sc_pin_len:
	.space	4
	.globl	g_sc_bssid
	.align	2
	.type	g_sc_bssid, @object
	.size	g_sc_bssid, 6
g_sc_bssid:
	.space	6
	.globl	g_smac
	.align	2
	.type	g_smac, @object
	.size	g_smac, 6
g_smac:
	.space	6
	.globl	g_dmac
	.align	2
	.type	g_dmac, @object
	.size	g_dmac, 6
g_dmac:
	.space	6
	.globl	g_sc_ifname
	.align	2
	.type	g_sc_ifname, @object
	.size	g_sc_ifname, 32
g_sc_ifname:
	.space	32
	.globl	g_sc_magic
	.align	2
	.type	g_sc_magic, @object
	.size	g_sc_magic, 32
g_sc_magic:
	.space	32
	.globl	g_option_sa
	.align	2
	.type	g_option_sa, @object
	.size	g_option_sa, 140
g_option_sa:
	.space	140
	.globl	g_p4_option_num
	.align	2
	.type	g_p4_option_num, @object
	.size	g_p4_option_num, 4
g_p4_option_num:
	.space	4
	.globl	g_p4_magic_1
	.align	2
	.type	g_p4_magic_1, @object
	.size	g_p4_magic_1, 4
g_p4_magic_1:
	.space	4
	.globl	g_p4_magic_2
	.align	2
	.type	g_p4_magic_2, @object
	.size	g_p4_magic_2, 4
g_p4_magic_2:
	.space	4
	.globl	g_p4_have_pin
	.align	2
	.type	g_p4_have_pin, @object
	.size	g_p4_have_pin, 4
g_p4_have_pin:
	.space	4
	.globl	g_p4_magic_len
	.align	2
	.type	g_p4_magic_len, @object
	.size	g_p4_magic_len, 4
g_p4_magic_len:
	.space	4
	.globl	g_p4_group
	.align	2
	.type	g_p4_group, @object
	.size	g_p4_group, 4
g_p4_group:
	.space	4
	.globl	g_p4_last_group
	.align	2
	.type	g_p4_last_group, @object
	.size	g_p4_last_group, 4
g_p4_last_group:
	.space	4
	.globl	g_p4_last_seq
	.align	2
	.type	g_p4_last_seq, @object
	.size	g_p4_last_seq, 4
g_p4_last_seq:
	.space	4
	.globl	g_p4_option_idx
	.align	2
	.type	g_p4_option_idx, @object
	.size	g_p4_option_idx, 4
g_p4_option_idx:
	.space	4
	.globl	g_p4_to_ds_hrate
	.align	2
	.type	g_p4_to_ds_hrate, @object
	.size	g_p4_to_ds_hrate, 4
g_p4_to_ds_hrate:
	.space	4
	.globl	g_p4_group_index_FromDS
	.align	2
	.type	g_p4_group_index_FromDS, @object
	.size	g_p4_group_index_FromDS, 4
g_p4_group_index_FromDS:
	.space	4
	.globl	g_p4_group_index_ToDS
	.align	2
	.type	g_p4_group_index_ToDS, @object
	.size	g_p4_group_index_ToDS, 4
g_p4_group_index_ToDS:
	.space	4
	.globl	g_pkt_type
	.align	2
	.type	g_pkt_type, @object
	.size	g_pkt_type, 4
g_pkt_type:
	.space	4
	.globl	g_sc_config_type
	.align	2
	.type	g_sc_config_type, @object
	.size	g_sc_config_type, 4
g_sc_config_type:
	.space	4
	.globl	pp
	.align	2
	.type	pp, @object
	.size	pp, 4
pp:
	.space	4
	.globl	ack_pkt
	.align	2
	.type	ack_pkt, @object
	.size	ack_pkt, 108
ack_pkt:
	.space	108
	.ident	"GCC: (Realtek MSDK-4.4.7 Build 2001) 4.4.7"
